; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\Flash\Obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.DSP_ABS||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSP_ABS PROC
;;;200    */
;;;201    static void DSP_ABS(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
000002  ed2d8b02          VPUSH    {d8}
;;;203    	static float32_t pSrc;
;;;204        static float32_t pDst;
;;;205    	
;;;206    	static q31_t pSrc1;
;;;207    	static q31_t pDst1;
;;;208    	
;;;209    	static q15_t pSrc2;
;;;210    	static q15_t pDst2;
;;;211    	
;;;212    	static q7_t pSrc3 = 127; /* 为了说明问题，在这里设置初始值为127，然后查看0x80是否饱和为0x7F */
;;;213    	static q7_t pDst3;
;;;214    	
;;;215    	
;;;216    	/*求绝对值*********************************/
;;;217    	pSrc -= 1.23f;
000006  482c              LDR      r0,|L1.184|
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  eddf0a2b          VLDR     s1,|L1.188|
000010  ee300a60          VSUB.F32 s0,s0,s1
000014  ed800a00          VSTR     s0,[r0,#0]
;;;218    	arm_abs_f32(&pSrc, &pDst, 1);
000018  2201              MOVS     r2,#1
00001a  4929              LDR      r1,|L1.192|
00001c  f7fffffe          BL       arm_abs_f32
;;;219    	printf("arm_abs_f32 = %f\r\n", pDst);
000020  4827              LDR      r0,|L1.192|
000022  6800              LDR      r0,[r0,#0]  ; pDst
000024  f7fffffe          BL       __aeabi_f2d
000028  ec410b10          VMOV     d0,r0,r1
00002c  eeb08a40          VMOV.F32 s16,s0
000030  eef08a60          VMOV.F32 s17,s1
000034  ec532b18          VMOV     r2,r3,d8
000038  a022              ADR      r0,|L1.196|
00003a  f7fffffe          BL       __2printf
;;;220    
;;;221    	pSrc1 -= 1;
00003e  4826              LDR      r0,|L1.216|
000040  6800              LDR      r0,[r0,#0]  ; pSrc1
000042  1e40              SUBS     r0,r0,#1
000044  4924              LDR      r1,|L1.216|
000046  6008              STR      r0,[r1,#0]  ; pSrc1
;;;222    	arm_abs_q31(&pSrc1, &pDst1, 1);
000048  2201              MOVS     r2,#1
00004a  4924              LDR      r1,|L1.220|
00004c  4822              LDR      r0,|L1.216|
00004e  f7fffffe          BL       arm_abs_q31
;;;223    	printf("arm_abs_q31 = %d\r\n", pDst1);
000052  4822              LDR      r0,|L1.220|
000054  6801              LDR      r1,[r0,#0]  ; pDst1
000056  a022              ADR      r0,|L1.224|
000058  f7fffffe          BL       __2printf
;;;224    
;;;225    	pSrc2 -= 1;
00005c  4825              LDR      r0,|L1.244|
00005e  8800              LDRH     r0,[r0,#0]  ; pSrc2
000060  1e40              SUBS     r0,r0,#1
000062  b200              SXTH     r0,r0
000064  4923              LDR      r1,|L1.244|
000066  8008              STRH     r0,[r1,#0]
;;;226    	arm_abs_q15(&pSrc2, &pDst2, 1);
000068  2201              MOVS     r2,#1
00006a  4923              LDR      r1,|L1.248|
00006c  4821              LDR      r0,|L1.244|
00006e  f7fffffe          BL       arm_abs_q15
;;;227    	printf("arm_abs_q15 = %d\r\n", pDst2);
000072  4821              LDR      r0,|L1.248|
000074  f9b01000          LDRSH    r1,[r0,#0]  ; pDst2
000078  a020              ADR      r0,|L1.252|
00007a  f7fffffe          BL       __2printf
;;;228    
;;;229    	pSrc3 += 1; 
00007e  4824              LDR      r0,|L1.272|
000080  7800              LDRB     r0,[r0,#0]  ; pSrc3
000082  1c40              ADDS     r0,r0,#1
000084  b240              SXTB     r0,r0
000086  4922              LDR      r1,|L1.272|
000088  7008              STRB     r0,[r1,#0]
;;;230    	printf("pSrc3 = %d\r\n", pSrc3);
00008a  4608              MOV      r0,r1
00008c  f9901000          LDRSB    r1,[r0,#0]  ; pSrc3
000090  a020              ADR      r0,|L1.276|
000092  f7fffffe          BL       __2printf
;;;231    	arm_abs_q7(&pSrc3, &pDst3, 1);
000096  2201              MOVS     r2,#1
000098  4922              LDR      r1,|L1.292|
00009a  481d              LDR      r0,|L1.272|
00009c  f7fffffe          BL       arm_abs_q7
;;;232    	printf("arm_abs_q7 = %d\r\n", pDst3);
0000a0  4820              LDR      r0,|L1.292|
0000a2  f9901000          LDRSB    r1,[r0,#0]  ; pDst3
0000a6  a020              ADR      r0,|L1.296|
0000a8  f7fffffe          BL       __2printf
;;;233    	printf("***********************************\r\n");
0000ac  a023              ADR      r0,|L1.316|
0000ae  f7fffffe          BL       __2printf
;;;234    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  |L1.184|
                          DCD      pSrc
                  |L1.188|
0000bc  3f9d70a4          DCFS     0x3f9d70a4 ; 1.2300000190734863
                  |L1.192|
                          DCD      |symbol_number.38|
                  |L1.196|
0000c4  61726d5f          DCB      "arm_abs_f32 = %f\r\n",0
0000c8  6162735f
0000cc  66333220
0000d0  3d202566
0000d4  0d0a00  
0000d7  00                DCB      0
                  |L1.216|
                          DCD      pSrc1
                  |L1.220|
                          DCD      |symbol_number.40|
                  |L1.224|
0000e0  61726d5f          DCB      "arm_abs_q31 = %d\r\n",0
0000e4  6162735f
0000e8  71333120
0000ec  3d202564
0000f0  0d0a00  
0000f3  00                DCB      0
                  |L1.244|
                          DCD      pSrc2
                  |L1.248|
                          DCD      |symbol_number.42|
                  |L1.252|
0000fc  61726d5f          DCB      "arm_abs_q15 = %d\r\n",0
000100  6162735f
000104  71313520
000108  3d202564
00010c  0d0a00  
00010f  00                DCB      0
                  |L1.272|
                          DCD      pSrc3
                  |L1.276|
000114  70537263          DCB      "pSrc3 = %d\r\n",0
000118  33203d20
00011c  25640d0a
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L1.292|
                          DCD      pDst3
                  |L1.296|
000128  61726d5f          DCB      "arm_abs_q7 = %d\r\n",0
00012c  6162735f
000130  7137203d
000134  2025640d
000138  0a00    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L1.316|
00013c  2a2a2a2a          DCB      "***********************************\r\n",0
000140  2a2a2a2a
000144  2a2a2a2a
000148  2a2a2a2a
00014c  2a2a2a2a
000150  2a2a2a2a
000154  2a2a2a2a
000158  2a2a2a2a
00015c  2a2a2a0d
000160  0a00    
000162  00                DCB      0
000163  00                DCB      0

                          AREA ||i.DSP_Add||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSP_Add PROC
;;;243    */
;;;244    static void DSP_Add(void)
000000  b510              PUSH     {r4,lr}
;;;245    {
000002  ed2d8b02          VPUSH    {d8}
;;;246    	static float32_t   pSrcA;
;;;247    	static float32_t   pSrcB;  
;;;248    	static float32_t   pDst;  
;;;249    	
;;;250    	static q31_t  pSrcA1;  
;;;251    	static q31_t  pSrcB1;  
;;;252    	static q31_t  pDst1;  
;;;253    
;;;254    	static q15_t  pSrcA2;  
;;;255    	static q15_t  pSrcB2;  
;;;256    	static q15_t  pDst2; 
;;;257    
;;;258    	static q7_t  pSrcA3; 
;;;259    	static q7_t  pSrcB3;  
;;;260    	static q7_t  pDst3;  
;;;261    
;;;262    	
;;;263    	/*求绝对值*********************************/
;;;264    	pSrcA--;
000006  482b              LDR      r0,|L2.180|
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  eef70a00          VMOV.F32 s1,#1.00000000
000010  ee300a60          VSUB.F32 s0,s0,s1
000014  ed800a00          VSTR     s0,[r0,#0]
;;;265    	arm_add_f32(&pSrcA, &pSrcB, &pDst, 1);
000018  2301              MOVS     r3,#1
00001a  4a27              LDR      r2,|L2.184|
00001c  4927              LDR      r1,|L2.188|
00001e  f7fffffe          BL       arm_add_f32
;;;266    	printf("arm_add_f32 = %f\r\n", pDst);
000022  4825              LDR      r0,|L2.184|
000024  6800              LDR      r0,[r0,#0]  ; pDst
000026  f7fffffe          BL       __aeabi_f2d
00002a  ec410b10          VMOV     d0,r0,r1
00002e  eeb08a40          VMOV.F32 s16,s0
000032  eef08a60          VMOV.F32 s17,s1
000036  ec532b18          VMOV     r2,r3,d8
00003a  a021              ADR      r0,|L2.192|
00003c  f7fffffe          BL       __2printf
;;;267    
;;;268    	pSrcA1--;
000040  4824              LDR      r0,|L2.212|
000042  6800              LDR      r0,[r0,#0]  ; pSrcA1
000044  1e40              SUBS     r0,r0,#1
000046  4923              LDR      r1,|L2.212|
000048  6008              STR      r0,[r1,#0]  ; pSrcA1
;;;269    	arm_add_q31(&pSrcA1, &pSrcB1, &pDst1, 1);
00004a  2301              MOVS     r3,#1
00004c  4a22              LDR      r2,|L2.216|
00004e  4923              LDR      r1,|L2.220|
000050  4820              LDR      r0,|L2.212|
000052  f7fffffe          BL       arm_add_q31
;;;270    	printf("arm_add_q31 = %d\r\n", pDst1);
000056  4820              LDR      r0,|L2.216|
000058  6801              LDR      r1,[r0,#0]  ; pDst1
00005a  a021              ADR      r0,|L2.224|
00005c  f7fffffe          BL       __2printf
;;;271    
;;;272    	pSrcA2--;
000060  4824              LDR      r0,|L2.244|
000062  8800              LDRH     r0,[r0,#0]  ; pSrcA2
000064  1e40              SUBS     r0,r0,#1
000066  b200              SXTH     r0,r0
000068  4922              LDR      r1,|L2.244|
00006a  8008              STRH     r0,[r1,#0]
;;;273    	arm_add_q15(&pSrcA2, &pSrcB2, &pDst2, 1);
00006c  2301              MOVS     r3,#1
00006e  4a22              LDR      r2,|L2.248|
000070  4922              LDR      r1,|L2.252|
000072  4820              LDR      r0,|L2.244|
000074  f7fffffe          BL       arm_add_q15
;;;274    	printf("arm_add_q15 = %d\r\n", pDst2);
000078  481f              LDR      r0,|L2.248|
00007a  f9b01000          LDRSH    r1,[r0,#0]  ; pDst2
00007e  a020              ADR      r0,|L2.256|
000080  f7fffffe          BL       __2printf
;;;275    
;;;276    	pSrcA3--;
000084  4823              LDR      r0,|L2.276|
000086  7800              LDRB     r0,[r0,#0]  ; pSrcA3
000088  1e40              SUBS     r0,r0,#1
00008a  b240              SXTB     r0,r0
00008c  4921              LDR      r1,|L2.276|
00008e  7008              STRB     r0,[r1,#0]
;;;277    	arm_add_q7(&pSrcA3, &pSrcB3, &pDst3, 1);
000090  2301              MOVS     r3,#1
000092  4a21              LDR      r2,|L2.280|
000094  4921              LDR      r1,|L2.284|
000096  481f              LDR      r0,|L2.276|
000098  f7fffffe          BL       arm_add_q7
;;;278    	printf("arm_add_q7 = %d\r\n", pDst3);
00009c  481e              LDR      r0,|L2.280|
00009e  f9901000          LDRSB    r1,[r0,#0]  ; pDst3
0000a2  a01f              ADR      r0,|L2.288|
0000a4  f7fffffe          BL       __2printf
;;;279    	printf("***********************************\r\n");
0000a8  a022              ADR      r0,|L2.308|
0000aa  f7fffffe          BL       __2printf
;;;280    }
0000ae  ecbd8b02          VPOP     {d8}
0000b2  bd10              POP      {r4,pc}
;;;281    
                          ENDP

                  |L2.180|
                          DCD      pSrcA
                  |L2.184|
                          DCD      |symbol_number.47|
                  |L2.188|
                          DCD      pSrcB
                  |L2.192|
0000c0  61726d5f          DCB      "arm_add_f32 = %f\r\n",0
0000c4  6164645f
0000c8  66333220
0000cc  3d202566
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L2.212|
                          DCD      pSrcA1
                  |L2.216|
                          DCD      |symbol_number.50|
                  |L2.220|
                          DCD      pSrcB1
                  |L2.224|
0000e0  61726d5f          DCB      "arm_add_q31 = %d\r\n",0
0000e4  6164645f
0000e8  71333120
0000ec  3d202564
0000f0  0d0a00  
0000f3  00                DCB      0
                  |L2.244|
                          DCD      pSrcA2
                  |L2.248|
                          DCD      |symbol_number.53|
                  |L2.252|
                          DCD      pSrcB2
                  |L2.256|
000100  61726d5f          DCB      "arm_add_q15 = %d\r\n",0
000104  6164645f
000108  71313520
00010c  3d202564
000110  0d0a00  
000113  00                DCB      0
                  |L2.276|
                          DCD      pSrcA3
                  |L2.280|
                          DCD      |symbol_number.56|
                  |L2.284|
                          DCD      pSrcB3
                  |L2.288|
000120  61726d5f          DCB      "arm_add_q7 = %d\r\n",0
000124  6164645f
000128  7137203d
00012c  2025640d
000130  0a00    
000132  00                DCB      0
000133  00                DCB      0
                  |L2.308|
000134  2a2a2a2a          DCB      "***********************************\r\n",0
000138  2a2a2a2a
00013c  2a2a2a2a
000140  2a2a2a2a
000144  2a2a2a2a
000148  2a2a2a2a
00014c  2a2a2a2a
000150  2a2a2a2a
000154  2a2a2a0d
000158  0a00    
00015a  00                DCB      0
00015b  00                DCB      0

                          AREA ||i.DSP_DotProduct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_lld
                          REQUIRE _printf_longlong_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSP_DotProduct PROC
;;;289    */
;;;290    static void DSP_DotProduct(void)
000000  b510              PUSH     {r4,lr}
;;;291    {
000002  ed2d8b02          VPUSH    {d8}
;;;292    	static float32_t   pSrcA[5] = {1.0f,1.0f,1.0f,1.0f,1.0f};
;;;293    	static float32_t   pSrcB[5] = {1.0f,1.0f,1.0f,1.0f,1.0f};  
;;;294    	static float32_t   result;  
;;;295    	
;;;296    	static q31_t  pSrcA1[5] = {0x7ffffff0,1,1,1,1};  
;;;297    	static q31_t  pSrcB1[5] = {1,1,1,1,1};  
;;;298    	static q63_t   result1;   
;;;299    
;;;300    	static q15_t  pSrcA2[5] = {1,1,1,1,1};  
;;;301    	static q15_t  pSrcB2[5] = {1,1,1,1,1};  
;;;302    	static q63_t  result2;   
;;;303    
;;;304    	static q7_t  pSrcA3[5] = {1,1,1,1,1}; 
;;;305    	static q7_t  pSrcB3[5] = {1,1,1,1,1};  
;;;306    	static q31_t result3;  
;;;307    
;;;308    	
;;;309    	/*求绝对值*********************************/
;;;310    	pSrcA[0] -= 1.1f;
000006  482b              LDR      r0,|L3.180|
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  eddf0a2a          VLDR     s1,|L3.184|
000010  ee300a60          VSUB.F32 s0,s0,s1
000014  ed800a00          VSTR     s0,[r0,#0]
;;;311    	arm_dot_prod_f32(pSrcA, pSrcB, 5, &result);
000018  4b28              LDR      r3,|L3.188|
00001a  2205              MOVS     r2,#5
00001c  4928              LDR      r1,|L3.192|
00001e  f7fffffe          BL       arm_dot_prod_f32
;;;312    	printf("arm_dot_prod_f32 = %f\r\n", result);
000022  4826              LDR      r0,|L3.188|
000024  6800              LDR      r0,[r0,#0]  ; result
000026  f7fffffe          BL       __aeabi_f2d
00002a  ec410b10          VMOV     d0,r0,r1
00002e  eeb08a40          VMOV.F32 s16,s0
000032  eef08a60          VMOV.F32 s17,s1
000036  ec532b18          VMOV     r2,r3,d8
00003a  a022              ADR      r0,|L3.196|
00003c  f7fffffe          BL       __2printf
;;;313    	
;;;314    	pSrcA1[0] -= 0xffff;
000040  4826              LDR      r0,|L3.220|
000042  6800              LDR      r0,[r0,#0]  ; pSrcA1
000044  f5a0407f          SUB      r0,r0,#0xff00
000048  38ff              SUBS     r0,r0,#0xff
00004a  4924              LDR      r1,|L3.220|
00004c  6008              STR      r0,[r1,#0]  ; pSrcA1
;;;315    	arm_dot_prod_q31(pSrcA1, pSrcB1, 5, &result1);
00004e  4b24              LDR      r3,|L3.224|
000050  2205              MOVS     r2,#5
000052  4924              LDR      r1,|L3.228|
000054  4821              LDR      r0,|L3.220|
000056  f7fffffe          BL       arm_dot_prod_q31
;;;316    	printf("arm_dot_prod_q31 = %lld\r\n", result1);
00005a  4821              LDR      r0,|L3.224|
00005c  c80c              LDM      r0!,{r2,r3}
00005e  a022              ADR      r0,|L3.232|
000060  f7fffffe          BL       __2printf
;;;317    
;;;318    	pSrcA2[0] -= 1;
000064  4827              LDR      r0,|L3.260|
000066  8800              LDRH     r0,[r0,#0]  ; pSrcA2
000068  1e40              SUBS     r0,r0,#1
00006a  b200              SXTH     r0,r0
00006c  4925              LDR      r1,|L3.260|
00006e  8008              STRH     r0,[r1,#0]
;;;319    	arm_dot_prod_q15(pSrcA2, pSrcB2, 5, &result2);
000070  4b25              LDR      r3,|L3.264|
000072  2205              MOVS     r2,#5
000074  4925              LDR      r1,|L3.268|
000076  4823              LDR      r0,|L3.260|
000078  f7fffffe          BL       arm_dot_prod_q15
;;;320    	printf("arm_dot_prod_q15 = %lld\r\n", result2);
00007c  4822              LDR      r0,|L3.264|
00007e  c80c              LDM      r0!,{r2,r3}
000080  a023              ADR      r0,|L3.272|
000082  f7fffffe          BL       __2printf
;;;321    
;;;322    	pSrcA3[0] -= 1;
000086  4829              LDR      r0,|L3.300|
000088  7800              LDRB     r0,[r0,#0]  ; pSrcA3
00008a  1e40              SUBS     r0,r0,#1
00008c  b240              SXTB     r0,r0
00008e  4927              LDR      r1,|L3.300|
000090  7008              STRB     r0,[r1,#0]
;;;323    	arm_dot_prod_q7(pSrcA3, pSrcB3, 5, &result3);
000092  4b27              LDR      r3,|L3.304|
000094  2205              MOVS     r2,#5
000096  4927              LDR      r1,|L3.308|
000098  4824              LDR      r0,|L3.300|
00009a  f7fffffe          BL       arm_dot_prod_q7
;;;324    	printf("arm_dot_prod_q7 = %d\r\n", result3);
00009e  4824              LDR      r0,|L3.304|
0000a0  6801              LDR      r1,[r0,#0]  ; result3
0000a2  a025              ADR      r0,|L3.312|
0000a4  f7fffffe          BL       __2printf
;;;325    	printf("***********************************\r\n");
0000a8  a029              ADR      r0,|L3.336|
0000aa  f7fffffe          BL       __2printf
;;;326    }
0000ae  ecbd8b02          VPOP     {d8}
0000b2  bd10              POP      {r4,pc}
;;;327    
                          ENDP

                  |L3.180|
                          DCD      |symbol_number.57|
                  |L3.184|
0000b8  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
                  |L3.188|
                          DCD      result
                  |L3.192|
                          DCD      |symbol_number.58|
                  |L3.196|
0000c4  61726d5f          DCB      "arm_dot_prod_f32 = %f\r\n",0
0000c8  646f745f
0000cc  70726f64
0000d0  5f663332
0000d4  203d2025
0000d8  660d0a00
                  |L3.220|
                          DCD      |symbol_number.60|
                  |L3.224|
                          DCD      result1
                  |L3.228|
                          DCD      |symbol_number.61|
                  |L3.232|
0000e8  61726d5f          DCB      "arm_dot_prod_q31 = %lld\r\n",0
0000ec  646f745f
0000f0  70726f64
0000f4  5f713331
0000f8  203d2025
0000fc  6c6c640d
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L3.260|
                          DCD      |symbol_number.63|
                  |L3.264|
                          DCD      result2
                  |L3.268|
                          DCD      |symbol_number.64|
                  |L3.272|
000110  61726d5f          DCB      "arm_dot_prod_q15 = %lld\r\n",0
000114  646f745f
000118  70726f64
00011c  5f713135
000120  203d2025
000124  6c6c640d
000128  0a00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L3.300|
                          DCD      |symbol_number.66|
                  |L3.304|
                          DCD      result3
                  |L3.308|
                          DCD      |symbol_number.67|
                  |L3.312|
000138  61726d5f          DCB      "arm_dot_prod_q7 = %d\r\n",0
00013c  646f745f
000140  70726f64
000144  5f713720
000148  3d202564
00014c  0d0a00  
00014f  00                DCB      0
                  |L3.336|
000150  2a2a2a2a          DCB      "***********************************\r\n",0
000154  2a2a2a2a
000158  2a2a2a2a
00015c  2a2a2a2a
000160  2a2a2a2a
000164  2a2a2a2a
000168  2a2a2a2a
00016c  2a2a2a2a
000170  2a2a2a0d
000174  0a00    
000176  00                DCB      0
000177  00                DCB      0

                          AREA ||i.DSP_Multiplication||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSP_Multiplication PROC
;;;335    */
;;;336    static void DSP_Multiplication(void)
000000  b510              PUSH     {r4,lr}
;;;337    {
000002  ed2d8b02          VPUSH    {d8}
;;;338    	static float32_t   pSrcA[5] = {1.0f,1.0f,1.0f,1.0f,1.0f};
;;;339    	static float32_t   pSrcB[5] = {1.0f,1.0f,1.0f,1.0f,1.0f};  
;;;340    	static float32_t   pDst[5];  
;;;341    	
;;;342    	static q31_t  pSrcA1[5] = {1,1,1,1,1};  
;;;343    	static q31_t  pSrcB1[5] = {1,1,1,1,1};  
;;;344    	static q31_t  pDst1[5];   
;;;345    
;;;346    	static q15_t  pSrcA2[5] = {1,1,1,1,1};  
;;;347    	static q15_t  pSrcB2[5] = {1,1,1,1,1};  
;;;348    	static q15_t  pDst2[5];   
;;;349    
;;;350    	static q7_t  pSrcA3[5] = {0x70,1,1,1,1}; 
;;;351    	static q7_t  pSrcB3[5] = {0x7f,1,1,1,1};  
;;;352    	static q7_t pDst3[5];  
;;;353    
;;;354    	
;;;355    	/*求绝对值*********************************/
;;;356    	pSrcA[0] += 1.1f;
000006  482d              LDR      r0,|L4.188|
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  eddf0a2c          VLDR     s1,|L4.192|
000010  ee300a20          VADD.F32 s0,s0,s1
000014  ed800a00          VSTR     s0,[r0,#0]
;;;357    	arm_mult_f32(pSrcA, pSrcB, pDst, 5);
000018  2305              MOVS     r3,#5
00001a  4a2a              LDR      r2,|L4.196|
00001c  492a              LDR      r1,|L4.200|
00001e  f7fffffe          BL       arm_mult_f32
;;;358    	printf("arm_mult_f32 = %f\r\n", pDst[0]);
000022  4828              LDR      r0,|L4.196|
000024  ed900a00          VLDR     s0,[r0,#0]
000028  ee101a10          VMOV     r1,s0
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       __aeabi_f2d
000032  ec410b10          VMOV     d0,r0,r1
000036  eeb08a40          VMOV.F32 s16,s0
00003a  eef08a60          VMOV.F32 s17,s1
00003e  ec532b18          VMOV     r2,r3,d8
000042  a022              ADR      r0,|L4.204|
000044  f7fffffe          BL       __2printf
;;;359    	
;;;360    	pSrcA1[0] += 1;
000048  4825              LDR      r0,|L4.224|
00004a  6800              LDR      r0,[r0,#0]  ; pSrcA1
00004c  1c40              ADDS     r0,r0,#1
00004e  4924              LDR      r1,|L4.224|
000050  6008              STR      r0,[r1,#0]  ; pSrcA1
;;;361    	arm_mult_q31(pSrcA1, pSrcB1, pDst1, 5);
000052  2305              MOVS     r3,#5
000054  4a23              LDR      r2,|L4.228|
000056  4924              LDR      r1,|L4.232|
000058  4821              LDR      r0,|L4.224|
00005a  f7fffffe          BL       arm_mult_q31
;;;362    	printf("arm_mult_q31 = %d\r\n", pDst1[0]);
00005e  4821              LDR      r0,|L4.228|
000060  6801              LDR      r1,[r0,#0]  ; pDst1
000062  a022              ADR      r0,|L4.236|
000064  f7fffffe          BL       __2printf
;;;363    
;;;364    	pSrcA2[0] += 1;
000068  4825              LDR      r0,|L4.256|
00006a  8800              LDRH     r0,[r0,#0]  ; pSrcA2
00006c  1c40              ADDS     r0,r0,#1
00006e  b200              SXTH     r0,r0
000070  4923              LDR      r1,|L4.256|
000072  8008              STRH     r0,[r1,#0]
;;;365    	arm_mult_q15(pSrcA2, pSrcB2, pDst2, 5);
000074  2305              MOVS     r3,#5
000076  4a23              LDR      r2,|L4.260|
000078  4923              LDR      r1,|L4.264|
00007a  4821              LDR      r0,|L4.256|
00007c  f7fffffe          BL       arm_mult_q15
;;;366    	printf("arm_mult_q15 = %d\r\n", pDst2[0]);
000080  4820              LDR      r0,|L4.260|
000082  f9b01000          LDRSH    r1,[r0,#0]  ; pDst2
000086  a021              ADR      r0,|L4.268|
000088  f7fffffe          BL       __2printf
;;;367    
;;;368    	pSrcA3[0] += 1;
00008c  4824              LDR      r0,|L4.288|
00008e  7800              LDRB     r0,[r0,#0]  ; pSrcA3
000090  1c40              ADDS     r0,r0,#1
000092  b240              SXTB     r0,r0
000094  4922              LDR      r1,|L4.288|
000096  7008              STRB     r0,[r1,#0]
;;;369    	arm_mult_q7(pSrcA3, pSrcB3, pDst3, 5);
000098  2305              MOVS     r3,#5
00009a  4a22              LDR      r2,|L4.292|
00009c  4922              LDR      r1,|L4.296|
00009e  4820              LDR      r0,|L4.288|
0000a0  f7fffffe          BL       arm_mult_q7
;;;370    	printf("arm_mult_q7 = %d\r\n", pDst3[0]);
0000a4  481f              LDR      r0,|L4.292|
0000a6  f9901000          LDRSB    r1,[r0,#0]  ; pDst3
0000aa  a020              ADR      r0,|L4.300|
0000ac  f7fffffe          BL       __2printf
;;;371    	printf("***********************************\r\n");
0000b0  a023              ADR      r0,|L4.320|
0000b2  f7fffffe          BL       __2printf
;;;372    }
0000b6  ecbd8b02          VPOP     {d8}
0000ba  bd10              POP      {r4,pc}
;;;373    
                          ENDP

                  |L4.188|
                          DCD      |symbol_number.69|
                  |L4.192|
0000c0  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
                  |L4.196|
                          DCD      pDst
                  |L4.200|
                          DCD      |symbol_number.70|
                  |L4.204|
0000cc  61726d5f          DCB      "arm_mult_f32 = %f\r\n",0
0000d0  6d756c74
0000d4  5f663332
0000d8  203d2025
0000dc  660d0a00
                  |L4.224|
                          DCD      |symbol_number.71|
                  |L4.228|
                          DCD      pDst1
                  |L4.232|
                          DCD      |symbol_number.72|
                  |L4.236|
0000ec  61726d5f          DCB      "arm_mult_q31 = %d\r\n",0
0000f0  6d756c74
0000f4  5f713331
0000f8  203d2025
0000fc  640d0a00
                  |L4.256|
                          DCD      |symbol_number.73|
                  |L4.260|
                          DCD      pDst2
                  |L4.264|
                          DCD      |symbol_number.74|
                  |L4.268|
00010c  61726d5f          DCB      "arm_mult_q15 = %d\r\n",0
000110  6d756c74
000114  5f713135
000118  203d2025
00011c  640d0a00
                  |L4.288|
                          DCD      |symbol_number.75|
                  |L4.292|
                          DCD      |symbol_number.77|
                  |L4.296|
                          DCD      |symbol_number.76|
                  |L4.300|
00012c  61726d5f          DCB      "arm_mult_q7 = %d\r\n",0
000130  6d756c74
000134  5f713720
000138  3d202564
00013c  0d0a00  
00013f  00                DCB      0
                  |L4.320|
000140  2a2a2a2a          DCB      "***********************************\r\n",0
000144  2a2a2a2a
000148  2a2a2a2a
00014c  2a2a2a2a
000150  2a2a2a2a
000154  2a2a2a2a
000158  2a2a2a2a
00015c  2a2a2a2a
000160  2a2a2a0d
000164  0a00    
000166  00                DCB      0
000167  00                DCB      0

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;381    */
;;;382    static void PrintfLogo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;383    {
;;;384    	/* 检测CPU ID */
;;;385    	{
;;;386    		/* 参考手册：
;;;387    			32.6.1 MCU device ID code
;;;388    			33.1 Unique device ID register (96 bits)
;;;389    		*/
;;;390    		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;
;;;391    
;;;392    		CPU_Sn0 = *(__IO uint32_t*)(0x1FFF7A10);
000002  481d              LDR      r0,|L5.120|
000004  6804              LDR      r4,[r0,#0]
;;;393    		CPU_Sn1 = *(__IO uint32_t*)(0x1FFF7A10 + 4);
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;394    		CPU_Sn2 = *(__IO uint32_t*)(0x1FFF7A10 + 8);
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;395    
;;;396    		printf("\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X\n\r"
00000e  4623              MOV      r3,r4
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  a019              ADR      r0,|L5.124|
000016  f7fffffe          BL       __2printf
;;;397    			, CPU_Sn2, CPU_Sn1, CPU_Sn0);
;;;398    	}
;;;399    
;;;400    	printf("\n\r");
00001a  a025              ADR      r0,|L5.176|
00001c  f7fffffe          BL       __2printf
;;;401    	printf("*************************************************************\n\r");
000020  a024              ADR      r0,|L5.180|
000022  f7fffffe          BL       __2printf
;;;402    	printf("* 例程名称   : %s\r\n", EXAMPLE_NAME);	/* 打印例程名称 */
000026  a133              ADR      r1,|L5.244|
000028  a03c              ADR      r0,|L5.284|
00002a  f7fffffe          BL       __2printf
;;;403    	printf("* 例程版本   : %s\r\n", DEMO_VER);		/* 打印例程版本 */
00002e  a140              ADR      r1,|L5.304|
000030  a040              ADR      r0,|L5.308|
000032  f7fffffe          BL       __2printf
;;;404    	printf("* 发布日期   : %s\r\n", EXAMPLE_DATE);	/* 打印例程日期 */
000036  a144              ADR      r1,|L5.328|
000038  a046              ADR      r0,|L5.340|
00003a  f7fffffe          BL       __2printf
;;;405    
;;;406    	/* 打印ST固件库版本，这3个定义宏在stm32f10x.h文件中 */
;;;407    	printf("* 固件库版本 : V%d.%d.%d (STM32F4xx_StdPeriph_Driver)\r\n", __STM32F4XX_STDPERIPH_VERSION_MAIN,
00003e  2300              MOVS     r3,#0
000040  2205              MOVS     r2,#5
000042  2101              MOVS     r1,#1
000044  a048              ADR      r0,|L5.360|
000046  f7fffffe          BL       __2printf
;;;408    			__STM32F4XX_STDPERIPH_VERSION_SUB1,__STM32F4XX_STDPERIPH_VERSION_SUB2);
;;;409    	printf("* \r\n");	/* 打印一行空格 */
00004a  a055              ADR      r0,|L5.416|
00004c  f7fffffe          BL       __2printf
;;;410    	printf("* QQ    : 1295744630 \r\n");
000050  a055              ADR      r0,|L5.424|
000052  f7fffffe          BL       __2printf
;;;411    	printf("* 旺旺  : armfly\r\n");
000056  a05a              ADR      r0,|L5.448|
000058  f7fffffe          BL       __2printf
;;;412    	printf("* Email : armfly@qq.com \r\n");
00005c  a05d              ADR      r0,|L5.468|
00005e  f7fffffe          BL       __2printf
;;;413    	printf("* 淘宝店: armfly.taobao.com\r\n");
000062  a063              ADR      r0,|L5.496|
000064  f7fffffe          BL       __2printf
;;;414    	printf("* Copyright www.armfly.com 安富莱电子\r\n");
000068  a069              ADR      r0,|L5.528|
00006a  f7fffffe          BL       __2printf
;;;415    	printf("*************************************************************\n\r");
00006e  a011              ADR      r0,|L5.180|
000070  f7fffffe          BL       __2printf
;;;416    }
000074  bd70              POP      {r4-r6,pc}
;;;417    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
                          DCD      0x1fff7a10
                  |L5.124|
00007c  0d0a4350          DCB      "\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X"
000080  55203a20
000084  53544d33
000088  32463430
00008c  37494754
000090  362c204c
000094  51465031
000098  37362c20
00009c  55494420
0000a0  3d202530
0000a4  38582025
0000a8  30385820
0000ac  25303858
                  |L5.176|
0000b0  0a0d00            DCB      "\n\r",0
0000b3  00                DCB      0
                  |L5.180|
0000b4  2a2a2a2a          DCB      "*******************************************************"
0000b8  2a2a2a2a
0000bc  2a2a2a2a
0000c0  2a2a2a2a
0000c4  2a2a2a2a
0000c8  2a2a2a2a
0000cc  2a2a2a2a
0000d0  2a2a2a2a
0000d4  2a2a2a2a
0000d8  2a2a2a2a
0000dc  2a2a2a2a
0000e0  2a2a2a2a
0000e4  2a2a2a2a
0000e8  2a2a2a  
0000eb  2a2a2a2a          DCB      "******\n\r",0
0000ef  2a2a0a0d
0000f3  00      
                  |L5.244|
0000f4  56352d39          DCB      "V5-908_BasicMathFunctions",181,196,202,185,211,195,163,168
0000f8  30385f42
0000fc  61736963
000100  4d617468
000104  46756e63
000108  74696f6e
00010c  73b5c4ca
000110  b9d3c3a3
000114  a8      
000115  d2bba3a9          DCB      210,187,163,169,0
000119  00      
00011a  00                DCB      0
00011b  00                DCB      0
                  |L5.284|
00011c  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
000120  b3ccc3fb
000124  b3c62020
000128  203a2025
00012c  730d0a00
                  |L5.304|
000130  322e3000          DCB      "2.0",0
                  |L5.308|
000134  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
000138  b3ccb0e6
00013c  b1be2020
000140  203a2025
000144  730d0a00
                  |L5.328|
000148  32303135          DCB      "2015-04-24",0
00014c  2d30342d
000150  323400  
000153  00                DCB      0
                  |L5.340|
000154  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
000158  b2bcc8d5
00015c  c6da2020
000160  203a2025
000164  730d0a00
                  |L5.360|
000168  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
00016c  bcfebfe2
000170  b0e6b1be
000174  203a2056
000178  25642e25
00017c  642e    
00017e  25642028          DCB      "%d (STM32F4xx_StdPeriph_Driver)\r\n",0
000182  53544d33
000186  32463478
00018a  785f5374
00018e  64506572
000192  6970685f
000196  44726976
00019a  6572290d
00019e  0a00    
                  |L5.416|
0001a0  2a200d0a          DCB      "* \r\n",0
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L5.424|
0001a8  2a205151          DCB      "* QQ    : 1295744630 \r\n",0
0001ac  20202020
0001b0  3a203132
0001b4  39353734
0001b8  34363330
0001bc  200d0a00
                  |L5.448|
0001c0  2a20cdfa          DCB      "* ",205,250,205,250,"  : armfly\r\n",0
0001c4  cdfa2020
0001c8  3a206172
0001cc  6d666c79
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L5.468|
0001d4  2a20456d          DCB      "* Email : armfly@qq.com \r\n",0
0001d8  61696c20
0001dc  3a206172
0001e0  6d666c79
0001e4  4071712e
0001e8  636f6d20
0001ec  0d0a00  
0001ef  00                DCB      0
                  |L5.496|
0001f0  2a20ccd4          DCB      "* ",204,212,177,166,181,234,": armfly.taobao.com\r\n",0
0001f4  b1a6b5ea
0001f8  3a206172
0001fc  6d666c79
000200  2e74616f
000204  62616f2e
000208  636f6d0d
00020c  0a00    
00020e  00                DCB      0
00020f  00                DCB      0
                  |L5.528|
000210  2a20436f          DCB      "* Copyright www.armfly.com ",176,178,184,187,192,179,181
000214  70797269
000218  67687420
00021c  7777772e
000220  61726d66
000224  6c792e63
000228  6f6d20b0
00022c  b2b8bbc0
000230  b3b5    
000232  e7d7d30d          DCB      231,215,211,"\r\n",0
000236  0a00    

                          AREA ||i.arm_iir_f32_bp||, CODE, READONLY, ALIGN=2

                  arm_iir_f32_bp PROC
;;;74     */
;;;75     static void arm_iir_f32_bp(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
000002  ed2d8b02          VPUSH    {d8}
;;;77     	static uint8_t u8Flag = 0;
;;;78     	uint32_t i;
;;;79     	static arm_biquad_casd_df1_inst_f32 S;
;;;80     	float32_t ScaleValue;
;;;81     
;;;82     	if( u8Flag == 0 )
000006  4818              LDR      r0,|L6.104|
000008  7800              LDRB     r0,[r0,#0]  ; u8Flag
00000a  b940              CBNZ     r0,|L6.30|
;;;83     	{
;;;84     			u8Flag = 1;
00000c  2001              MOVS     r0,#1
00000e  4916              LDR      r1,|L6.104|
000010  7008              STRB     r0,[r1,#0]
;;;85     			/* 初始化 */
;;;86     			arm_biquad_cascade_df1_init_f32(&S, numStages, (float32_t *)&IIRCoeffs32BP[0], (float32_t *)&IIRStateF32[0]);
000012  4b16              LDR      r3,|L6.108|
000014  4a16              LDR      r2,|L6.112|
000016  2108              MOVS     r1,#8
000018  4816              LDR      r0,|L6.116|
00001a  f7fffffe          BL       arm_biquad_cascade_df1_init_f32
                  |L6.30|
;;;87     	}
;;;88     	
;;;89     	/* IIR滤波 */
;;;90      	arm_biquad_cascade_df1_f32(&S, testInput_f32_50Hz_200Hz, testOutput, TEST_LENGTH_SAMPLES);
00001e  23c8              MOVS     r3,#0xc8
000020  4a15              LDR      r2,|L6.120|
000022  4916              LDR      r1,|L6.124|
000024  4813              LDR      r0,|L6.116|
000026  f7fffffe          BL       arm_biquad_cascade_df1_f32
;;;91     	    
;;;92     	/*放缩系数 */    
;;;93     	ScaleValue = 	0.034907330466672125*
00002a  ed9f8a15          VLDR     s16,|L6.128|
;;;94     								0.034907330466672125*                                        
;;;95     								0.034479329045770668*                                        
;;;96     								0.034479329045770668*                                        
;;;97     								0.034162181085070645*                                        
;;;98     								0.034162181085070645*                                        
;;;99     								0.03399415063903985*                                         
;;;100    								0.03399415063903985;  
;;;101    	
;;;102    	__disable_irq();
00002e  b672              CPSID    i
;;;103    	/* 打印滤波后结果 */
;;;104    	for(i=0; i<TEST_LENGTH_SAMPLES; i++)
000030  2400              MOVS     r4,#0
000032  e013              B        |L6.92|
                  |L6.52|
;;;105    	{
;;;106    //		printf("%f\r\n", testOutput[i]*ScaleValue);
;;;107    			u16Probe1 = testOutput[i]*ScaleValue * 10000.0f + 20000.0f;
000034  4810              LDR      r0,|L6.120|
000036  eb000084          ADD      r0,r0,r4,LSL #2
00003a  ed900a00          VLDR     s0,[r0,#0]
00003e  ee600a08          VMUL.F32 s1,s0,s16
000042  ed9f1a10          VLDR     s2,|L6.132|
000046  ed9f0a10          VLDR     s0,|L6.136|
00004a  ee000a81          VMLA.F32 s0,s1,s2
00004e  eebc0ac0          VCVT.U32.F32 s0,s0
000052  ee100a10          VMOV     r0,s0
000056  490d              LDR      r1,|L6.140|
000058  8008              STRH     r0,[r1,#0]
00005a  1c64              ADDS     r4,r4,#1              ;104
                  |L6.92|
00005c  2cc8              CMP      r4,#0xc8              ;104
00005e  d3e9              BCC      |L6.52|
;;;108    	}
;;;109    	__enable_irq();
000060  b662              CPSIE    i
;;;110    }
000062  ecbd8b02          VPOP     {d8}
000066  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  |L6.104|
                          DCD      u8Flag
                  |L6.108|
                          DCD      IIRStateF32
                  |L6.112|
                          DCD      IIRCoeffs32BP
                  |L6.116|
                          DCD      S
                  |L6.120|
                          DCD      testOutput
                  |L6.124|
                          DCD      testInput_f32_50Hz_200Hz
                  |L6.128|
000080  2c097a21          DCFS     0x2c097a21 ; 1.9536666121672264e-12
                  |L6.132|
000084  461c4000          DCFS     0x461c4000 ; 10000
                  |L6.136|
000088  469c4000          DCFS     0x469c4000 ; 20000
                  |L6.140|
                          DCD      u16Probe1

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;122    */
;;;123    int main(void)
000000  ed2d8b02          VPUSH    {d8}
;;;124    {
;;;125    	uint8_t ucKeyCode;		/* 按键代码 */
;;;126    	static uint32_t si = 0,su32Pointer = 0;
;;;127    
;;;128    
;;;129    	bsp_Init();		/* 硬件初始化 */
000004  f7fffffe          BL       bsp_Init
;;;130    	PrintfLogo();	/* 打印例程信息到串口1 */
000008  f7fffffe          BL       PrintfLogo
;;;131    
;;;132    	bsp_StartAutoTimer(0, 500);	/* 启动1个500ms的自动重装的定时器 */
00000c  f44f71fa          MOV      r1,#0x1f4
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       bsp_StartAutoTimer
;;;133    
;;;134    	DualTimer_Init();
000016  f7fffffe          BL       DualTimer_Init
;;;135    	
;;;136    	/* 进入主程序循环体 */
;;;137    	while (1)
00001a  e082              B        |L7.290|
                  |L7.28|
;;;138    	{
;;;139    		//	for(i=0; i<TEST_LENGTH_SAMPLES; i++)
;;;140    		{
;;;141    			/* 50Hz正弦波+200Hz正弦波，采样率1KHz */
;;;142    			testInput_f32_50Hz_200Hz[si] = arm_sin_f32(2*3.1415926f*1*su32Pointer++/600) + 1.0f*arm_sin_f32(2*3.1415926f*200*su32Pointer++/600)+0.0f;
00001c  4841              LDR      r0,|L7.292|
00001e  ed900a00          VLDR     s0,[r0,#0]
000022  6800              LDR      r0,[r0,#0]  ; su32Pointer
000024  1c40              ADDS     r0,r0,#1
000026  493f              LDR      r1,|L7.292|
000028  eeb80a40          VCVT.F32.U32 s0,s0
00002c  eddf0a3e          VLDR     s1,|L7.296|
000030  ee200a20          VMUL.F32 s0,s0,s1
000034  eddf0a3d          VLDR     s1,|L7.300|
000038  ee801a20          VDIV.F32 s2,s0,s1
00003c  eeb08a41          VMOV.F32 s16,s2
000040  eeb00a48          VMOV.F32 s0,s16
000044  6008              STR      r0,[r1,#0]  ; su32Pointer
000046  f7fffffe          BL       arm_sin_f32
00004a  eef08a40          VMOV.F32 s17,s0
00004e  4835              LDR      r0,|L7.292|
000050  ed900a00          VLDR     s0,[r0,#0]
000054  6800              LDR      r0,[r0,#0]  ; su32Pointer
000056  1c40              ADDS     r0,r0,#1
000058  4932              LDR      r1,|L7.292|
00005a  eeb80a40          VCVT.F32.U32 s0,s0
00005e  eddf0a34          VLDR     s1,|L7.304|
000062  ee200a20          VMUL.F32 s0,s0,s1
000066  eddf0a31          VLDR     s1,|L7.300|
00006a  ee801a20          VDIV.F32 s2,s0,s1
00006e  eeb08a41          VMOV.F32 s16,s2
000072  eeb00a48          VMOV.F32 s0,s16
000076  6008              STR      r0,[r1,#0]  ; su32Pointer
000078  f7fffffe          BL       arm_sin_f32
00007c  eef70a00          VMOV.F32 s1,#1.00000000
000080  ee408a80          VMLA.F32 s17,s1,s0
000084  ed9f0a2b          VLDR     s0,|L7.308|
000088  ee380a80          VADD.F32 s0,s17,s0
00008c  482a              LDR      r0,|L7.312|
00008e  492b              LDR      r1,|L7.316|
000090  6809              LDR      r1,[r1,#0]  ; si
000092  eb000081          ADD      r0,r0,r1,LSL #2
000096  ed800a00          VSTR     s0,[r0,#0]
;;;143    			u16Probe = testInput_f32_50Hz_200Hz[si] * 10000.0f + 20000.0f;
00009a  4827              LDR      r0,|L7.312|
00009c  4927              LDR      r1,|L7.316|
00009e  6809              LDR      r1,[r1,#0]  ; si
0000a0  eb000081          ADD      r0,r0,r1,LSL #2
0000a4  edd00a00          VLDR     s1,[r0,#0]
0000a8  ed9f1a25          VLDR     s2,|L7.320|
0000ac  ed9f0a25          VLDR     s0,|L7.324|
0000b0  ee000a81          VMLA.F32 s0,s1,s2
0000b4  eebc0ac0          VCVT.U32.F32 s0,s0
0000b8  ee100a10          VMOV     r0,s0
0000bc  4922              LDR      r1,|L7.328|
0000be  8008              STRH     r0,[r1,#0]
;;;144    	//		delay_ms(5);
;;;145    		}
;;;146    
;;;147    		si++;
0000c0  481e              LDR      r0,|L7.316|
0000c2  6800              LDR      r0,[r0,#0]  ; si
0000c4  1c40              ADDS     r0,r0,#1
0000c6  491d              LDR      r1,|L7.316|
0000c8  6008              STR      r0,[r1,#0]  ; si
;;;148    		
;;;149    		if(si > TEST_LENGTH_SAMPLES )
0000ca  4608              MOV      r0,r1
0000cc  6800              LDR      r0,[r0,#0]  ; si
0000ce  28c8              CMP      r0,#0xc8
0000d0  d903              BLS      |L7.218|
;;;150    		{
;;;151    				si = 0;
0000d2  2000              MOVS     r0,#0
0000d4  6008              STR      r0,[r1,#0]  ; si
;;;152    				arm_iir_f32_bp();
0000d6  f7fffffe          BL       arm_iir_f32_bp
                  |L7.218|
;;;153    		}
;;;154    		
;;;155    		bsp_Idle();		/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */
0000da  f7fffffe          BL       bsp_Idle
;;;156    
;;;157    		if (bsp_CheckTimer(0))	/* 判断定时器超时时间 */
0000de  2000              MOVS     r0,#0
0000e0  f7fffffe          BL       bsp_CheckTimer
0000e4  b110              CBZ      r0,|L7.236|
;;;158    		{
;;;159    			/* 每隔500ms 进来一次 */
;;;160    			bsp_LedToggle(4);	/* 翻转LED4的状态 */
0000e6  2004              MOVS     r0,#4
0000e8  f7fffffe          BL       bsp_LedToggle
                  |L7.236|
;;;161    		}
;;;162    
;;;163    		/* 按键滤波和检测由后台systick中断服务程序实现，我们只需要调用bsp_GetKey读取键值即可。 */
;;;164    		ucKeyCode = bsp_GetKey();	/* 读取键值, 无键按下时返回 KEY_NONE = 0 */
0000ec  f7fffffe          BL       bsp_GetKey
0000f0  4604              MOV      r4,r0
;;;165    		if (ucKeyCode != KEY_NONE)
0000f2  b1b4              CBZ      r4,|L7.290|
;;;166    		{
;;;167    			switch (ucKeyCode)
0000f4  2c01              CMP      r4,#1
0000f6  d006              BEQ      |L7.262|
0000f8  2c04              CMP      r4,#4
0000fa  d007              BEQ      |L7.268|
0000fc  2c07              CMP      r4,#7
0000fe  d008              BEQ      |L7.274|
000100  2c0a              CMP      r4,#0xa
000102  d10c              BNE      |L7.286|
000104  e008              B        |L7.280|
                  |L7.262|
;;;168    			{
;;;169    				case KEY_DOWN_K1:			/* K1键按下 */
;;;170    					DSP_ABS();
000106  f7fffffe          BL       DSP_ABS
;;;171    					break;
00010a  e009              B        |L7.288|
                  |L7.268|
;;;172    					
;;;173    				case KEY_DOWN_K2:				/* K1键弹起 */
;;;174    					DSP_Add();
00010c  f7fffffe          BL       DSP_Add
;;;175    					break;
000110  e006              B        |L7.288|
                  |L7.274|
;;;176    
;;;177    				case KEY_DOWN_K3:				/* K2键弹起 */
;;;178    					DSP_DotProduct();
000112  f7fffffe          BL       DSP_DotProduct
;;;179    					break;
000116  e003              B        |L7.288|
                  |L7.280|
;;;180    				
;;;181    				case JOY_DOWN_U:
;;;182    					DSP_Multiplication();
000118  f7fffffe          BL       DSP_Multiplication
;;;183    					break;
00011c  e000              B        |L7.288|
                  |L7.286|
;;;184    				
;;;185    				default:
;;;186    					/* 其它的键值不处理 */
;;;187    					break;
00011e  bf00              NOP      
                  |L7.288|
000120  bf00              NOP                            ;171
                  |L7.290|
000122  e77b              B        |L7.28|
;;;188    			}
;;;189    		}
;;;190    	}
;;;191    }
;;;192    
                          ENDP

                  |L7.292|
                          DCD      su32Pointer
                  |L7.296|
000128  40c90fda          DCFS     0x40c90fda ; 6.2831850051879883
                  |L7.300|
00012c  44160000          DCFS     0x44160000 ; 600
                  |L7.304|
000130  449d1462          DCFS     0x449d1462 ; 1256.636962890625
                  |L7.308|
000134  00000000          DCFS     0x00000000 ; 0
                  |L7.312|
                          DCD      testInput_f32_50Hz_200Hz
                  |L7.316|
                          DCD      ||si||
                  |L7.320|
000140  461c4000          DCFS     0x461c4000 ; 10000
                  |L7.324|
000144  469c4000          DCFS     0x469c4000 ; 20000
                  |L7.328|
                          DCD      u16Probe

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  S
                          %        12
                  pDst
                          %        20
                  pDst1
                          %        20
                  pDst2
                          %        12
                  testInput_f32_50Hz_200Hz
                          %        800
                  testOutput
                          %        800
                  IIRStateF32
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  IIRCoeffs32BP
000000  3f800000          DCFS     0x3f800000 ; 1
000004  00000000          DCFS     0x00000000 ; 0
000008  bf800000          DCFS     0xbf800000 ; -1
00000c  3ffbf2ea          DCFS     0x3ffbf2ea ; 1.9683506488800049
000010  bf792eb7          DCFS     0xbf792eb7 ; -0.9733690619468689
000014  3f800000          DCFS     0x3f800000 ; 1
000018  00000000          DCFS     0x00000000 ; 0
00001c  bf800000          DCFS     0xbf800000 ; -1
000020  3ffff23b          DCFS     0x3ffff23b ; 1.9995797872543335
000024  bf7fe48a          DCFS     0xbf7fe48a ; -0.999580979347229
000028  3f800000          DCFS     0x3f800000 ; 1
00002c  00000000          DCFS     0x00000000 ; 0
000030  bf800000          DCFS     0xbf800000 ; -1
000034  3fffd83e          DCFS     0x3fffd83e ; 1.9987866878509521
000038  bf7fb090          DCFS     0xbf7fb090 ; -0.99878787994384766
00003c  3f800000          DCFS     0x3f800000 ; 1
000040  00000000          DCFS     0x00000000 ; 0
000044  bf800000          DCFS     0xbf800000 ; -1
000048  3ff5e938          DCFS     0x3ff5e938 ; 1.9211797714233398
00004c  bf6d0e44          DCFS     0xbf6d0e44 ; -0.92599892616271973
000050  3f800000          DCFS     0x3f800000 ; 1
000054  00000000          DCFS     0x00000000 ; 0
000058  bf800000          DCFS     0xbf800000 ; -1
00005c  3fffc317          DCFS     0x3fffc317 ; 1.9981411695480347
000060  bf7f8644          DCFS     0xbf7f8644 ; -0.99814248085021973
000064  3f800000          DCFS     0x3f800000 ; 1
000068  00000000          DCFS     0x00000000 ; 0
00006c  bf800000          DCFS     0xbf800000 ; -1
000070  3ff17e43          DCFS     0x3ff17e43 ; 1.8866657018661499
000074  bf642b32          DCFS     0xbf642b32 ; -0.89128410816192627
000078  3f800000          DCFS     0x3f800000 ; 1
00007c  00000000          DCFS     0x00000000 ; 0
000080  bf800000          DCFS     0xbf800000 ; -1
000084  3fffb6dd          DCFS     0x3fffb6dd ; 1.9977680444717407
000088  bf7f6dcf          DCFS     0xbf7f6dcf ; -0.99776929616928101
00008c  3f800000          DCFS     0x3f800000 ; 1
000090  00000000          DCFS     0x00000000 ; 0
000094  bf800000          DCFS     0xbf800000 ; -1
000098  3fef2c66          DCFS     0x3fef2c66 ; 1.8685424327850342
00009c  bf5f7f17          DCFS     0xbf5f7f17 ; -0.87303298711776733

                          AREA ||.data||, DATA, ALIGN=3

                  u8Flag
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||si||
                          DCD      0x00000000
                  su32Pointer
                          DCD      0x00000000
                  pSrc
                          DCD      0x00000000
                  |symbol_number.38|
                          DCD      0x00000000
                  pSrc1
                          DCD      0x00000000
                  |symbol_number.40|
                          DCD      0x00000000
                  pSrc2
00001c  0000              DCB      0x00,0x00
                  |symbol_number.42|
00001e  0000              DCB      0x00,0x00
                  pSrc3
000020  7f                DCB      0x7f
                  pDst3
000021  000000            DCB      0x00,0x00,0x00
                  pSrcA
                          DCD      0x00000000
                  pSrcB
                          DCD      0x00000000
                  |symbol_number.47|
                          DCD      0x00000000
                  pSrcA1
                          DCD      0x00000000
                  pSrcB1
                          DCD      0x00000000
                  |symbol_number.50|
                          DCD      0x00000000
                  pSrcA2
00003c  0000              DCB      0x00,0x00
                  pSrcB2
00003e  0000              DCB      0x00,0x00
                  |symbol_number.53|
000040  0000              DCB      0x00,0x00
                  pSrcA3
000042  00                DCB      0x00
                  pSrcB3
000043  00                DCB      0x00
                  |symbol_number.56|
000044  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.57|
000048  3f800000          DCFS     0x3f800000 ; 1
00004c  3f800000          DCFS     0x3f800000 ; 1
000050  3f800000          DCFS     0x3f800000 ; 1
000054  3f800000          DCFS     0x3f800000 ; 1
000058  3f800000          DCFS     0x3f800000 ; 1
                  |symbol_number.58|
00005c  3f800000          DCFS     0x3f800000 ; 1
000060  3f800000          DCFS     0x3f800000 ; 1
000064  3f800000          DCFS     0x3f800000 ; 1
000068  3f800000          DCFS     0x3f800000 ; 1
00006c  3f800000          DCFS     0x3f800000 ; 1
                  result
                          DCD      0x00000000
                  |symbol_number.60|
                          DCD      0x7ffffff0
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                  |symbol_number.61|
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000000
                  result1
                          %        8
                  |symbol_number.63|
0000a8  00010001          DCW      0x0001,0x0001
0000ac  00010001          DCW      0x0001,0x0001
0000b0  0001              DCW      0x0001
                  |symbol_number.64|
0000b2  0001              DCW      0x0001
0000b4  00010001          DCW      0x0001,0x0001
0000b8  00010001          DCW      0x0001,0x0001
                          DCD      0x00000000
                  result2
                          %        8
                  |symbol_number.66|
0000c8  01010101          DCB      0x01,0x01,0x01,0x01
0000cc  01                DCB      0x01
                  |symbol_number.67|
0000cd  010101            DCB      0x01,0x01,0x01
0000d0  01010000          DCB      0x01,0x01,0x00,0x00
                  result3
                          DCD      0x00000000
                  |symbol_number.69|
0000d8  3f800000          DCFS     0x3f800000 ; 1
0000dc  3f800000          DCFS     0x3f800000 ; 1
0000e0  3f800000          DCFS     0x3f800000 ; 1
0000e4  3f800000          DCFS     0x3f800000 ; 1
0000e8  3f800000          DCFS     0x3f800000 ; 1
                  |symbol_number.70|
0000ec  3f800000          DCFS     0x3f800000 ; 1
0000f0  3f800000          DCFS     0x3f800000 ; 1
0000f4  3f800000          DCFS     0x3f800000 ; 1
0000f8  3f800000          DCFS     0x3f800000 ; 1
0000fc  3f800000          DCFS     0x3f800000 ; 1
                  |symbol_number.71|
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                  |symbol_number.72|
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                  |symbol_number.73|
000128  00010001          DCW      0x0001,0x0001
00012c  00010001          DCW      0x0001,0x0001
000130  0001              DCW      0x0001
                  |symbol_number.74|
000132  0001              DCW      0x0001
000134  00010001          DCW      0x0001,0x0001
000138  00010001          DCW      0x0001,0x0001
                  |symbol_number.75|
00013c  70010101          DCB      0x70,0x01,0x01,0x01
000140  01                DCB      0x01
                  |symbol_number.76|
000141  7f0101            DCB      0x7f,0x01,0x01
000144  0101              DCB      0x01,0x01
                  |symbol_number.77|
000146  0000              DCB      0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
                  u16Probe
00014c  0000              DCB      0x00,0x00
                  u16Probe1
00014e  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_32c47d09____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_32c47d09____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_32c47d09____REVSH|
#line 144
|__asm___6_main_c_32c47d09____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_32c47d09____RRX|
#line 300
|__asm___6_main_c_32c47d09____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
