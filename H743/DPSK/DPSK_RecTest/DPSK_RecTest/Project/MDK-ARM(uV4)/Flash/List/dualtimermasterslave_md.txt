; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\dualtimermasterslave_md.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\dualtimermasterslave_md.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\Flash\Obj\dualtimermasterslave_md.crf ..\..\User\MiddleWareDrv\DualTimerMasterSlave_MD.c]
                          THUMB

                          AREA ||i.DualTimer_Init||, CODE, READONLY, ALIGN=2

                  DualTimer_Init PROC
;;;5      
;;;6      void DualTimer_Init(void)
000000  b500              PUSH     {lr}
;;;7      {
000002  b08b              SUB      sp,sp,#0x2c
;;;8        NVIC_InitTypeDef NVIC_InitStructure;
;;;9        TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;10     	TIM_OCInitTypeDef         TIM_OCInitStructure;	
;;;11       GPIO_InitTypeDef GPIO_InitStructure;
;;;12     	
;;;13     //   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);//使能GPIOC和AFIO端口功能
;;;14     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;15     	
;;;16     	// 如果是Stm32f103
;;;17     	// 定时器2 PWM频率为72000000/72/10=100Khz
;;;18     	// 定时器1 PWM频率为72000000/72/(10*ADCNUM*2)
;;;19     	// 如果是Stm32f407
;;;20     	// TIMCLK = 2 * PCLK1  
;;;21       // PCLK1 = HCLK / 4 => TIMCLK = HCLK / 2 = SystemCoreClock /2
;;;22     	// =>168000000/2 = 84000000
;;;23     	// 定时器2 PWM频率为84000000/TIM_Prescaler/10=100Khz
;;;24     	// 定时器1 PWM频率为72000000/72/(10*ADCNUM*2)
;;;25     	
;;;26     	//初始化定时器 TIM1
;;;27     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;28       /* TIM1 configuration ------------------------------------------------------*/ 
;;;29       /* Time Base configuration */
;;;30       TIM_TimeBaseStructInit(&TIM_TimeBaseStructure); 
000014  a808              ADD      r0,sp,#0x20
000016  f7fffffe          BL       TIM_TimeBaseStructInit
;;;31       TIM_TimeBaseStructure.TIM_Period = 10*(ADCNUM)*4 - 1;          
00001a  f240103f          MOV      r0,#0x13f
00001e  9009              STR      r0,[sp,#0x24]
;;;32       TIM_TimeBaseStructure.TIM_Prescaler = 84;       
000020  2054              MOVS     r0,#0x54
000022  f8ad0020          STRH     r0,[sp,#0x20]
;;;33       TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
000026  2000              MOVS     r0,#0
000028  f8ad0028          STRH     r0,[sp,#0x28]
;;;34       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
00002c  f8ad0022          STRH     r0,[sp,#0x22]
;;;35       TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
000030  a908              ADD      r1,sp,#0x20
000032  4840              LDR      r0,|L1.308|
000034  f7fffffe          BL       TIM_TimeBaseInit
;;;36       /* TIM1 channel2 configuration in PWM mode */
;;;37       TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 
000038  2060              MOVS     r0,#0x60
00003a  f8ad000c          STRH     r0,[sp,#0xc]
;;;38       TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;                
00003e  2001              MOVS     r0,#1
000040  f8ad000e          STRH     r0,[sp,#0xe]
;;;39       TIM_OCInitStructure.TIM_Pulse = 10*2*(ADCNUM) - 1;//9*(ADCNUM+2)*2/2; 
000044  209f              MOVS     r0,#0x9f
000046  9005              STR      r0,[sp,#0x14]
;;;40       TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;         
000048  2002              MOVS     r0,#2
00004a  f8ad0018          STRH     r0,[sp,#0x18]
;;;41       TIM_OC2Init(TIM1, &TIM_OCInitStructure);
00004e  a903              ADD      r1,sp,#0xc
000050  4838              LDR      r0,|L1.308|
000052  f7fffffe          BL       TIM_OC2Init
;;;42     
;;;43     	/* Master Mode selection */
;;;44       TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_OC2Ref);
000056  2150              MOVS     r1,#0x50
000058  4836              LDR      r0,|L1.308|
00005a  f7fffffe          BL       TIM_SelectOutputTrigger
;;;45     
;;;46       /* Select the Master Slave Mode */
;;;47       TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
00005e  2180              MOVS     r1,#0x80
000060  4834              LDR      r0,|L1.308|
000062  f7fffffe          BL       TIM_SelectMasterSlaveMode
;;;48     	
;;;49     	
;;;50     	//初始化定时器 TIM2
;;;51     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000066  2101              MOVS     r1,#1
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;52       /* TIM2 configuration ------------------------------------------------------*/ 
;;;53       /* Time Base configuration */
;;;54       TIM_TimeBaseStructInit(&TIM_TimeBaseStructure); 
00006e  a808              ADD      r0,sp,#0x20
000070  f7fffffe          BL       TIM_TimeBaseStructInit
;;;55       TIM_TimeBaseStructure.TIM_Period = 9;          
000074  2009              MOVS     r0,#9
000076  9009              STR      r0,[sp,#0x24]
;;;56       TIM_TimeBaseStructure.TIM_Prescaler = 84;       
000078  2054              MOVS     r0,#0x54
00007a  f8ad0020          STRH     r0,[sp,#0x20]
;;;57       TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
00007e  2000              MOVS     r0,#0
000080  f8ad0028          STRH     r0,[sp,#0x28]
;;;58       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
000084  f8ad0022          STRH     r0,[sp,#0x22]
;;;59       TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
000088  a908              ADD      r1,sp,#0x20
00008a  f04f4080          MOV      r0,#0x40000000
00008e  f7fffffe          BL       TIM_TimeBaseInit
;;;60       /* TIM2 channel2 configuration in PWM mode */
;;;61       TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 
000092  2060              MOVS     r0,#0x60
000094  f8ad000c          STRH     r0,[sp,#0xc]
;;;62       TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;                
000098  2001              MOVS     r0,#1
00009a  f8ad000e          STRH     r0,[sp,#0xe]
;;;63       TIM_OCInitStructure.TIM_Pulse = (9+1)/2; 
00009e  2005              MOVS     r0,#5
0000a0  9005              STR      r0,[sp,#0x14]
;;;64       TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;         
0000a2  2000              MOVS     r0,#0
0000a4  f8ad0018          STRH     r0,[sp,#0x18]
;;;65       TIM_OC2Init(TIM2, &TIM_OCInitStructure);
0000a8  a903              ADD      r1,sp,#0xc
0000aa  f04f4080          MOV      r0,#0x40000000
0000ae  f7fffffe          BL       TIM_OC2Init
;;;66     
;;;67     	TIM_SelectInputTrigger(TIM2,TIM_TS_ITR0);
0000b2  2100              MOVS     r1,#0
0000b4  f04f4080          MOV      r0,#0x40000000
0000b8  f7fffffe          BL       TIM_SelectInputTrigger
;;;68     	
;;;69     	TIM_SelectSlaveMode(TIM2, TIM_SlaveMode_Gated);
0000bc  2105              MOVS     r1,#5
0000be  0788              LSLS     r0,r1,#30
0000c0  f7fffffe          BL       TIM_SelectSlaveMode
;;;70     
;;;71     	/* TIM1 counter enable */
;;;72       TIM_Cmd(TIM1, ENABLE);
0000c4  2101              MOVS     r1,#1
0000c6  481b              LDR      r0,|L1.308|
0000c8  f7fffffe          BL       TIM_Cmd
;;;73     	/* TIM1 main Output Enable */
;;;74       TIM_CtrlPWMOutputs(TIM1, ENABLE);  
0000cc  2101              MOVS     r1,#1
0000ce  4819              LDR      r0,|L1.308|
0000d0  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;75     
;;;76     	/* TIM2 counter enable */
;;;77       TIM_Cmd(TIM2, ENABLE);
0000d4  2101              MOVS     r1,#1
0000d6  0788              LSLS     r0,r1,#30
0000d8  f7fffffe          BL       TIM_Cmd
;;;78     	/* TIM1 main Output Enable */
;;;79       TIM_CtrlPWMOutputs(TIM2, ENABLE);  
0000dc  2101              MOVS     r1,#1
0000de  0788              LSLS     r0,r1,#30
0000e0  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;80     
;;;81     //   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//使能GPIOC和AFIO端口功能
;;;82     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
0000e4  2101              MOVS     r1,#1
0000e6  4608              MOV      r0,r1
0000e8  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;83     	
;;;84     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_9;
0000ec  f2402002          MOV      r0,#0x202
0000f0  9001              STR      r0,[sp,#4]
;;;85       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000f2  2002              MOVS     r0,#2
0000f4  f88d0008          STRB     r0,[sp,#8]
;;;86       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
0000f8  2003              MOVS     r0,#3
0000fa  f88d0009          STRB     r0,[sp,#9]
;;;87       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0000fe  2000              MOVS     r0,#0
000100  f88d000a          STRB     r0,[sp,#0xa]
;;;88       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
000104  2001              MOVS     r0,#1
000106  f88d000b          STRB     r0,[sp,#0xb]
;;;89     	GPIO_Init(GPIOA, &GPIO_InitStructure);								//初始化GPIOA端口
00010a  a901              ADD      r1,sp,#4
00010c  480a              LDR      r0,|L1.312|
00010e  f7fffffe          BL       GPIO_Init
;;;90     
;;;91     	/* Connect TIM1 pins to AF2 */  
;;;92       GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
000112  2201              MOVS     r2,#1
000114  4611              MOV      r1,r2
000116  4808              LDR      r0,|L1.312|
000118  f7fffffe          BL       GPIO_PinAFConfig
;;;93       GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_TIM1); 
00011c  2201              MOVS     r2,#1
00011e  2109              MOVS     r1,#9
000120  4805              LDR      r0,|L1.312|
000122  f7fffffe          BL       GPIO_PinAFConfig
;;;94     	
;;;95     	/* TIM1 counter enable */
;;;96       TIM_Cmd(TIM1, ENABLE);
000126  2101              MOVS     r1,#1
000128  4802              LDR      r0,|L1.308|
00012a  f7fffffe          BL       TIM_Cmd
;;;97     
;;;98     }
00012e  b00b              ADD      sp,sp,#0x2c
000130  bd00              POP      {pc}
;;;99     
                          ENDP

000132  0000              DCW      0x0000
                  |L1.308|
                          DCD      0x40010000
                  |L1.312|
                          DCD      0x40020000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\MiddleWareDrv\\DualTimerMasterSlave_MD.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____REVSH|
#line 144
|__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____RRX|
#line 300
|__asm___25_DualTimerMasterSlave_MD_c_aeb84d41____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
