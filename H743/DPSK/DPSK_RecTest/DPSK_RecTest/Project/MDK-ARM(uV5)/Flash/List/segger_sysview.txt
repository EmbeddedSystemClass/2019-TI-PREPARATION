; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\segger_sysview.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\segger_sysview.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -I..\..\User\RTT -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\segger_sysview.crf ..\..\User\SEGGER\SEGGER_SYSVIEW.c]
                          THUMB

                          AREA ||i.SEGGER_SYSVIEW_DisableEvents||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_DisableEvents PROC
;;;2757   */
;;;2758   void SEGGER_SYSVIEW_DisableEvents(U32 DisableMask) {
000000  4902              LDR      r1,|L1.12|
;;;2759     _SYSVIEW_Globals.DisabledEvents |= DisableMask;
000002  69c9              LDR      r1,[r1,#0x1c]  ; _SYSVIEW_Globals
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  61d1              STR      r1,[r2,#0x1c]  ; _SYSVIEW_Globals
;;;2760   }
00000a  4770              BX       lr
;;;2761   
                          ENDP

                  |L1.12|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_EnableEvents||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_EnableEvents PROC
;;;2743   */
;;;2744   void SEGGER_SYSVIEW_EnableEvents(U32 EnableMask) {
000000  4902              LDR      r1,|L2.12|
;;;2745     _SYSVIEW_Globals.DisabledEvents &= ~EnableMask;
000002  69c9              LDR      r1,[r1,#0x1c]  ; _SYSVIEW_Globals
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  61d1              STR      r1,[r2,#0x1c]  ; _SYSVIEW_Globals
;;;2746   }
00000a  4770              BX       lr
;;;2747   
                          ENDP

                  |L2.12|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_EncodeData||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_EncodeData PROC
;;;2269   */
;;;2270   U8* SEGGER_SYSVIEW_EncodeData(U8 *pPayload, const char* pSrc, unsigned NumBytes) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2271     return _EncodeData(pPayload, pSrc, NumBytes);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _EncodeData
;;;2272   }
000012  bd70              POP      {r4-r6,pc}
;;;2273   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_EncodeId||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_EncodeId PROC
;;;2297   */
;;;2298   U8* SEGGER_SYSVIEW_EncodeId(U8* pPayload, unsigned Id) {
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;2299     Id = SHRINK_ID(Id);
000006  480a              LDR      r0,|L4.48|
000008  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
00000a  1a10              SUBS     r0,r2,r0
00000c  0882              LSRS     r2,r0,#2
;;;2300     ENCODE_U32(pPayload, Id);
00000e  4618              MOV      r0,r3
000010  4611              MOV      r1,r2
000012  e005              B        |L4.32|
                  |L4.20|
000014  b2cc              UXTB     r4,r1
000016  f0440480          ORR      r4,r4,#0x80
00001a  f8004b01          STRB     r4,[r0],#1
00001e  09c9              LSRS     r1,r1,#7
                  |L4.32|
000020  297f              CMP      r1,#0x7f
000022  d8f7              BHI      |L4.20|
000024  f8001b01          STRB     r1,[r0],#1
000028  4603              MOV      r3,r0
;;;2301     return pPayload;
00002a  4618              MOV      r0,r3
;;;2302   }
00002c  bd10              POP      {r4,pc}
;;;2303   
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_EncodeString||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_EncodeString PROC
;;;2243   */
;;;2244   U8* SEGGER_SYSVIEW_EncodeString(U8* pPayload, const char* s, unsigned MaxLen) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2245     return _EncodeStr(pPayload, s, MaxLen);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _EncodeStr
;;;2246   }
000012  bd70              POP      {r4-r6,pc}
;;;2247   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_EncodeU32||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_EncodeU32 PROC
;;;2216   */
;;;2217   U8* SEGGER_SYSVIEW_EncodeU32(U8* pPayload, unsigned Value) {
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;2218     ENCODE_U32(pPayload, Value);
000006  4610              MOV      r0,r2
000008  4619              MOV      r1,r3
00000a  e005              B        |L6.24|
                  |L6.12|
00000c  b2cc              UXTB     r4,r1
00000e  f0440480          ORR      r4,r4,#0x80
000012  f8004b01          STRB     r4,[r0],#1
000016  09c9              LSRS     r1,r1,#7
                  |L6.24|
000018  297f              CMP      r1,#0x7f
00001a  d8f7              BHI      |L6.12|
00001c  f8001b01          STRB     r1,[r0],#1
000020  4602              MOV      r2,r0
;;;2219     return pPayload;
000022  4610              MOV      r0,r2
;;;2220   }
000024  bd10              POP      {r4,pc}
;;;2221   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_Error||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Error PROC
;;;2721   */
;;;2722   void SEGGER_SYSVIEW_Error(const char* s) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;2723     U8* pPayload;
;;;2724     U8* pPayloadStart;
;;;2725     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4606              MOV      r6,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4819              LDR      r0,|L7.124|
000018  f7fffffe          BL       _PreparePacket
00001c  4607              MOV      r7,r0
;;;2726     //
;;;2727     pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
00001e  2280              MOVS     r2,#0x80
000020  4629              MOV      r1,r5
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       _EncodeStr
000028  4604              MOV      r4,r0
;;;2728     ENCODE_U32(pPayload, SEGGER_SYSVIEW_ERROR);
00002a  4620              MOV      r0,r4
00002c  2102              MOVS     r1,#2
00002e  e005              B        |L7.60|
                  |L7.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L7.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L7.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;2729     ENCODE_U32(pPayload, 0);
000046  4620              MOV      r0,r4
000048  2100              MOVS     r1,#0
00004a  e005              B        |L7.88|
                  |L7.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L7.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L7.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;2730     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000062  221a              MOVS     r2,#0x1a
000064  4621              MOV      r1,r4
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       _SendPacket
;;;2731     RECORD_END();
00006c  b2f0              UXTB     r0,r6
00006e  f3808811          MSR      BASEPRI,r0
000072  bf00              NOP      
000074  bf00              NOP      
;;;2732   }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;2733   
                          ENDP

00007a  0000              DCW      0x0000
                  |L7.124|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_ErrorfHost||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_ErrorfHost PROC
;;;2581   */
;;;2582   void SEGGER_SYSVIEW_ErrorfHost(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2583     va_list ParamList;
;;;2584   
;;;2585     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2586     _VPrintHost(s, SEGGER_SYSVIEW_ERROR, &ParamList);
000008  466a              MOV      r2,sp
00000a  2102              MOVS     r1,#2
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintHost
;;;2587     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2588   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2589   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_ErrorfTarget||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_ErrorfTarget PROC
;;;2658   */
;;;2659   void SEGGER_SYSVIEW_ErrorfTarget(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2660     va_list ParamList;
;;;2661   
;;;2662     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2663     _VPrintTarget(s, SEGGER_SYSVIEW_ERROR, &ParamList);
000008  466a              MOV      r2,sp
00000a  2102              MOVS     r1,#2
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintTarget
;;;2664     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2665   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2666   #endif // SEGGER_SYSVIEW_EXCLUDE_PRINTF
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_GetSysDesc||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_GetSysDesc PROC
;;;1699   */
;;;1700   void SEGGER_SYSVIEW_GetSysDesc(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1701     U8* pPayload;
;;;1702     U8* pPayloadStart;
;;;1703     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4606              MOV      r6,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4828              LDR      r0,|L10.180|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;1704     //
;;;1705     pPayload = pPayloadStart;
00001a  462c              MOV      r4,r5
;;;1706     ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
00001c  4620              MOV      r0,r4
00001e  4a26              LDR      r2,|L10.184|
000020  6851              LDR      r1,[r2,#4]  ; _SYSVIEW_Globals
000022  e005              B        |L10.48|
                  |L10.36|
000024  b2ca              UXTB     r2,r1
000026  f0420280          ORR      r2,r2,#0x80
00002a  f8002b01          STRB     r2,[r0],#1
00002e  09c9              LSRS     r1,r1,#7
                  |L10.48|
000030  297f              CMP      r1,#0x7f
000032  d8f7              BHI      |L10.36|
000034  f8001b01          STRB     r1,[r0],#1
000038  4604              MOV      r4,r0
;;;1707     ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
00003a  4620              MOV      r0,r4
00003c  4a1e              LDR      r2,|L10.184|
00003e  6891              LDR      r1,[r2,#8]  ; _SYSVIEW_Globals
000040  e005              B        |L10.78|
                  |L10.66|
000042  b2ca              UXTB     r2,r1
000044  f0420280          ORR      r2,r2,#0x80
000048  f8002b01          STRB     r2,[r0],#1
00004c  09c9              LSRS     r1,r1,#7
                  |L10.78|
00004e  297f              CMP      r1,#0x7f
000050  d8f7              BHI      |L10.66|
000052  f8001b01          STRB     r1,[r0],#1
000056  4604              MOV      r4,r0
;;;1708     ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
000058  4620              MOV      r0,r4
00005a  4a17              LDR      r2,|L10.184|
00005c  6911              LDR      r1,[r2,#0x10]  ; _SYSVIEW_Globals
00005e  e005              B        |L10.108|
                  |L10.96|
000060  b2ca              UXTB     r2,r1
000062  f0420280          ORR      r2,r2,#0x80
000066  f8002b01          STRB     r2,[r0],#1
00006a  09c9              LSRS     r1,r1,#7
                  |L10.108|
00006c  297f              CMP      r1,#0x7f
00006e  d8f7              BHI      |L10.96|
000070  f8001b01          STRB     r1,[r0],#1
000074  4604              MOV      r4,r0
;;;1709     ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
000076  4620              MOV      r0,r4
000078  2102              MOVS     r1,#2
00007a  e005              B        |L10.136|
                  |L10.124|
00007c  b2ca              UXTB     r2,r1
00007e  f0420280          ORR      r2,r2,#0x80
000082  f8002b01          STRB     r2,[r0],#1
000086  09c9              LSRS     r1,r1,#7
                  |L10.136|
000088  297f              CMP      r1,#0x7f
00008a  d8f7              BHI      |L10.124|
00008c  f8001b01          STRB     r1,[r0],#1
000090  4604              MOV      r4,r0
;;;1710     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
000092  2218              MOVS     r2,#0x18
000094  4621              MOV      r1,r4
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       _SendPacket
;;;1711     RECORD_END();
00009c  b2f0              UXTB     r0,r6
00009e  f3808811          MSR      BASEPRI,r0
0000a2  bf00              NOP      
0000a4  bf00              NOP      
;;;1712     if (_SYSVIEW_Globals.pfSendSysDesc) {
0000a6  4804              LDR      r0,|L10.184|
0000a8  6a40              LDR      r0,[r0,#0x24]  ; _SYSVIEW_Globals
0000aa  b110              CBZ      r0,|L10.178|
;;;1713       _SYSVIEW_Globals.pfSendSysDesc();
0000ac  4902              LDR      r1,|L10.184|
0000ae  6a48              LDR      r0,[r1,#0x24]  ; _SYSVIEW_Globals
0000b0  4780              BLX      r0
                  |L10.178|
;;;1714     }
;;;1715   }
0000b2  bd70              POP      {r4-r6,pc}
;;;1716   
                          ENDP

                  |L10.180|
                          DCD      _aPacket
                  |L10.184|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_Init||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Init PROC
;;;1203   */
;;;1204   void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
000008  461e              MOV      r6,r3
;;;1205   #ifdef SEGGER_RTT_SECTION
;;;1206     //
;;;1207     // Explicitly initialize the RTT Control Block if it is in its dedicated section.
;;;1208     //
;;;1209     SEGGER_RTT_Init();
;;;1210   #endif
;;;1211   #if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;1212   #if SEGGER_SYSVIEW_RTT_CHANNEL > 0
;;;1213     SEGGER_RTT_ConfigUpBuffer(SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
;;;1214   #else
;;;1215     _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
;;;1216   #endif
;;;1217     _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
;;;1218     _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
;;;1219     _SYSVIEW_Globals.pOSAPI           = pOSAPI;
;;;1220     _SYSVIEW_Globals.SysFreq          = SysFreq;
;;;1221     _SYSVIEW_Globals.CPUFreq          = CPUFreq;
;;;1222     _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
;;;1223     _SYSVIEW_Globals.EnableState      = 0;
;;;1224     _SYSVIEW_Globals.PacketCount      = 0;
;;;1225   #else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;1226   #if SEGGER_SYSVIEW_RTT_CHANNEL > 0
;;;1227     SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
00000a  2000              MOVS     r0,#0
00000c  f44f6380          MOV      r3,#0x400
000010  4a0e              LDR      r2,|L11.76|
000012  a10f              ADR      r1,|L11.80|
000014  9000              STR      r0,[sp,#0]
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       SEGGER_RTT_ConfigUpBuffer
;;;1228     SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
00001c  2000              MOVS     r0,#0
00001e  2308              MOVS     r3,#8
000020  4a0d              LDR      r2,|L11.88|
000022  a10b              ADR      r1,|L11.80|
000024  9000              STR      r0,[sp,#0]
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       SEGGER_RTT_ConfigDownBuffer
;;;1229   #else
;;;1230     _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
;;;1231     //
;;;1232     // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
;;;1233     //
;;;1234     _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
;;;1235     SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
;;;1236   #endif
;;;1237     _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
00002c  f04f5080          MOV      r0,#0x10000000
000030  490a              LDR      r1,|L11.92|
000032  6108              STR      r0,[r1,#0x10]  ; _SYSVIEW_Globals
;;;1238     _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
000034  480a              LDR      r0,|L11.96|
000036  6840              LDR      r0,[r0,#4]
000038  60c8              STR      r0,[r1,#0xc]  ; _SYSVIEW_Globals
;;;1239     _SYSVIEW_Globals.pOSAPI           = pOSAPI;
00003a  4608              MOV      r0,r1
00003c  6207              STR      r7,[r0,#0x20]  ; _SYSVIEW_Globals
;;;1240     _SYSVIEW_Globals.SysFreq          = SysFreq;
00003e  6044              STR      r4,[r0,#4]  ; _SYSVIEW_Globals
;;;1241     _SYSVIEW_Globals.CPUFreq          = CPUFreq;
000040  6085              STR      r5,[r0,#8]  ; _SYSVIEW_Globals
;;;1242     _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
000042  6246              STR      r6,[r0,#0x24]  ; _SYSVIEW_Globals
;;;1243     _SYSVIEW_Globals.EnableState      = 0;
000044  2000              MOVS     r0,#0
000046  7008              STRB     r0,[r1,#0]
;;;1244   #endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;1245   }
000048  bdf8              POP      {r3-r7,pc}
;;;1246   
                          ENDP

00004a  0000              DCW      0x0000
                  |L11.76|
                          DCD      _UpBuffer
                  |L11.80|
000050  53797356          DCB      "SysView",0
000054  69657700
                  |L11.88|
                          DCD      _DownBuffer
                  |L11.92|
                          DCD      _SYSVIEW_Globals
                  |L11.96|
                          DCD      0xe0001000

                          AREA ||i.SEGGER_SYSVIEW_NameResource||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_NameResource PROC
;;;2160   */
;;;2161   void SEGGER_SYSVIEW_NameResource(U32 ResourceId, const char* sName) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;2162     U8* pPayload;
;;;2163     U8* pPayloadStart;
;;;2164     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000008  f3ef8011          MRS      r0,BASEPRI
00000c  4680              MOV      r8,r0
00000e  2020              MOVS     r0,#0x20
000010  f3808811          MSR      BASEPRI,r0
000014  bf00              NOP      
000016  bf00              NOP      
000018  4814              LDR      r0,|L12.108|
00001a  f7fffffe          BL       _PreparePacket
00001e  4605              MOV      r5,r0
;;;2165     //
;;;2166     pPayload = pPayloadStart;
000020  462c              MOV      r4,r5
;;;2167     ENCODE_U32(pPayload, SHRINK_ID(ResourceId));
000022  4620              MOV      r0,r4
000024  4a12              LDR      r2,|L12.112|
000026  6912              LDR      r2,[r2,#0x10]  ; _SYSVIEW_Globals
000028  1ab2              SUBS     r2,r6,r2
00002a  0891              LSRS     r1,r2,#2
00002c  e005              B        |L12.58|
                  |L12.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L12.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L12.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4604              MOV      r4,r0
;;;2168     pPayload = _EncodeStr(pPayload, sName, SEGGER_SYSVIEW_MAX_STRING_LEN);
000044  2280              MOVS     r2,#0x80
000046  4639              MOV      r1,r7
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       _EncodeStr
00004e  4604              MOV      r4,r0
;;;2169     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NAME_RESOURCE);
000050  2219              MOVS     r2,#0x19
000052  4621              MOV      r1,r4
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       _SendPacket
;;;2170     RECORD_END();
00005a  f00800ff          AND      r0,r8,#0xff
00005e  f3808811          MSR      BASEPRI,r0
000062  bf00              NOP      
000064  bf00              NOP      
;;;2171   }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;2172   
                          ENDP

00006a  0000              DCW      0x0000
                  |L12.108|
                          DCD      _aPacket
                  |L12.112|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnIdle||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnIdle PROC
;;;1965   */
;;;1966   void SEGGER_SYSVIEW_OnIdle(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1967     U8* pPayloadStart;
;;;1968     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4604              MOV      r4,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4807              LDR      r0,|L13.48|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;1969     //
;;;1970     _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
00001a  2211              MOVS     r2,#0x11
00001c  4629              MOV      r1,r5
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _SendPacket
;;;1971     RECORD_END();
000024  b2e0              UXTB     r0,r4
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;1972   }
00002e  bd70              POP      {r4-r6,pc}
;;;1973   
                          ENDP

                  |L13.48|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_OnTaskCreate||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskCreate PROC
;;;1984   */
;;;1985   void SEGGER_SYSVIEW_OnTaskCreate(unsigned TaskId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;1986     U8* pPayload;
;;;1987     U8* pPayloadStart;
;;;1988     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4811              LDR      r0,|L14.92|
000018  f7fffffe          BL       _PreparePacket
00001c  4605              MOV      r5,r0
;;;1989     //
;;;1990     pPayload = pPayloadStart;
00001e  462e              MOV      r6,r5
;;;1991     TaskId = SHRINK_ID(TaskId);
000020  480f              LDR      r0,|L14.96|
000022  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000024  1a20              SUBS     r0,r4,r0
000026  0884              LSRS     r4,r0,#2
;;;1992     ENCODE_U32(pPayload, TaskId);
000028  4630              MOV      r0,r6
00002a  4621              MOV      r1,r4
00002c  e005              B        |L14.58|
                  |L14.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L14.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L14.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4606              MOV      r6,r0
;;;1993     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
000044  2208              MOVS     r2,#8
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _SendPacket
;;;1994     RECORD_END();
00004e  b2f8              UXTB     r0,r7
000050  f3808811          MSR      BASEPRI,r0
000054  bf00              NOP      
000056  bf00              NOP      
;;;1995   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;1996   
                          ENDP

                  |L14.92|
                          DCD      _aPacket
                  |L14.96|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnTaskStartExec||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskStartExec PROC
;;;2033   */
;;;2034   void SEGGER_SYSVIEW_OnTaskStartExec(unsigned TaskId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;2035     U8* pPayload;
;;;2036     U8* pPayloadStart;
;;;2037     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4811              LDR      r0,|L15.92|
000018  f7fffffe          BL       _PreparePacket
00001c  4605              MOV      r5,r0
;;;2038     //
;;;2039     pPayload = pPayloadStart;
00001e  462e              MOV      r6,r5
;;;2040     TaskId = SHRINK_ID(TaskId);
000020  480f              LDR      r0,|L15.96|
000022  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000024  1a20              SUBS     r0,r4,r0
000026  0884              LSRS     r4,r0,#2
;;;2041     ENCODE_U32(pPayload, TaskId);
000028  4630              MOV      r0,r6
00002a  4621              MOV      r1,r4
00002c  e005              B        |L15.58|
                  |L15.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L15.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L15.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4606              MOV      r6,r0
;;;2042     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
000044  2204              MOVS     r2,#4
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _SendPacket
;;;2043     RECORD_END();
00004e  b2f8              UXTB     r0,r7
000050  f3808811          MSR      BASEPRI,r0
000054  bf00              NOP      
000056  bf00              NOP      
;;;2044   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;2045   
                          ENDP

                  |L15.92|
                          DCD      _aPacket
                  |L15.96|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnTaskStartReady||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskStartReady PROC
;;;2071   */
;;;2072   void SEGGER_SYSVIEW_OnTaskStartReady(unsigned TaskId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;2073     U8* pPayload;
;;;2074     U8* pPayloadStart;
;;;2075     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4811              LDR      r0,|L16.92|
000018  f7fffffe          BL       _PreparePacket
00001c  4605              MOV      r5,r0
;;;2076     //
;;;2077     pPayload = pPayloadStart;
00001e  462e              MOV      r6,r5
;;;2078     TaskId = SHRINK_ID(TaskId);
000020  480f              LDR      r0,|L16.96|
000022  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000024  1a20              SUBS     r0,r4,r0
000026  0884              LSRS     r4,r0,#2
;;;2079     ENCODE_U32(pPayload, TaskId);
000028  4630              MOV      r0,r6
00002a  4621              MOV      r1,r4
00002c  e005              B        |L16.58|
                  |L16.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L16.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L16.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4606              MOV      r6,r0
;;;2080     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
000044  2206              MOVS     r2,#6
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _SendPacket
;;;2081     RECORD_END();
00004e  b2f8              UXTB     r0,r7
000050  f3808811          MSR      BASEPRI,r0
000054  bf00              NOP      
000056  bf00              NOP      
;;;2082   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;2083   
                          ENDP

                  |L16.92|
                          DCD      _aPacket
                  |L16.96|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnTaskStopExec||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskStopExec PROC
;;;2053   */
;;;2054   void SEGGER_SYSVIEW_OnTaskStopExec(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;2055     U8* pPayloadStart;
;;;2056     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4604              MOV      r4,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4807              LDR      r0,|L17.48|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;2057     //
;;;2058     _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TASK_STOP_EXEC);
00001a  2205              MOVS     r2,#5
00001c  4629              MOV      r1,r5
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _SendPacket
;;;2059     RECORD_END();
000024  b2e0              UXTB     r0,r4
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;2060   }
00002e  bd70              POP      {r4-r6,pc}
;;;2061   
                          ENDP

                  |L17.48|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_OnTaskStopReady||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskStopReady PROC
;;;2094   */
;;;2095   void SEGGER_SYSVIEW_OnTaskStopReady(unsigned TaskId, unsigned Cause) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;2096     U8* pPayload;
;;;2097     U8* pPayloadStart;
;;;2098     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
000008  f3ef8011          MRS      r0,BASEPRI
00000c  4680              MOV      r8,r0
00000e  2020              MOVS     r0,#0x20
000010  f3808811          MSR      BASEPRI,r0
000014  bf00              NOP      
000016  bf00              NOP      
000018  4818              LDR      r0,|L18.124|
00001a  f7fffffe          BL       _PreparePacket
00001e  4606              MOV      r6,r0
;;;2099     //
;;;2100     pPayload = pPayloadStart;
000020  4635              MOV      r5,r6
;;;2101     TaskId = SHRINK_ID(TaskId);
000022  4817              LDR      r0,|L18.128|
000024  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000026  1a20              SUBS     r0,r4,r0
000028  0884              LSRS     r4,r0,#2
;;;2102     ENCODE_U32(pPayload, TaskId);
00002a  4628              MOV      r0,r5
00002c  4621              MOV      r1,r4
00002e  e005              B        |L18.60|
                  |L18.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L18.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L18.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4605              MOV      r5,r0
;;;2103     ENCODE_U32(pPayload, Cause);
000046  4628              MOV      r0,r5
000048  4639              MOV      r1,r7
00004a  e005              B        |L18.88|
                  |L18.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L18.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L18.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4605              MOV      r5,r0
;;;2104     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
000062  2207              MOVS     r2,#7
000064  4629              MOV      r1,r5
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       _SendPacket
;;;2105     RECORD_END();
00006c  f00800ff          AND      r0,r8,#0xff
000070  f3808811          MSR      BASEPRI,r0
000074  bf00              NOP      
000076  bf00              NOP      
;;;2106   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;2107   
                          ENDP

                  |L18.124|
                          DCD      _aPacket
                  |L18.128|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnTaskTerminate||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnTaskTerminate PROC
;;;2009   */
;;;2010   void SEGGER_SYSVIEW_OnTaskTerminate(unsigned TaskId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;2011     U8* pPayload;
;;;2012     U8* pPayloadStart;
;;;2013     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4811              LDR      r0,|L19.92|
000018  f7fffffe          BL       _PreparePacket
00001c  4605              MOV      r5,r0
;;;2014     //
;;;2015     pPayload = pPayloadStart;
00001e  462e              MOV      r6,r5
;;;2016     TaskId = SHRINK_ID(TaskId);
000020  480f              LDR      r0,|L19.96|
000022  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000024  1a20              SUBS     r0,r4,r0
000026  0884              LSRS     r4,r0,#2
;;;2017     ENCODE_U32(pPayload, TaskId);
000028  4630              MOV      r0,r6
00002a  4621              MOV      r1,r4
00002c  e005              B        |L19.58|
                  |L19.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L19.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L19.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4606              MOV      r6,r0
;;;2018     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_TERMINATE);
000044  221d              MOVS     r2,#0x1d
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _SendPacket
;;;2019     RECORD_END();
00004e  b2f8              UXTB     r0,r7
000050  f3808811          MSR      BASEPRI,r0
000054  bf00              NOP      
000056  bf00              NOP      
;;;2020   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;2021   
                          ENDP

                  |L19.92|
                          DCD      _aPacket
                  |L19.96|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_OnUserStart||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnUserStart PROC
;;;2117   */
;;;2118   void SEGGER_SYSVIEW_OnUserStart(unsigned UserId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;2119     U8* pPayload;
;;;2120     U8* pPayloadStart;
;;;2121     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  480f              LDR      r0,|L20.84|
000018  f7fffffe          BL       _PreparePacket
00001c  4604              MOV      r4,r0
;;;2122     //
;;;2123     pPayload = pPayloadStart;
00001e  4626              MOV      r6,r4
;;;2124     ENCODE_U32(pPayload, UserId);
000020  4630              MOV      r0,r6
000022  4629              MOV      r1,r5
000024  e005              B        |L20.50|
                  |L20.38|
000026  b2ca              UXTB     r2,r1
000028  f0420280          ORR      r2,r2,#0x80
00002c  f8002b01          STRB     r2,[r0],#1
000030  09c9              LSRS     r1,r1,#7
                  |L20.50|
000032  297f              CMP      r1,#0x7f
000034  d8f7              BHI      |L20.38|
000036  f8001b01          STRB     r1,[r0],#1
00003a  4606              MOV      r6,r0
;;;2125     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_USER_START);
00003c  220f              MOVS     r2,#0xf
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       _SendPacket
;;;2126     RECORD_END();
000046  b2f8              UXTB     r0,r7
000048  f3808811          MSR      BASEPRI,r0
00004c  bf00              NOP      
00004e  bf00              NOP      
;;;2127   }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;2128   
                          ENDP

                  |L20.84|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_OnUserStop||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_OnUserStop PROC
;;;2138   */
;;;2139   void SEGGER_SYSVIEW_OnUserStop(unsigned UserId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;2140     U8 * pPayload;
;;;2141     U8 * pPayloadStart;
;;;2142     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  480f              LDR      r0,|L21.84|
000018  f7fffffe          BL       _PreparePacket
00001c  4604              MOV      r4,r0
;;;2143     //
;;;2144     pPayload = pPayloadStart;
00001e  4626              MOV      r6,r4
;;;2145     ENCODE_U32(pPayload, UserId);
000020  4630              MOV      r0,r6
000022  4629              MOV      r1,r5
000024  e005              B        |L21.50|
                  |L21.38|
000026  b2ca              UXTB     r2,r1
000028  f0420280          ORR      r2,r2,#0x80
00002c  f8002b01          STRB     r2,[r0],#1
000030  09c9              LSRS     r1,r1,#7
                  |L21.50|
000032  297f              CMP      r1,#0x7f
000034  d8f7              BHI      |L21.38|
000036  f8001b01          STRB     r1,[r0],#1
00003a  4606              MOV      r6,r0
;;;2146     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_USER_STOP);
00003c  2210              MOVS     r2,#0x10
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       _SendPacket
;;;2147     RECORD_END();
000046  b2f8              UXTB     r0,r7
000048  f3808811          MSR      BASEPRI,r0
00004c  bf00              NOP      
00004e  bf00              NOP      
;;;2148   }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;2149   
                          ENDP

                  |L21.84|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_Print||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Print PROC
;;;2677   */
;;;2678   void SEGGER_SYSVIEW_Print(const char* s) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;2679     U8* pPayload;
;;;2680     U8* pPayloadStart;
;;;2681     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4606              MOV      r6,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4819              LDR      r0,|L22.124|
000018  f7fffffe          BL       _PreparePacket
00001c  4607              MOV      r7,r0
;;;2682     //
;;;2683     pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
00001e  2280              MOVS     r2,#0x80
000020  4629              MOV      r1,r5
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       _EncodeStr
000028  4604              MOV      r4,r0
;;;2684     ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
00002a  4620              MOV      r0,r4
00002c  2100              MOVS     r1,#0
00002e  e005              B        |L22.60|
                  |L22.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L22.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L22.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;2685     ENCODE_U32(pPayload, 0);
000046  4620              MOV      r0,r4
000048  2100              MOVS     r1,#0
00004a  e005              B        |L22.88|
                  |L22.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L22.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L22.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;2686     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000062  221a              MOVS     r2,#0x1a
000064  4621              MOV      r1,r4
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       _SendPacket
;;;2687     RECORD_END();
00006c  b2f0              UXTB     r0,r6
00006e  f3808811          MSR      BASEPRI,r0
000072  bf00              NOP      
000074  bf00              NOP      
;;;2688   }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;2689   
                          ENDP

00007a  0000              DCW      0x0000
                  |L22.124|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_PrintfHost||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_PrintfHost PROC
;;;2537   */
;;;2538   void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2539     va_list ParamList;
;;;2540   
;;;2541     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2542     _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
000008  466a              MOV      r2,sp
00000a  2100              MOVS     r1,#0
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintHost
;;;2543     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2544   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2545   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_PrintfHostEx||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_PrintfHostEx PROC
;;;2516   */
;;;2517   void SEGGER_SYSVIEW_PrintfHostEx(const char* s, U32 Options, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;2518     va_list ParamList;
;;;2519   
;;;2520     va_start(ParamList, Options);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;2521     _VPrintHost(s, Options, &ParamList);
00000a  466a              MOV      r2,sp
00000c  4620              MOV      r0,r4
00000e  9905              LDR      r1,[sp,#0x14]
000010  f7fffffe          BL       _VPrintHost
;;;2522     va_end(ParamList);
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
;;;2523   }
000018  bc38              POP      {r3-r5}
00001a  f85dfb14          LDR      pc,[sp],#0x14
;;;2524   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_PrintfTarget||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_PrintfTarget PROC
;;;2620   */
;;;2621   void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2622     va_list ParamList;
;;;2623   
;;;2624     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2625     _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
000008  466a              MOV      r2,sp
00000a  2100              MOVS     r1,#0
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintTarget
;;;2626     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2627   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2628   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_PrintfTargetEx||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_PrintfTargetEx PROC
;;;2601   */
;;;2602   void SEGGER_SYSVIEW_PrintfTargetEx(const char* s, U32 Options, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;2603     va_list ParamList;
;;;2604   
;;;2605     va_start(ParamList, Options);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;2606     _VPrintTarget(s, Options, &ParamList);
00000a  466a              MOV      r2,sp
00000c  4620              MOV      r0,r4
00000e  9905              LDR      r1,[sp,#0x14]
000010  f7fffffe          BL       _VPrintTarget
;;;2607     va_end(ParamList);
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
;;;2608   }
000018  bc38              POP      {r3-r5}
00001a  f85dfb14          LDR      pc,[sp],#0x14
;;;2609   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_RecordEndCall||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordEndCall PROC
;;;1924   */
;;;1925   void SEGGER_SYSVIEW_RecordEndCall(unsigned EventID) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;1926     U8* pPayload;
;;;1927     U8* pPayloadStart;
;;;1928     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  480f              LDR      r0,|L27.84|
000018  f7fffffe          BL       _PreparePacket
00001c  4604              MOV      r4,r0
;;;1929     //
;;;1930     pPayload = pPayloadStart;
00001e  4626              MOV      r6,r4
;;;1931     ENCODE_U32(pPayload, EventID);
000020  4630              MOV      r0,r6
000022  4629              MOV      r1,r5
000024  e005              B        |L27.50|
                  |L27.38|
000026  b2ca              UXTB     r2,r1
000028  f0420280          ORR      r2,r2,#0x80
00002c  f8002b01          STRB     r2,[r0],#1
000030  09c9              LSRS     r1,r1,#7
                  |L27.50|
000032  297f              CMP      r1,#0x7f
000034  d8f7              BHI      |L27.38|
000036  f8001b01          STRB     r1,[r0],#1
00003a  4606              MOV      r6,r0
;;;1932     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
00003c  221c              MOVS     r2,#0x1c
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       _SendPacket
;;;1933     RECORD_END();
000046  b2f8              UXTB     r0,r7
000048  f3808811          MSR      BASEPRI,r0
00004c  bf00              NOP      
00004e  bf00              NOP      
;;;1934   }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;1935   
                          ENDP

                  |L27.84|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordEndCallU32||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordEndCallU32 PROC
;;;1946   */
;;;1947   void SEGGER_SYSVIEW_RecordEndCallU32(unsigned EventID, U32 Para0) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;1948     U8* pPayload;
;;;1949     U8* pPayloadStart;
;;;1950     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
000008  f3ef8011          MRS      r0,BASEPRI
00000c  4680              MOV      r8,r0
00000e  2020              MOVS     r0,#0x20
000010  f3808811          MSR      BASEPRI,r0
000014  bf00              NOP      
000016  bf00              NOP      
000018  4816              LDR      r0,|L28.116|
00001a  f7fffffe          BL       _PreparePacket
00001e  4605              MOV      r5,r0
;;;1951     //
;;;1952     pPayload = pPayloadStart;
000020  462c              MOV      r4,r5
;;;1953     ENCODE_U32(pPayload, EventID);
000022  4620              MOV      r0,r4
000024  4631              MOV      r1,r6
000026  e005              B        |L28.52|
                  |L28.40|
000028  b2ca              UXTB     r2,r1
00002a  f0420280          ORR      r2,r2,#0x80
00002e  f8002b01          STRB     r2,[r0],#1
000032  09c9              LSRS     r1,r1,#7
                  |L28.52|
000034  297f              CMP      r1,#0x7f
000036  d8f7              BHI      |L28.40|
000038  f8001b01          STRB     r1,[r0],#1
00003c  4604              MOV      r4,r0
;;;1954     ENCODE_U32(pPayload, Para0);
00003e  4620              MOV      r0,r4
000040  4639              MOV      r1,r7
000042  e005              B        |L28.80|
                  |L28.68|
000044  b2ca              UXTB     r2,r1
000046  f0420280          ORR      r2,r2,#0x80
00004a  f8002b01          STRB     r2,[r0],#1
00004e  09c9              LSRS     r1,r1,#7
                  |L28.80|
000050  297f              CMP      r1,#0x7f
000052  d8f7              BHI      |L28.68|
000054  f8001b01          STRB     r1,[r0],#1
000058  4604              MOV      r4,r0
;;;1955     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
00005a  221c              MOVS     r2,#0x1c
00005c  4621              MOV      r1,r4
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       _SendPacket
;;;1956     RECORD_END();
000064  f00800ff          AND      r0,r8,#0xff
000068  f3808811          MSR      BASEPRI,r0
00006c  bf00              NOP      
00006e  bf00              NOP      
;;;1957   }
000070  e8bd81f0          POP      {r4-r8,pc}
;;;1958   
                          ENDP

                  |L28.116|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordEnterISR||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordEnterISR PROC
;;;1821   */
;;;1822   void SEGGER_SYSVIEW_RecordEnterISR(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1823     unsigned v;
;;;1824     U8* pPayload;
;;;1825     U8* pPayloadStart;
;;;1826     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000004  f3ef8011          MRS      r0,BASEPRI
000008  4607              MOV      r7,r0
00000a  2020              MOVS     r0,#0x20
00000c  f3808811          MSR      BASEPRI,r0
000010  bf00              NOP      
000012  bf00              NOP      
000014  4811              LDR      r0,|L29.92|
000016  f7fffffe          BL       _PreparePacket
00001a  4604              MOV      r4,r0
;;;1827     //
;;;1828     pPayload = pPayloadStart;
00001c  4625              MOV      r5,r4
;;;1829     v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
00001e  4810              LDR      r0,|L29.96|
000020  8800              LDRH     r0,[r0,#0]
000022  f3c00608          UBFX     r6,r0,#0,#9
;;;1830     ENCODE_U32(pPayload, v);
000026  4628              MOV      r0,r5
000028  4631              MOV      r1,r6
00002a  e005              B        |L29.56|
                  |L29.44|
00002c  b2ca              UXTB     r2,r1
00002e  f0420280          ORR      r2,r2,#0x80
000032  f8002b01          STRB     r2,[r0],#1
000036  09c9              LSRS     r1,r1,#7
                  |L29.56|
000038  297f              CMP      r1,#0x7f
00003a  d8f7              BHI      |L29.44|
00003c  f8001b01          STRB     r1,[r0],#1
000040  4605              MOV      r5,r0
;;;1831     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
000042  2202              MOVS     r2,#2
000044  4629              MOV      r1,r5
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       _SendPacket
;;;1832     RECORD_END();
00004c  b2f8              UXTB     r0,r7
00004e  f3808811          MSR      BASEPRI,r0
000052  bf00              NOP      
000054  bf00              NOP      
;;;1833   }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;1834   
                          ENDP

00005a  0000              DCW      0x0000
                  |L29.92|
                          DCD      _aPacket
                  |L29.96|
                          DCD      0xe000ed04

                          AREA ||i.SEGGER_SYSVIEW_RecordEnterTimer||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordEnterTimer PROC
;;;1888   */
;;;1889   void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;1890     U8* pPayload;
;;;1891     U8* pPayloadStart;
;;;1892     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4811              LDR      r0,|L30.92|
000018  f7fffffe          BL       _PreparePacket
00001c  4604              MOV      r4,r0
;;;1893     //
;;;1894     pPayload = pPayloadStart;
00001e  4626              MOV      r6,r4
;;;1895     ENCODE_U32(pPayload, SHRINK_ID(TimerId));
000020  4630              MOV      r0,r6
000022  4a0f              LDR      r2,|L30.96|
000024  6912              LDR      r2,[r2,#0x10]  ; _SYSVIEW_Globals
000026  1aaa              SUBS     r2,r5,r2
000028  0891              LSRS     r1,r2,#2
00002a  e005              B        |L30.56|
                  |L30.44|
00002c  b2ca              UXTB     r2,r1
00002e  f0420280          ORR      r2,r2,#0x80
000032  f8002b01          STRB     r2,[r0],#1
000036  09c9              LSRS     r1,r1,#7
                  |L30.56|
000038  297f              CMP      r1,#0x7f
00003a  d8f7              BHI      |L30.44|
00003c  f8001b01          STRB     r1,[r0],#1
000040  4606              MOV      r6,r0
;;;1896     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
000042  2213              MOVS     r2,#0x13
000044  4631              MOV      r1,r6
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       _SendPacket
;;;1897     RECORD_END();
00004c  b2f8              UXTB     r0,r7
00004e  f3808811          MSR      BASEPRI,r0
000052  bf00              NOP      
000054  bf00              NOP      
;;;1898   }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;1899   
                          ENDP

00005a  0000              DCW      0x0000
                  |L30.92|
                          DCD      _aPacket
                  |L30.96|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_RecordExitISR||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordExitISR PROC
;;;1848   */
;;;1849   void SEGGER_SYSVIEW_RecordExitISR(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1850     U8* pPayloadStart;
;;;1851     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4604              MOV      r4,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4807              LDR      r0,|L31.48|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;1852     //
;;;1853     _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
00001a  2203              MOVS     r2,#3
00001c  4629              MOV      r1,r5
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _SendPacket
;;;1854     RECORD_END();
000024  b2e0              UXTB     r0,r4
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;1855   }
00002e  bd70              POP      {r4-r6,pc}
;;;1856   
                          ENDP

                  |L31.48|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordExitISRToScheduler||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordExitISRToScheduler PROC
;;;1870   */
;;;1871   void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1872     U8* pPayloadStart;
;;;1873     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4604              MOV      r4,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4807              LDR      r0,|L32.48|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;1874     //
;;;1875     _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
00001a  2212              MOVS     r2,#0x12
00001c  4629              MOV      r1,r5
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _SendPacket
;;;1876     RECORD_END();
000024  b2e0              UXTB     r0,r4
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;1877   }
00002e  bd70              POP      {r4-r6,pc}
;;;1878   
                          ENDP

                  |L32.48|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordExitTimer||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordExitTimer PROC
;;;1906   */
;;;1907   void SEGGER_SYSVIEW_RecordExitTimer(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1908     U8* pPayloadStart;
;;;1909     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4604              MOV      r4,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  4807              LDR      r0,|L33.48|
000014  f7fffffe          BL       _PreparePacket
000018  4605              MOV      r5,r0
;;;1910     //
;;;1911     _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
00001a  2214              MOVS     r2,#0x14
00001c  4629              MOV      r1,r5
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _SendPacket
;;;1912     RECORD_END();
000024  b2e0              UXTB     r0,r4
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;1913   }
00002e  bd70              POP      {r4-r6,pc}
;;;1914   
                          ENDP

                  |L33.48|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordModuleDescription||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordModuleDescription PROC
;;;2388   */
;;;2389   void SEGGER_SYSVIEW_RecordModuleDescription(const SEGGER_SYSVIEW_MODULE* pModule, const char* sDescription) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
;;;2390     U8  ModuleId;
;;;2391     SEGGER_SYSVIEW_MODULE* p;
;;;2392   
;;;2393     p = _pFirstModule;
000008  4825              LDR      r0,|L34.160|
00000a  6806              LDR      r6,[r0,#0]  ; _pFirstModule
;;;2394     ModuleId = 0;
00000c  f04f0800          MOV      r8,#0
;;;2395     do {
000010  bf00              NOP      
                  |L34.18|
;;;2396       if (p == pModule) {
000012  42ae              CMP      r6,r5
000014  d100              BNE      |L34.24|
;;;2397         break;
000016  e006              B        |L34.38|
                  |L34.24|
;;;2398       }
;;;2399       ModuleId++;
000018  f1080001          ADD      r0,r8,#1
00001c  f00008ff          AND      r8,r0,#0xff
;;;2400       p = p->pNext;
000020  6936              LDR      r6,[r6,#0x10]
;;;2401     } while (p);
000022  2e00              CMP      r6,#0
000024  d1f5              BNE      |L34.18|
                  |L34.38|
000026  bf00              NOP                            ;2397
;;;2402     {
;;;2403       U8* pPayload;
;;;2404       U8* pPayloadStart;
;;;2405       RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000028  f3ef8011          MRS      r0,BASEPRI
00002c  4682              MOV      r10,r0
00002e  2020              MOVS     r0,#0x20
000030  f3808811          MSR      BASEPRI,r0
000034  bf00              NOP      
000036  bf00              NOP      
000038  481a              LDR      r0,|L34.164|
00003a  f7fffffe          BL       _PreparePacket
00003e  4607              MOV      r7,r0
;;;2406       //
;;;2407       pPayload = pPayloadStart;
000040  463c              MOV      r4,r7
;;;2408       //
;;;2409       // Send module description
;;;2410       // Send event offset and number of events
;;;2411       //
;;;2412       ENCODE_U32(pPayload, ModuleId);
000042  4620              MOV      r0,r4
000044  4641              MOV      r1,r8
000046  e005              B        |L34.84|
                  |L34.72|
000048  b2ca              UXTB     r2,r1
00004a  f0420280          ORR      r2,r2,#0x80
00004e  f8002b01          STRB     r2,[r0],#1
000052  09c9              LSRS     r1,r1,#7
                  |L34.84|
000054  297f              CMP      r1,#0x7f
000056  d8f7              BHI      |L34.72|
000058  f8001b01          STRB     r1,[r0],#1
00005c  4604              MOV      r4,r0
;;;2413       ENCODE_U32(pPayload, (pModule->EventOffset));
00005e  4620              MOV      r0,r4
000060  68a9              LDR      r1,[r5,#8]
000062  e005              B        |L34.112|
                  |L34.100|
000064  b2ca              UXTB     r2,r1
000066  f0420280          ORR      r2,r2,#0x80
00006a  f8002b01          STRB     r2,[r0],#1
00006e  09c9              LSRS     r1,r1,#7
                  |L34.112|
000070  297f              CMP      r1,#0x7f
000072  d8f7              BHI      |L34.100|
000074  f8001b01          STRB     r1,[r0],#1
000078  4604              MOV      r4,r0
;;;2414       pPayload = _EncodeStr(pPayload, sDescription, SEGGER_SYSVIEW_MAX_STRING_LEN);
00007a  2280              MOVS     r2,#0x80
00007c  4649              MOV      r1,r9
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       _EncodeStr
000084  4604              MOV      r4,r0
;;;2415       _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
000086  2216              MOVS     r2,#0x16
000088  4621              MOV      r1,r4
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       _SendPacket
;;;2416       RECORD_END();
000090  f00a00ff          AND      r0,r10,#0xff
000094  f3808811          MSR      BASEPRI,r0
000098  bf00              NOP      
00009a  bf00              NOP      
;;;2417     }
;;;2418   }
00009c  e8bd87f0          POP      {r4-r10,pc}
;;;2419   
                          ENDP

                  |L34.160|
                          DCD      _pFirstModule
                  |L34.164|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordString||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordString PROC
;;;1605   */
;;;1606   void SEGGER_SYSVIEW_RecordString(unsigned EventID, const char* pString) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1607     U8* pPayload;
;;;1608     U8* pPayloadStart;
;;;1609     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000008  f3ef8011          MRS      r0,BASEPRI
00000c  4606              MOV      r6,r0
00000e  2020              MOVS     r0,#0x20
000010  f3808811          MSR      BASEPRI,r0
000014  bf00              NOP      
000016  bf00              NOP      
000018  480a              LDR      r0,|L35.68|
00001a  f7fffffe          BL       _PreparePacket
00001e  4680              MOV      r8,r0
;;;1610     //
;;;1611     pPayload = _EncodeStr(pPayloadStart, pString, SEGGER_SYSVIEW_MAX_STRING_LEN);
000020  2280              MOVS     r2,#0x80
000022  4629              MOV      r1,r5
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       _EncodeStr
00002a  4607              MOV      r7,r0
;;;1612     _SendPacket(pPayloadStart, pPayload, EventID);
00002c  4622              MOV      r2,r4
00002e  4639              MOV      r1,r7
000030  4640              MOV      r0,r8
000032  f7fffffe          BL       _SendPacket
;;;1613     RECORD_END();
000036  b2f0              UXTB     r0,r6
000038  f3808811          MSR      BASEPRI,r0
00003c  bf00              NOP      
00003e  bf00              NOP      
;;;1614   }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;1615   
                          ENDP

                  |L35.68|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordSystime||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordSystime PROC
;;;1797   */
;;;1798   void SEGGER_SYSVIEW_RecordSystime(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1799     U64 Systime;
;;;1800   
;;;1801     if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
000002  480c              LDR      r0,|L36.52|
000004  6a00              LDR      r0,[r0,#0x20]  ; _SYSVIEW_Globals
000006  b178              CBZ      r0,|L36.40|
000008  480a              LDR      r0,|L36.52|
00000a  6a00              LDR      r0,[r0,#0x20]  ; _SYSVIEW_Globals
00000c  6800              LDR      r0,[r0,#0]
00000e  b158              CBZ      r0,|L36.40|
;;;1802       Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
000010  4908              LDR      r1,|L36.52|
000012  6a09              LDR      r1,[r1,#0x20]  ; _SYSVIEW_Globals
000014  6808              LDR      r0,[r1,#0]
000016  4780              BLX      r0
000018  4604              MOV      r4,r0
00001a  460d              MOV      r5,r1
;;;1803       SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
00001c  462a              MOV      r2,r5
00001e  4621              MOV      r1,r4
000020  200d              MOVS     r0,#0xd
000022  f7fffffe          BL       SEGGER_SYSVIEW_RecordU32x2
000026  e004              B        |L36.50|
                  |L36.40|
;;;1804                                  (U32)(Systime),
;;;1805                                  (U32)(Systime >> 32));
;;;1806     } else {
;;;1807       SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
000028  4803              LDR      r0,|L36.56|
00002a  6841              LDR      r1,[r0,#4]
00002c  200c              MOVS     r0,#0xc
00002e  f7fffffe          BL       SEGGER_SYSVIEW_RecordU32
                  |L36.50|
;;;1808     }
;;;1809   }
000032  bd70              POP      {r4-r6,pc}
;;;1810   
                          ENDP

                  |L36.52|
                          DCD      _SYSVIEW_Globals
                  |L36.56|
                          DCD      0xe0001000

                          AREA ||i.SEGGER_SYSVIEW_RecordU32||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32 PROC
;;;1291   */
;;;1292   void SEGGER_SYSVIEW_RecordU32(unsigned EventID, U32 Value) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1293     U8* pPayload;
;;;1294     U8* pPayloadStart;
;;;1295     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
000008  f3ef8011          MRS      r0,BASEPRI
00000c  4680              MOV      r8,r0
00000e  2020              MOVS     r0,#0x20
000010  f3808811          MSR      BASEPRI,r0
000014  bf00              NOP      
000016  bf00              NOP      
000018  480f              LDR      r0,|L37.88|
00001a  f7fffffe          BL       _PreparePacket
00001e  4604              MOV      r4,r0
;;;1296     //
;;;1297     pPayload = pPayloadStart;
000020  4627              MOV      r7,r4
;;;1298     ENCODE_U32(pPayload, Value);
000022  4638              MOV      r0,r7
000024  4631              MOV      r1,r6
000026  e005              B        |L37.52|
                  |L37.40|
000028  b2ca              UXTB     r2,r1
00002a  f0420280          ORR      r2,r2,#0x80
00002e  f8002b01          STRB     r2,[r0],#1
000032  09c9              LSRS     r1,r1,#7
                  |L37.52|
000034  297f              CMP      r1,#0x7f
000036  d8f7              BHI      |L37.40|
000038  f8001b01          STRB     r1,[r0],#1
00003c  4607              MOV      r7,r0
;;;1299     _SendPacket(pPayloadStart, pPayload, EventID);
00003e  462a              MOV      r2,r5
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       _SendPacket
;;;1300     RECORD_END();
000048  f00800ff          AND      r0,r8,#0xff
00004c  f3808811          MSR      BASEPRI,r0
000050  bf00              NOP      
000052  bf00              NOP      
;;;1301   }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;1302   
                          ENDP

                  |L37.88|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x10||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x10 PROC
;;;1570   */
;;;1571   void SEGGER_SYSVIEW_RecordU32x10(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7, U32 Para8, U32 Para9) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1572     U8* pPayload;
;;;1573     U8* pPayloadStart;
;;;1574     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 10 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  484e              LDR      r0,|L38.348|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1575     //
;;;1576     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1577     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L38.60|
                  |L38.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L38.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L38.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1578     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L38.88|
                  |L38.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L38.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L38.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1579     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L38.116|
                  |L38.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L38.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L38.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1580     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L38.144|
                  |L38.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L38.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L38.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1581     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L38.172|
                  |L38.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L38.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L38.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1582     ENCODE_U32(pPayload, Para5);
0000b6  4620              MOV      r0,r4
0000b8  990c              LDR      r1,[sp,#0x30]
0000ba  e005              B        |L38.200|
                  |L38.188|
0000bc  b2ca              UXTB     r2,r1
0000be  f0420280          ORR      r2,r2,#0x80
0000c2  f8002b01          STRB     r2,[r0],#1
0000c6  09c9              LSRS     r1,r1,#7
                  |L38.200|
0000c8  297f              CMP      r1,#0x7f
0000ca  d8f7              BHI      |L38.188|
0000cc  f8001b01          STRB     r1,[r0],#1
0000d0  4604              MOV      r4,r0
;;;1583     ENCODE_U32(pPayload, Para6);
0000d2  4620              MOV      r0,r4
0000d4  990d              LDR      r1,[sp,#0x34]
0000d6  e005              B        |L38.228|
                  |L38.216|
0000d8  b2ca              UXTB     r2,r1
0000da  f0420280          ORR      r2,r2,#0x80
0000de  f8002b01          STRB     r2,[r0],#1
0000e2  09c9              LSRS     r1,r1,#7
                  |L38.228|
0000e4  297f              CMP      r1,#0x7f
0000e6  d8f7              BHI      |L38.216|
0000e8  f8001b01          STRB     r1,[r0],#1
0000ec  4604              MOV      r4,r0
;;;1584     ENCODE_U32(pPayload, Para7);
0000ee  4620              MOV      r0,r4
0000f0  990e              LDR      r1,[sp,#0x38]
0000f2  e005              B        |L38.256|
                  |L38.244|
0000f4  b2ca              UXTB     r2,r1
0000f6  f0420280          ORR      r2,r2,#0x80
0000fa  f8002b01          STRB     r2,[r0],#1
0000fe  09c9              LSRS     r1,r1,#7
                  |L38.256|
000100  297f              CMP      r1,#0x7f
000102  d8f7              BHI      |L38.244|
000104  f8001b01          STRB     r1,[r0],#1
000108  4604              MOV      r4,r0
;;;1585     ENCODE_U32(pPayload, Para8);
00010a  4620              MOV      r0,r4
00010c  990f              LDR      r1,[sp,#0x3c]
00010e  e005              B        |L38.284|
                  |L38.272|
000110  b2ca              UXTB     r2,r1
000112  f0420280          ORR      r2,r2,#0x80
000116  f8002b01          STRB     r2,[r0],#1
00011a  09c9              LSRS     r1,r1,#7
                  |L38.284|
00011c  297f              CMP      r1,#0x7f
00011e  d8f7              BHI      |L38.272|
000120  f8001b01          STRB     r1,[r0],#1
000124  4604              MOV      r4,r0
;;;1586     ENCODE_U32(pPayload, Para9);
000126  4620              MOV      r0,r4
000128  9910              LDR      r1,[sp,#0x40]
00012a  e005              B        |L38.312|
                  |L38.300|
00012c  b2ca              UXTB     r2,r1
00012e  f0420280          ORR      r2,r2,#0x80
000132  f8002b01          STRB     r2,[r0],#1
000136  09c9              LSRS     r1,r1,#7
                  |L38.312|
000138  297f              CMP      r1,#0x7f
00013a  d8f7              BHI      |L38.300|
00013c  f8001b01          STRB     r1,[r0],#1
000140  4604              MOV      r4,r0
;;;1587     _SendPacket(pPayloadStart, pPayload, EventID);
000142  4632              MOV      r2,r6
000144  4621              MOV      r1,r4
000146  4628              MOV      r0,r5
000148  f7fffffe          BL       _SendPacket
;;;1588     RECORD_END();
00014c  9800              LDR      r0,[sp,#0]
00014e  b2c0              UXTB     r0,r0
000150  f3808811          MSR      BASEPRI,r0
000154  bf00              NOP      
000156  bf00              NOP      
;;;1589   }
000158  e8bd8ff8          POP      {r3-r11,pc}
;;;1590   /*********************************************************************
                          ENDP

                  |L38.348|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x2||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x2 PROC
;;;1314   */
;;;1315   void SEGGER_SYSVIEW_RecordU32x2(unsigned EventID, U32 Para0, U32 Para1) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1316     U8* pPayload;
;;;1317     U8* pPayloadStart;
;;;1318     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
00000a  f3ef8011          MRS      r0,BASEPRI
00000e  4681              MOV      r9,r0
000010  2020              MOVS     r0,#0x20
000012  f3808811          MSR      BASEPRI,r0
000016  bf00              NOP      
000018  bf00              NOP      
00001a  4817              LDR      r0,|L39.120|
00001c  f7fffffe          BL       _PreparePacket
000020  4605              MOV      r5,r0
;;;1319     //
;;;1320     pPayload = pPayloadStart;
000022  462c              MOV      r4,r5
;;;1321     ENCODE_U32(pPayload, Para0);
000024  4620              MOV      r0,r4
000026  4639              MOV      r1,r7
000028  e005              B        |L39.54|
                  |L39.42|
00002a  b2ca              UXTB     r2,r1
00002c  f0420280          ORR      r2,r2,#0x80
000030  f8002b01          STRB     r2,[r0],#1
000034  09c9              LSRS     r1,r1,#7
                  |L39.54|
000036  297f              CMP      r1,#0x7f
000038  d8f7              BHI      |L39.42|
00003a  f8001b01          STRB     r1,[r0],#1
00003e  4604              MOV      r4,r0
;;;1322     ENCODE_U32(pPayload, Para1);
000040  4620              MOV      r0,r4
000042  4641              MOV      r1,r8
000044  e005              B        |L39.82|
                  |L39.70|
000046  b2ca              UXTB     r2,r1
000048  f0420280          ORR      r2,r2,#0x80
00004c  f8002b01          STRB     r2,[r0],#1
000050  09c9              LSRS     r1,r1,#7
                  |L39.82|
000052  297f              CMP      r1,#0x7f
000054  d8f7              BHI      |L39.70|
000056  f8001b01          STRB     r1,[r0],#1
00005a  4604              MOV      r4,r0
;;;1323     _SendPacket(pPayloadStart, pPayload, EventID);
00005c  4632              MOV      r2,r6
00005e  4621              MOV      r1,r4
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       _SendPacket
;;;1324     RECORD_END();
000066  f00900ff          AND      r0,r9,#0xff
00006a  f3808811          MSR      BASEPRI,r0
00006e  bf00              NOP      
000070  bf00              NOP      
;;;1325   }
000072  e8bd87f0          POP      {r4-r10,pc}
;;;1326   
                          ENDP

000076  0000              DCW      0x0000
                  |L39.120|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x3||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x3 PROC
;;;1339   */
;;;1340   void SEGGER_SYSVIEW_RecordU32x3(unsigned EventID, U32 Para0, U32 Para1, U32 Para2) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;1341     U8* pPayload;
;;;1342     U8* pPayloadStart;
;;;1343     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
00000c  f3ef8011          MRS      r0,BASEPRI
000010  4682              MOV      r10,r0
000012  2020              MOVS     r0,#0x20
000014  f3808811          MSR      BASEPRI,r0
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  481d              LDR      r0,|L40.148|
00001e  f7fffffe          BL       _PreparePacket
000022  4605              MOV      r5,r0
;;;1344     //
;;;1345     pPayload = pPayloadStart;
000024  462c              MOV      r4,r5
;;;1346     ENCODE_U32(pPayload, Para0);
000026  4620              MOV      r0,r4
000028  4639              MOV      r1,r7
00002a  e005              B        |L40.56|
                  |L40.44|
00002c  b2ca              UXTB     r2,r1
00002e  f0420280          ORR      r2,r2,#0x80
000032  f8002b01          STRB     r2,[r0],#1
000036  09c9              LSRS     r1,r1,#7
                  |L40.56|
000038  297f              CMP      r1,#0x7f
00003a  d8f7              BHI      |L40.44|
00003c  f8001b01          STRB     r1,[r0],#1
000040  4604              MOV      r4,r0
;;;1347     ENCODE_U32(pPayload, Para1);
000042  4620              MOV      r0,r4
000044  4641              MOV      r1,r8
000046  e005              B        |L40.84|
                  |L40.72|
000048  b2ca              UXTB     r2,r1
00004a  f0420280          ORR      r2,r2,#0x80
00004e  f8002b01          STRB     r2,[r0],#1
000052  09c9              LSRS     r1,r1,#7
                  |L40.84|
000054  297f              CMP      r1,#0x7f
000056  d8f7              BHI      |L40.72|
000058  f8001b01          STRB     r1,[r0],#1
00005c  4604              MOV      r4,r0
;;;1348     ENCODE_U32(pPayload, Para2);
00005e  4620              MOV      r0,r4
000060  4649              MOV      r1,r9
000062  e005              B        |L40.112|
                  |L40.100|
000064  b2ca              UXTB     r2,r1
000066  f0420280          ORR      r2,r2,#0x80
00006a  f8002b01          STRB     r2,[r0],#1
00006e  09c9              LSRS     r1,r1,#7
                  |L40.112|
000070  297f              CMP      r1,#0x7f
000072  d8f7              BHI      |L40.100|
000074  f8001b01          STRB     r1,[r0],#1
000078  4604              MOV      r4,r0
;;;1349     _SendPacket(pPayloadStart, pPayload, EventID);
00007a  4632              MOV      r2,r6
00007c  4621              MOV      r1,r4
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       _SendPacket
;;;1350     RECORD_END();
000084  f00a00ff          AND      r0,r10,#0xff
000088  f3808811          MSR      BASEPRI,r0
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;1351   }
000090  e8bd87f0          POP      {r4-r10,pc}
;;;1352   
                          ENDP

                  |L40.148|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x4||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x4 PROC
;;;1366   */
;;;1367   void SEGGER_SYSVIEW_RecordU32x4(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;1368     U8* pPayload;
;;;1369     U8* pPayloadStart;
;;;1370     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  4683              MOV      r11,r0
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4824              LDR      r0,|L41.180|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1371     //
;;;1372     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1373     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L41.60|
                  |L41.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L41.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L41.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1374     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L41.88|
                  |L41.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L41.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L41.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1375     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L41.116|
                  |L41.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L41.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L41.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1376     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L41.144|
                  |L41.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L41.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L41.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1377     _SendPacket(pPayloadStart, pPayload, EventID);
00009a  4632              MOV      r2,r6
00009c  4621              MOV      r1,r4
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       _SendPacket
;;;1378     RECORD_END();
0000a4  f00b00ff          AND      r0,r11,#0xff
0000a8  f3808811          MSR      BASEPRI,r0
0000ac  bf00              NOP      
0000ae  bf00              NOP      
;;;1379   }
0000b0  e8bd9ff0          POP      {r4-r12,pc}
;;;1380   
                          ENDP

                  |L41.180|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x5||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x5 PROC
;;;1395   */
;;;1396   void SEGGER_SYSVIEW_RecordU32x5(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1397     U8* pPayload;
;;;1398     U8* pPayloadStart;
;;;1399     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  482b              LDR      r0,|L42.208|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1400     //
;;;1401     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1402     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L42.60|
                  |L42.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L42.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L42.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1403     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L42.88|
                  |L42.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L42.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L42.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1404     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L42.116|
                  |L42.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L42.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L42.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1405     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L42.144|
                  |L42.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L42.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L42.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1406     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L42.172|
                  |L42.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L42.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L42.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1407     _SendPacket(pPayloadStart, pPayload, EventID);
0000b6  4632              MOV      r2,r6
0000b8  4621              MOV      r1,r4
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       _SendPacket
;;;1408     RECORD_END();
0000c0  9800              LDR      r0,[sp,#0]
0000c2  b2c0              UXTB     r0,r0
0000c4  f3808811          MSR      BASEPRI,r0
0000c8  bf00              NOP      
0000ca  bf00              NOP      
;;;1409   }
0000cc  e8bd8ff8          POP      {r3-r11,pc}
;;;1410   
                          ENDP

                  |L42.208|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x6||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x6 PROC
;;;1426   */
;;;1427   void SEGGER_SYSVIEW_RecordU32x6(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1428     U8* pPayload;
;;;1429     U8* pPayloadStart;
;;;1430     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 6 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4832              LDR      r0,|L43.236|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1431     //
;;;1432     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1433     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L43.60|
                  |L43.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L43.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L43.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1434     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L43.88|
                  |L43.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L43.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L43.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1435     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L43.116|
                  |L43.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L43.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L43.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1436     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L43.144|
                  |L43.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L43.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L43.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1437     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L43.172|
                  |L43.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L43.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L43.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1438     ENCODE_U32(pPayload, Para5);
0000b6  4620              MOV      r0,r4
0000b8  990c              LDR      r1,[sp,#0x30]
0000ba  e005              B        |L43.200|
                  |L43.188|
0000bc  b2ca              UXTB     r2,r1
0000be  f0420280          ORR      r2,r2,#0x80
0000c2  f8002b01          STRB     r2,[r0],#1
0000c6  09c9              LSRS     r1,r1,#7
                  |L43.200|
0000c8  297f              CMP      r1,#0x7f
0000ca  d8f7              BHI      |L43.188|
0000cc  f8001b01          STRB     r1,[r0],#1
0000d0  4604              MOV      r4,r0
;;;1439     _SendPacket(pPayloadStart, pPayload, EventID);
0000d2  4632              MOV      r2,r6
0000d4  4621              MOV      r1,r4
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       _SendPacket
;;;1440     RECORD_END();
0000dc  9800              LDR      r0,[sp,#0]
0000de  b2c0              UXTB     r0,r0
0000e0  f3808811          MSR      BASEPRI,r0
0000e4  bf00              NOP      
0000e6  bf00              NOP      
;;;1441   }
0000e8  e8bd8ff8          POP      {r3-r11,pc}
;;;1442   
                          ENDP

                  |L43.236|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x7||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x7 PROC
;;;1459   */
;;;1460   void SEGGER_SYSVIEW_RecordU32x7(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1461     U8* pPayload;
;;;1462     U8* pPayloadStart;
;;;1463     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 7 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4839              LDR      r0,|L44.264|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1464     //
;;;1465     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1466     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L44.60|
                  |L44.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L44.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L44.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1467     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L44.88|
                  |L44.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L44.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L44.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1468     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L44.116|
                  |L44.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L44.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L44.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1469     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L44.144|
                  |L44.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L44.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L44.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1470     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L44.172|
                  |L44.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L44.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L44.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1471     ENCODE_U32(pPayload, Para5);
0000b6  4620              MOV      r0,r4
0000b8  990c              LDR      r1,[sp,#0x30]
0000ba  e005              B        |L44.200|
                  |L44.188|
0000bc  b2ca              UXTB     r2,r1
0000be  f0420280          ORR      r2,r2,#0x80
0000c2  f8002b01          STRB     r2,[r0],#1
0000c6  09c9              LSRS     r1,r1,#7
                  |L44.200|
0000c8  297f              CMP      r1,#0x7f
0000ca  d8f7              BHI      |L44.188|
0000cc  f8001b01          STRB     r1,[r0],#1
0000d0  4604              MOV      r4,r0
;;;1472     ENCODE_U32(pPayload, Para6);
0000d2  4620              MOV      r0,r4
0000d4  990d              LDR      r1,[sp,#0x34]
0000d6  e005              B        |L44.228|
                  |L44.216|
0000d8  b2ca              UXTB     r2,r1
0000da  f0420280          ORR      r2,r2,#0x80
0000de  f8002b01          STRB     r2,[r0],#1
0000e2  09c9              LSRS     r1,r1,#7
                  |L44.228|
0000e4  297f              CMP      r1,#0x7f
0000e6  d8f7              BHI      |L44.216|
0000e8  f8001b01          STRB     r1,[r0],#1
0000ec  4604              MOV      r4,r0
;;;1473     _SendPacket(pPayloadStart, pPayload, EventID);
0000ee  4632              MOV      r2,r6
0000f0  4621              MOV      r1,r4
0000f2  4628              MOV      r0,r5
0000f4  f7fffffe          BL       _SendPacket
;;;1474     RECORD_END();
0000f8  9800              LDR      r0,[sp,#0]
0000fa  b2c0              UXTB     r0,r0
0000fc  f3808811          MSR      BASEPRI,r0
000100  bf00              NOP      
000102  bf00              NOP      
;;;1475   }
000104  e8bd8ff8          POP      {r3-r11,pc}
;;;1476   
                          ENDP

                  |L44.264|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x8||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x8 PROC
;;;1494   */
;;;1495   void SEGGER_SYSVIEW_RecordU32x8(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1496     U8* pPayload;
;;;1497     U8* pPayloadStart;
;;;1498     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 8 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4840              LDR      r0,|L45.292|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1499     //
;;;1500     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1501     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L45.60|
                  |L45.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L45.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L45.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1502     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L45.88|
                  |L45.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L45.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L45.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1503     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L45.116|
                  |L45.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L45.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L45.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1504     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L45.144|
                  |L45.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L45.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L45.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1505     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L45.172|
                  |L45.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L45.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L45.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1506     ENCODE_U32(pPayload, Para5);
0000b6  4620              MOV      r0,r4
0000b8  990c              LDR      r1,[sp,#0x30]
0000ba  e005              B        |L45.200|
                  |L45.188|
0000bc  b2ca              UXTB     r2,r1
0000be  f0420280          ORR      r2,r2,#0x80
0000c2  f8002b01          STRB     r2,[r0],#1
0000c6  09c9              LSRS     r1,r1,#7
                  |L45.200|
0000c8  297f              CMP      r1,#0x7f
0000ca  d8f7              BHI      |L45.188|
0000cc  f8001b01          STRB     r1,[r0],#1
0000d0  4604              MOV      r4,r0
;;;1507     ENCODE_U32(pPayload, Para6);
0000d2  4620              MOV      r0,r4
0000d4  990d              LDR      r1,[sp,#0x34]
0000d6  e005              B        |L45.228|
                  |L45.216|
0000d8  b2ca              UXTB     r2,r1
0000da  f0420280          ORR      r2,r2,#0x80
0000de  f8002b01          STRB     r2,[r0],#1
0000e2  09c9              LSRS     r1,r1,#7
                  |L45.228|
0000e4  297f              CMP      r1,#0x7f
0000e6  d8f7              BHI      |L45.216|
0000e8  f8001b01          STRB     r1,[r0],#1
0000ec  4604              MOV      r4,r0
;;;1508     ENCODE_U32(pPayload, Para7);
0000ee  4620              MOV      r0,r4
0000f0  990e              LDR      r1,[sp,#0x38]
0000f2  e005              B        |L45.256|
                  |L45.244|
0000f4  b2ca              UXTB     r2,r1
0000f6  f0420280          ORR      r2,r2,#0x80
0000fa  f8002b01          STRB     r2,[r0],#1
0000fe  09c9              LSRS     r1,r1,#7
                  |L45.256|
000100  297f              CMP      r1,#0x7f
000102  d8f7              BHI      |L45.244|
000104  f8001b01          STRB     r1,[r0],#1
000108  4604              MOV      r4,r0
;;;1509     _SendPacket(pPayloadStart, pPayload, EventID);
00010a  4632              MOV      r2,r6
00010c  4621              MOV      r1,r4
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       _SendPacket
;;;1510     RECORD_END();
000114  9800              LDR      r0,[sp,#0]
000116  b2c0              UXTB     r0,r0
000118  f3808811          MSR      BASEPRI,r0
00011c  bf00              NOP      
00011e  bf00              NOP      
;;;1511   }
000120  e8bd8ff8          POP      {r3-r11,pc}
;;;1512   
                          ENDP

                  |L45.292|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordU32x9||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordU32x9 PROC
;;;1531   */
;;;1532   void SEGGER_SYSVIEW_RecordU32x9(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7, U32 Para8) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1533     U8* pPayload;
;;;1534     U8* pPayloadStart;
;;;1535     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 9 * SEGGER_SYSVIEW_QUANTA_U32);
000010  f3ef8011          MRS      r0,BASEPRI
000014  9000              STR      r0,[sp,#0]
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4847              LDR      r0,|L46.320|
000022  f7fffffe          BL       _PreparePacket
000026  4605              MOV      r5,r0
;;;1536     //
;;;1537     pPayload = pPayloadStart;
000028  462c              MOV      r4,r5
;;;1538     ENCODE_U32(pPayload, Para0);
00002a  4620              MOV      r0,r4
00002c  4639              MOV      r1,r7
00002e  e005              B        |L46.60|
                  |L46.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L46.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L46.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;1539     ENCODE_U32(pPayload, Para1);
000046  4620              MOV      r0,r4
000048  4641              MOV      r1,r8
00004a  e005              B        |L46.88|
                  |L46.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L46.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L46.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;1540     ENCODE_U32(pPayload, Para2);
000062  4620              MOV      r0,r4
000064  4649              MOV      r1,r9
000066  e005              B        |L46.116|
                  |L46.104|
000068  b2ca              UXTB     r2,r1
00006a  f0420280          ORR      r2,r2,#0x80
00006e  f8002b01          STRB     r2,[r0],#1
000072  09c9              LSRS     r1,r1,#7
                  |L46.116|
000074  297f              CMP      r1,#0x7f
000076  d8f7              BHI      |L46.104|
000078  f8001b01          STRB     r1,[r0],#1
00007c  4604              MOV      r4,r0
;;;1541     ENCODE_U32(pPayload, Para3);
00007e  4620              MOV      r0,r4
000080  4651              MOV      r1,r10
000082  e005              B        |L46.144|
                  |L46.132|
000084  b2ca              UXTB     r2,r1
000086  f0420280          ORR      r2,r2,#0x80
00008a  f8002b01          STRB     r2,[r0],#1
00008e  09c9              LSRS     r1,r1,#7
                  |L46.144|
000090  297f              CMP      r1,#0x7f
000092  d8f7              BHI      |L46.132|
000094  f8001b01          STRB     r1,[r0],#1
000098  4604              MOV      r4,r0
;;;1542     ENCODE_U32(pPayload, Para4);
00009a  4620              MOV      r0,r4
00009c  4659              MOV      r1,r11
00009e  e005              B        |L46.172|
                  |L46.160|
0000a0  b2ca              UXTB     r2,r1
0000a2  f0420280          ORR      r2,r2,#0x80
0000a6  f8002b01          STRB     r2,[r0],#1
0000aa  09c9              LSRS     r1,r1,#7
                  |L46.172|
0000ac  297f              CMP      r1,#0x7f
0000ae  d8f7              BHI      |L46.160|
0000b0  f8001b01          STRB     r1,[r0],#1
0000b4  4604              MOV      r4,r0
;;;1543     ENCODE_U32(pPayload, Para5);
0000b6  4620              MOV      r0,r4
0000b8  990c              LDR      r1,[sp,#0x30]
0000ba  e005              B        |L46.200|
                  |L46.188|
0000bc  b2ca              UXTB     r2,r1
0000be  f0420280          ORR      r2,r2,#0x80
0000c2  f8002b01          STRB     r2,[r0],#1
0000c6  09c9              LSRS     r1,r1,#7
                  |L46.200|
0000c8  297f              CMP      r1,#0x7f
0000ca  d8f7              BHI      |L46.188|
0000cc  f8001b01          STRB     r1,[r0],#1
0000d0  4604              MOV      r4,r0
;;;1544     ENCODE_U32(pPayload, Para6);
0000d2  4620              MOV      r0,r4
0000d4  990d              LDR      r1,[sp,#0x34]
0000d6  e005              B        |L46.228|
                  |L46.216|
0000d8  b2ca              UXTB     r2,r1
0000da  f0420280          ORR      r2,r2,#0x80
0000de  f8002b01          STRB     r2,[r0],#1
0000e2  09c9              LSRS     r1,r1,#7
                  |L46.228|
0000e4  297f              CMP      r1,#0x7f
0000e6  d8f7              BHI      |L46.216|
0000e8  f8001b01          STRB     r1,[r0],#1
0000ec  4604              MOV      r4,r0
;;;1545     ENCODE_U32(pPayload, Para7);
0000ee  4620              MOV      r0,r4
0000f0  990e              LDR      r1,[sp,#0x38]
0000f2  e005              B        |L46.256|
                  |L46.244|
0000f4  b2ca              UXTB     r2,r1
0000f6  f0420280          ORR      r2,r2,#0x80
0000fa  f8002b01          STRB     r2,[r0],#1
0000fe  09c9              LSRS     r1,r1,#7
                  |L46.256|
000100  297f              CMP      r1,#0x7f
000102  d8f7              BHI      |L46.244|
000104  f8001b01          STRB     r1,[r0],#1
000108  4604              MOV      r4,r0
;;;1546     ENCODE_U32(pPayload, Para8);
00010a  4620              MOV      r0,r4
00010c  990f              LDR      r1,[sp,#0x3c]
00010e  e005              B        |L46.284|
                  |L46.272|
000110  b2ca              UXTB     r2,r1
000112  f0420280          ORR      r2,r2,#0x80
000116  f8002b01          STRB     r2,[r0],#1
00011a  09c9              LSRS     r1,r1,#7
                  |L46.284|
00011c  297f              CMP      r1,#0x7f
00011e  d8f7              BHI      |L46.272|
000120  f8001b01          STRB     r1,[r0],#1
000124  4604              MOV      r4,r0
;;;1547     _SendPacket(pPayloadStart, pPayload, EventID);
000126  4632              MOV      r2,r6
000128  4621              MOV      r1,r4
00012a  4628              MOV      r0,r5
00012c  f7fffffe          BL       _SendPacket
;;;1548     RECORD_END();
000130  9800              LDR      r0,[sp,#0]
000132  b2c0              UXTB     r0,r0
000134  f3808811          MSR      BASEPRI,r0
000138  bf00              NOP      
00013a  bf00              NOP      
;;;1549   }
00013c  e8bd8ff8          POP      {r3-r11,pc}
;;;1550   
                          ENDP

                  |L46.320|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RecordVoid||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RecordVoid PROC
;;;1271   */
;;;1272   void SEGGER_SYSVIEW_RecordVoid(unsigned EventID) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;1273     U8* pPayloadStart;
;;;1274     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000004  f3ef8011          MRS      r0,BASEPRI
000008  4605              MOV      r5,r0
00000a  2020              MOVS     r0,#0x20
00000c  f3808811          MSR      BASEPRI,r0
000010  bf00              NOP      
000012  bf00              NOP      
000014  4807              LDR      r0,|L47.52|
000016  f7fffffe          BL       _PreparePacket
00001a  4606              MOV      r6,r0
;;;1275     //
;;;1276     _SendPacket(pPayloadStart, pPayloadStart, EventID);
00001c  4622              MOV      r2,r4
00001e  4631              MOV      r1,r6
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       _SendPacket
;;;1277     RECORD_END();
000026  b2e8              UXTB     r0,r5
000028  f3808811          MSR      BASEPRI,r0
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;1278   }
000030  bd70              POP      {r4-r6,pc}
;;;1279   
                          ENDP

000032  0000              DCW      0x0000
                  |L47.52|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_RegisterModule||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_RegisterModule PROC
;;;2347   */
;;;2348   void SEGGER_SYSVIEW_RegisterModule(SEGGER_SYSVIEW_MODULE* pModule) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;2349     SEGGER_SYSVIEW_LOCK();
000004  f3ef8011          MRS      r0,BASEPRI
000008  4605              MOV      r5,r0
00000a  2020              MOVS     r0,#0x20
00000c  f3808811          MSR      BASEPRI,r0
000010  bf00              NOP      
000012  bf00              NOP      
;;;2350     if (_pFirstModule == 0) {
000014  4816              LDR      r0,|L48.112|
000016  6800              LDR      r0,[r0,#0]  ; _pFirstModule
000018  b950              CBNZ     r0,|L48.48|
;;;2351       //
;;;2352       // No module registered, yet.
;;;2353       // Start list with new module.
;;;2354       // EventOffset is the base offset for modules
;;;2355       //
;;;2356       pModule->EventOffset = MODULE_EVENT_OFFSET;
00001a  f44f7000          MOV      r0,#0x200
00001e  60a0              STR      r0,[r4,#8]
;;;2357       pModule->pNext = 0;
000020  2000              MOVS     r0,#0
000022  6120              STR      r0,[r4,#0x10]
;;;2358       _pFirstModule = pModule;
000024  4812              LDR      r0,|L48.112|
000026  6004              STR      r4,[r0,#0]  ; _pFirstModule
;;;2359       _NumModules = 1;
000028  2001              MOVS     r0,#1
00002a  4912              LDR      r1,|L48.116|
00002c  7008              STRB     r0,[r1,#0]
00002e  e011              B        |L48.84|
                  |L48.48|
;;;2360     } else {
;;;2361       //
;;;2362       // Registreded module(s) present.
;;;2363       // Prepend new module in list.
;;;2364       // EventOffset set from number of events and offset of previous module.
;;;2365       //
;;;2366       pModule->EventOffset = _pFirstModule->EventOffset + _pFirstModule->NumEvents;
000030  480f              LDR      r0,|L48.112|
000032  6800              LDR      r0,[r0,#0]  ; _pFirstModule
000034  6880              LDR      r0,[r0,#8]
000036  490e              LDR      r1,|L48.112|
000038  6809              LDR      r1,[r1,#0]  ; _pFirstModule
00003a  6849              LDR      r1,[r1,#4]
00003c  4408              ADD      r0,r0,r1
00003e  60a0              STR      r0,[r4,#8]
;;;2367       pModule->pNext = _pFirstModule;
000040  480b              LDR      r0,|L48.112|
000042  6800              LDR      r0,[r0,#0]  ; _pFirstModule
000044  6120              STR      r0,[r4,#0x10]
;;;2368       _pFirstModule = pModule;
000046  480a              LDR      r0,|L48.112|
000048  6004              STR      r4,[r0,#0]  ; _pFirstModule
;;;2369       _NumModules++;
00004a  480a              LDR      r0,|L48.116|
00004c  7800              LDRB     r0,[r0,#0]  ; _NumModules
00004e  1c40              ADDS     r0,r0,#1
000050  4908              LDR      r1,|L48.116|
000052  7008              STRB     r0,[r1,#0]
                  |L48.84|
;;;2370     }
;;;2371     SEGGER_SYSVIEW_SendModule(0);
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       SEGGER_SYSVIEW_SendModule
;;;2372     if (pModule->pfSendModuleDesc) {
00005a  68e0              LDR      r0,[r4,#0xc]
00005c  b108              CBZ      r0,|L48.98|
;;;2373       pModule->pfSendModuleDesc();
00005e  68e0              LDR      r0,[r4,#0xc]
000060  4780              BLX      r0
                  |L48.98|
;;;2374     }
;;;2375     SEGGER_SYSVIEW_UNLOCK();
000062  b2e8              UXTB     r0,r5
000064  f3808811          MSR      BASEPRI,r0
000068  bf00              NOP      
00006a  bf00              NOP      
;;;2376   }
00006c  bd70              POP      {r4-r6,pc}
;;;2377   
                          ENDP

00006e  0000              DCW      0x0000
                  |L48.112|
                          DCD      _pFirstModule
                  |L48.116|
                          DCD      _NumModules

                          AREA ||i.SEGGER_SYSVIEW_SendModule||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendModule PROC
;;;2429   */
;;;2430   void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
;;;2431     SEGGER_SYSVIEW_MODULE* pModule;
;;;2432     U32 n;
;;;2433   
;;;2434     if (_pFirstModule != 0) {
000006  4827              LDR      r0,|L49.164|
000008  6800              LDR      r0,[r0,#0]  ; _pFirstModule
00000a  2800              CMP      r0,#0
00000c  d047              BEQ      |L49.158|
;;;2435       pModule = _pFirstModule;
00000e  4825              LDR      r0,|L49.164|
000010  6804              LDR      r4,[r0,#0]  ; _pFirstModule
;;;2436       for (n = 0; n < ModuleId; n++) {
000012  2700              MOVS     r7,#0
000014  e003              B        |L49.30|
                  |L49.22|
;;;2437         pModule = pModule->pNext;
000016  6924              LDR      r4,[r4,#0x10]
;;;2438         if (pModule == 0) {
000018  b904              CBNZ     r4,|L49.28|
;;;2439           break;
00001a  e002              B        |L49.34|
                  |L49.28|
00001c  1c7f              ADDS     r7,r7,#1              ;2436
                  |L49.30|
00001e  42b7              CMP      r7,r6                 ;2436
000020  d3f9              BCC      |L49.22|
                  |L49.34|
000022  bf00              NOP      
;;;2440         }
;;;2441       }
;;;2442       if (pModule != 0) {
000024  2c00              CMP      r4,#0
000026  d03a              BEQ      |L49.158|
;;;2443         U8* pPayload;
;;;2444         U8* pPayloadStart;
;;;2445         RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000028  f3ef8011          MRS      r0,BASEPRI
00002c  4681              MOV      r9,r0
00002e  2020              MOVS     r0,#0x20
000030  f3808811          MSR      BASEPRI,r0
000034  bf00              NOP      
000036  bf00              NOP      
000038  481b              LDR      r0,|L49.168|
00003a  f7fffffe          BL       _PreparePacket
00003e  4680              MOV      r8,r0
;;;2446         //
;;;2447         pPayload = pPayloadStart;
000040  4645              MOV      r5,r8
;;;2448         //
;;;2449         // Send module description
;;;2450         // Send event offset and number of events
;;;2451         //
;;;2452         ENCODE_U32(pPayload, ModuleId);
000042  4628              MOV      r0,r5
000044  4631              MOV      r1,r6
000046  e005              B        |L49.84|
                  |L49.72|
000048  b2ca              UXTB     r2,r1
00004a  f0420280          ORR      r2,r2,#0x80
00004e  f8002b01          STRB     r2,[r0],#1
000052  09c9              LSRS     r1,r1,#7
                  |L49.84|
000054  297f              CMP      r1,#0x7f
000056  d8f7              BHI      |L49.72|
000058  f8001b01          STRB     r1,[r0],#1
00005c  4605              MOV      r5,r0
;;;2453         ENCODE_U32(pPayload, (pModule->EventOffset));
00005e  4628              MOV      r0,r5
000060  68a1              LDR      r1,[r4,#8]
000062  e005              B        |L49.112|
                  |L49.100|
000064  b2ca              UXTB     r2,r1
000066  f0420280          ORR      r2,r2,#0x80
00006a  f8002b01          STRB     r2,[r0],#1
00006e  09c9              LSRS     r1,r1,#7
                  |L49.112|
000070  297f              CMP      r1,#0x7f
000072  d8f7              BHI      |L49.100|
000074  f8001b01          STRB     r1,[r0],#1
000078  4605              MOV      r5,r0
;;;2454         pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
00007a  2280              MOVS     r2,#0x80
00007c  4628              MOV      r0,r5
00007e  6821              LDR      r1,[r4,#0]
000080  f7fffffe          BL       _EncodeStr
000084  4605              MOV      r5,r0
;;;2455         _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
000086  2216              MOVS     r2,#0x16
000088  4629              MOV      r1,r5
00008a  4640              MOV      r0,r8
00008c  f7fffffe          BL       _SendPacket
;;;2456         RECORD_END();
000090  f00900ff          AND      r0,r9,#0xff
000094  f3808811          MSR      BASEPRI,r0
000098  bf00              NOP      
00009a  bf00              NOP      
;;;2457       }
00009c  bf00              NOP      
                  |L49.158|
;;;2458     }
;;;2459   }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;2460   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L49.164|
                          DCD      _pFirstModule
                  |L49.168|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_SendModuleDescription||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendModuleDescription PROC
;;;2468   */
;;;2469   void SEGGER_SYSVIEW_SendModuleDescription(void) {
000000  b510              PUSH     {r4,lr}
;;;2470     SEGGER_SYSVIEW_MODULE* pModule;
;;;2471   
;;;2472     if (_pFirstModule != 0) {
000002  4807              LDR      r0,|L50.32|
000004  6800              LDR      r0,[r0,#0]  ; _pFirstModule
000006  b148              CBZ      r0,|L50.28|
;;;2473       pModule = _pFirstModule;
000008  4805              LDR      r0,|L50.32|
00000a  6804              LDR      r4,[r0,#0]  ; _pFirstModule
;;;2474       do {
00000c  bf00              NOP      
                  |L50.14|
;;;2475         if (pModule->pfSendModuleDesc) {
00000e  68e0              LDR      r0,[r4,#0xc]
000010  b108              CBZ      r0,|L50.22|
;;;2476           pModule->pfSendModuleDesc();
000012  68e0              LDR      r0,[r4,#0xc]
000014  4780              BLX      r0
                  |L50.22|
;;;2477         }
;;;2478         pModule = pModule->pNext;
000016  6924              LDR      r4,[r4,#0x10]
;;;2479       } while (pModule);
000018  2c00              CMP      r4,#0
00001a  d1f8              BNE      |L50.14|
                  |L50.28|
;;;2480     }
;;;2481   }
00001c  bd10              POP      {r4,pc}
;;;2482   
                          ENDP

00001e  0000              DCW      0x0000
                  |L50.32|
                          DCD      _pFirstModule

                          AREA ||i.SEGGER_SYSVIEW_SendNumModules||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendNumModules PROC
;;;2489   */
;;;2490   void SEGGER_SYSVIEW_SendNumModules(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;2491     U8* pPayload;
;;;2492     U8* pPayloadStart;
;;;2493     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4606              MOV      r6,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  480f              LDR      r0,|L51.80|
000014  f7fffffe          BL       _PreparePacket
000018  4604              MOV      r4,r0
;;;2494     pPayload = pPayloadStart;
00001a  4625              MOV      r5,r4
;;;2495     ENCODE_U32(pPayload, _NumModules);
00001c  4628              MOV      r0,r5
00001e  4a0d              LDR      r2,|L51.84|
000020  7811              LDRB     r1,[r2,#0]  ; _NumModules
000022  e005              B        |L51.48|
                  |L51.36|
000024  b2ca              UXTB     r2,r1
000026  f0420280          ORR      r2,r2,#0x80
00002a  f8002b01          STRB     r2,[r0],#1
00002e  09c9              LSRS     r1,r1,#7
                  |L51.48|
000030  297f              CMP      r1,#0x7f
000032  d8f7              BHI      |L51.36|
000034  f8001b01          STRB     r1,[r0],#1
000038  4605              MOV      r5,r0
;;;2496     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
00003a  221b              MOVS     r2,#0x1b
00003c  4629              MOV      r1,r5
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       _SendPacket
;;;2497     RECORD_END();
000044  b2f0              UXTB     r0,r6
000046  f3808811          MSR      BASEPRI,r0
00004a  bf00              NOP      
00004c  bf00              NOP      
;;;2498   }
00004e  bd70              POP      {r4-r6,pc}
;;;2499   
                          ENDP

                  |L51.80|
                          DCD      _aPacket
                  |L51.84|
                          DCD      _NumModules

                          AREA ||i.SEGGER_SYSVIEW_SendPacket||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_SendPacket PROC
;;;2189   */
;;;2190   int SEGGER_SYSVIEW_SendPacket(U8* pPacket, U8* pPayloadEnd, unsigned EventId) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;2191   #if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 1)
;;;2192     SEGGER_SYSVIEW_LOCK();
00000a  f3ef8011          MRS      r0,BASEPRI
00000e  4607              MOV      r7,r0
000010  2020              MOVS     r0,#0x20
000012  f3808811          MSR      BASEPRI,r0
000016  bf00              NOP      
000018  bf00              NOP      
;;;2193   #endif
;;;2194     _SendPacket(pPacket + 4, pPayloadEnd, EventId);
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  1d20              ADDS     r0,r4,#4
000020  f7fffffe          BL       _SendPacket
;;;2195   #if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 1)
;;;2196     SEGGER_SYSVIEW_UNLOCK();
000024  b2f8              UXTB     r0,r7
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;2197   #endif
;;;2198     return 0;
00002e  2000              MOVS     r0,#0
;;;2199   }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;2200   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_SendSysDesc||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendSysDesc PROC
;;;1779   */
;;;1780   void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;1781     U8* pPayload;
;;;1782     U8* pPayloadStart;
;;;1783     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4605              MOV      r5,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  480b              LDR      r0,|L53.68|
000018  f7fffffe          BL       _PreparePacket
00001c  4607              MOV      r7,r0
;;;1784     //
;;;1785     pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
00001e  2280              MOVS     r2,#0x80
000020  4621              MOV      r1,r4
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       _EncodeStr
000028  4606              MOV      r6,r0
;;;1786     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
00002a  220e              MOVS     r2,#0xe
00002c  4631              MOV      r1,r6
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       _SendPacket
;;;1787     RECORD_END();
000034  b2e8              UXTB     r0,r5
000036  f3808811          MSR      BASEPRI,r0
00003a  bf00              NOP      
00003c  bf00              NOP      
;;;1788   }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;1789   
                          ENDP

000042  0000              DCW      0x0000
                  |L53.68|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_SendTaskInfo||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendTaskInfo PROC
;;;1727   */
;;;1728   void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;1729     U8* pPayload;
;;;1730     U8* pPayloadStart;
;;;1731     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4607              MOV      r7,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  483c              LDR      r0,|L54.264|
000018  f7fffffe          BL       _PreparePacket
00001c  4606              MOV      r6,r0
;;;1732     //
;;;1733     pPayload = pPayloadStart;
00001e  4634              MOV      r4,r6
;;;1734     ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
000020  4620              MOV      r0,r4
000022  4b3a              LDR      r3,|L54.268|
000024  682a              LDR      r2,[r5,#0]
000026  691b              LDR      r3,[r3,#0x10]  ; _SYSVIEW_Globals
000028  1ad2              SUBS     r2,r2,r3
00002a  0891              LSRS     r1,r2,#2
00002c  e005              B        |L54.58|
                  |L54.46|
00002e  b2ca              UXTB     r2,r1
000030  f0420280          ORR      r2,r2,#0x80
000034  f8002b01          STRB     r2,[r0],#1
000038  09c9              LSRS     r1,r1,#7
                  |L54.58|
00003a  297f              CMP      r1,#0x7f
00003c  d8f7              BHI      |L54.46|
00003e  f8001b01          STRB     r1,[r0],#1
000042  4604              MOV      r4,r0
;;;1735     ENCODE_U32(pPayload, pInfo->Prio);
000044  4620              MOV      r0,r4
000046  68a9              LDR      r1,[r5,#8]
000048  e005              B        |L54.86|
                  |L54.74|
00004a  b2ca              UXTB     r2,r1
00004c  f0420280          ORR      r2,r2,#0x80
000050  f8002b01          STRB     r2,[r0],#1
000054  09c9              LSRS     r1,r1,#7
                  |L54.86|
000056  297f              CMP      r1,#0x7f
000058  d8f7              BHI      |L54.74|
00005a  f8001b01          STRB     r1,[r0],#1
00005e  4604              MOV      r4,r0
;;;1736     pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
000060  2220              MOVS     r2,#0x20
000062  4620              MOV      r0,r4
000064  6869              LDR      r1,[r5,#4]
000066  f7fffffe          BL       _EncodeStr
00006a  4604              MOV      r4,r0
;;;1737     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
00006c  2209              MOVS     r2,#9
00006e  4621              MOV      r1,r4
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       _SendPacket
;;;1738     //
;;;1739     pPayload = pPayloadStart;
000076  4634              MOV      r4,r6
;;;1740     ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
000078  4620              MOV      r0,r4
00007a  4b24              LDR      r3,|L54.268|
00007c  682a              LDR      r2,[r5,#0]
00007e  691b              LDR      r3,[r3,#0x10]  ; _SYSVIEW_Globals
000080  1ad2              SUBS     r2,r2,r3
000082  0891              LSRS     r1,r2,#2
000084  e005              B        |L54.146|
                  |L54.134|
000086  b2ca              UXTB     r2,r1
000088  f0420280          ORR      r2,r2,#0x80
00008c  f8002b01          STRB     r2,[r0],#1
000090  09c9              LSRS     r1,r1,#7
                  |L54.146|
000092  297f              CMP      r1,#0x7f
000094  d8f7              BHI      |L54.134|
000096  f8001b01          STRB     r1,[r0],#1
00009a  4604              MOV      r4,r0
;;;1741     ENCODE_U32(pPayload, pInfo->StackBase);
00009c  4620              MOV      r0,r4
00009e  68e9              LDR      r1,[r5,#0xc]
0000a0  e005              B        |L54.174|
                  |L54.162|
0000a2  b2ca              UXTB     r2,r1
0000a4  f0420280          ORR      r2,r2,#0x80
0000a8  f8002b01          STRB     r2,[r0],#1
0000ac  09c9              LSRS     r1,r1,#7
                  |L54.174|
0000ae  297f              CMP      r1,#0x7f
0000b0  d8f7              BHI      |L54.162|
0000b2  f8001b01          STRB     r1,[r0],#1
0000b6  4604              MOV      r4,r0
;;;1742     ENCODE_U32(pPayload, pInfo->StackSize);
0000b8  4620              MOV      r0,r4
0000ba  6929              LDR      r1,[r5,#0x10]
0000bc  e005              B        |L54.202|
                  |L54.190|
0000be  b2ca              UXTB     r2,r1
0000c0  f0420280          ORR      r2,r2,#0x80
0000c4  f8002b01          STRB     r2,[r0],#1
0000c8  09c9              LSRS     r1,r1,#7
                  |L54.202|
0000ca  297f              CMP      r1,#0x7f
0000cc  d8f7              BHI      |L54.190|
0000ce  f8001b01          STRB     r1,[r0],#1
0000d2  4604              MOV      r4,r0
;;;1743     ENCODE_U32(pPayload, 0); // Stack End, future use
0000d4  4620              MOV      r0,r4
0000d6  2100              MOVS     r1,#0
0000d8  e005              B        |L54.230|
                  |L54.218|
0000da  b2ca              UXTB     r2,r1
0000dc  f0420280          ORR      r2,r2,#0x80
0000e0  f8002b01          STRB     r2,[r0],#1
0000e4  09c9              LSRS     r1,r1,#7
                  |L54.230|
0000e6  297f              CMP      r1,#0x7f
0000e8  d8f7              BHI      |L54.218|
0000ea  f8001b01          STRB     r1,[r0],#1
0000ee  4604              MOV      r4,r0
;;;1744     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
0000f0  2215              MOVS     r2,#0x15
0000f2  4621              MOV      r1,r4
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       _SendPacket
;;;1745     RECORD_END();
0000fa  b2f8              UXTB     r0,r7
0000fc  f3808811          MSR      BASEPRI,r0
000100  bf00              NOP      
000102  bf00              NOP      
;;;1746   }
000104  e8bd81f0          POP      {r4-r8,pc}
;;;1747   
                          ENDP

                  |L54.264|
                          DCD      _aPacket
                  |L54.268|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_SendTaskList||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SendTaskList PROC
;;;1754   */
;;;1755   void SEGGER_SYSVIEW_SendTaskList(void) {
000000  b510              PUSH     {r4,lr}
;;;1756     if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
000002  4806              LDR      r0,|L55.28|
000004  6a00              LDR      r0,[r0,#0x20]  ; _SYSVIEW_Globals
000006  b138              CBZ      r0,|L55.24|
000008  4804              LDR      r0,|L55.28|
00000a  6a00              LDR      r0,[r0,#0x20]  ; _SYSVIEW_Globals
00000c  6840              LDR      r0,[r0,#4]
00000e  b118              CBZ      r0,|L55.24|
;;;1757       _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
000010  4902              LDR      r1,|L55.28|
000012  6a09              LDR      r1,[r1,#0x20]  ; _SYSVIEW_Globals
000014  6848              LDR      r0,[r1,#4]
000016  4780              BLX      r0
                  |L55.24|
;;;1758     }
;;;1759   }
000018  bd10              POP      {r4,pc}
;;;1760   
                          ENDP

00001a  0000              DCW      0x0000
                  |L55.28|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_SetRAMBase||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_SetRAMBase PROC
;;;1257   */
;;;1258   void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
000000  4901              LDR      r1,|L56.8|
;;;1259     _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
000002  6108              STR      r0,[r1,#0x10]  ; _SYSVIEW_Globals
;;;1260   }
000004  4770              BX       lr
;;;1261   
                          ENDP

000006  0000              DCW      0x0000
                  |L56.8|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_ShrinkId||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_ShrinkId PROC
;;;2325   */
;;;2326   U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
000000  4601              MOV      r1,r0
;;;2327     return SHRINK_ID(Id);
000002  4802              LDR      r0,|L57.12|
000004  6900              LDR      r0,[r0,#0x10]  ; _SYSVIEW_Globals
000006  1a08              SUBS     r0,r1,r0
000008  0880              LSRS     r0,r0,#2
;;;2328   }
00000a  4770              BX       lr
;;;2329   
                          ENDP

                  |L57.12|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_Start||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Start PROC
;;;1634   */
;;;1635   void SEGGER_SYSVIEW_Start(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1636     if (_SYSVIEW_Globals.EnableState == 0) {
000002  483d              LDR      r0,|L58.248|
000004  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
000006  2800              CMP      r0,#0
000008  d175              BNE      |L58.246|
;;;1637       _SYSVIEW_Globals.EnableState = 1;
00000a  2001              MOVS     r0,#1
00000c  493a              LDR      r1,|L58.248|
00000e  7008              STRB     r0,[r1,#0]
;;;1638   #if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;1639       _SendSyncInfo();
;;;1640   #else
;;;1641       SEGGER_SYSVIEW_LOCK();
000010  f3ef8011          MRS      r0,BASEPRI
000014  4604              MOV      r4,r0
000016  2020              MOVS     r0,#0x20
000018  f3808811          MSR      BASEPRI,r0
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;1642       SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
000020  220a              MOVS     r2,#0xa
000022  4936              LDR      r1,|L58.252|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       SEGGER_RTT_WriteSkipNoLock
;;;1643       SEGGER_SYSVIEW_UNLOCK();
00002a  b2e0              UXTB     r0,r4
00002c  f3808811          MSR      BASEPRI,r0
000030  bf00              NOP      
000032  bf00              NOP      
;;;1644       SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       SEGGER_SYSVIEW_RecordVoid
;;;1645       {
;;;1646         U8* pPayload;
;;;1647         U8* pPayloadStart;
;;;1648         RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
00003a  f3ef8011          MRS      r0,BASEPRI
00003e  4606              MOV      r6,r0
000040  2020              MOVS     r0,#0x20
000042  f3808811          MSR      BASEPRI,r0
000046  bf00              NOP      
000048  bf00              NOP      
00004a  482d              LDR      r0,|L58.256|
00004c  f7fffffe          BL       _PreparePacket
000050  4605              MOV      r5,r0
;;;1649         //
;;;1650         pPayload = pPayloadStart;
000052  462c              MOV      r4,r5
;;;1651         ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
000054  4620              MOV      r0,r4
000056  4a28              LDR      r2,|L58.248|
000058  6851              LDR      r1,[r2,#4]  ; _SYSVIEW_Globals
00005a  e005              B        |L58.104|
                  |L58.92|
00005c  b2ca              UXTB     r2,r1
00005e  f0420280          ORR      r2,r2,#0x80
000062  f8002b01          STRB     r2,[r0],#1
000066  09c9              LSRS     r1,r1,#7
                  |L58.104|
000068  297f              CMP      r1,#0x7f
00006a  d8f7              BHI      |L58.92|
00006c  f8001b01          STRB     r1,[r0],#1
000070  4604              MOV      r4,r0
;;;1652         ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
000072  4620              MOV      r0,r4
000074  4a20              LDR      r2,|L58.248|
000076  6891              LDR      r1,[r2,#8]  ; _SYSVIEW_Globals
000078  e005              B        |L58.134|
                  |L58.122|
00007a  b2ca              UXTB     r2,r1
00007c  f0420280          ORR      r2,r2,#0x80
000080  f8002b01          STRB     r2,[r0],#1
000084  09c9              LSRS     r1,r1,#7
                  |L58.134|
000086  297f              CMP      r1,#0x7f
000088  d8f7              BHI      |L58.122|
00008a  f8001b01          STRB     r1,[r0],#1
00008e  4604              MOV      r4,r0
;;;1653         ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
000090  4620              MOV      r0,r4
000092  4a19              LDR      r2,|L58.248|
000094  6911              LDR      r1,[r2,#0x10]  ; _SYSVIEW_Globals
000096  e005              B        |L58.164|
                  |L58.152|
000098  b2ca              UXTB     r2,r1
00009a  f0420280          ORR      r2,r2,#0x80
00009e  f8002b01          STRB     r2,[r0],#1
0000a2  09c9              LSRS     r1,r1,#7
                  |L58.164|
0000a4  297f              CMP      r1,#0x7f
0000a6  d8f7              BHI      |L58.152|
0000a8  f8001b01          STRB     r1,[r0],#1
0000ac  4604              MOV      r4,r0
;;;1654         ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
0000ae  4620              MOV      r0,r4
0000b0  2102              MOVS     r1,#2
0000b2  e005              B        |L58.192|
                  |L58.180|
0000b4  b2ca              UXTB     r2,r1
0000b6  f0420280          ORR      r2,r2,#0x80
0000ba  f8002b01          STRB     r2,[r0],#1
0000be  09c9              LSRS     r1,r1,#7
                  |L58.192|
0000c0  297f              CMP      r1,#0x7f
0000c2  d8f7              BHI      |L58.180|
0000c4  f8001b01          STRB     r1,[r0],#1
0000c8  4604              MOV      r4,r0
;;;1655         _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
0000ca  2218              MOVS     r2,#0x18
0000cc  4621              MOV      r1,r4
0000ce  4628              MOV      r0,r5
0000d0  f7fffffe          BL       _SendPacket
;;;1656         RECORD_END();
0000d4  b2f0              UXTB     r0,r6
0000d6  f3808811          MSR      BASEPRI,r0
0000da  bf00              NOP      
0000dc  bf00              NOP      
;;;1657       }
;;;1658       if (_SYSVIEW_Globals.pfSendSysDesc) {
0000de  4806              LDR      r0,|L58.248|
0000e0  6a40              LDR      r0,[r0,#0x24]  ; _SYSVIEW_Globals
0000e2  b110              CBZ      r0,|L58.234|
;;;1659         _SYSVIEW_Globals.pfSendSysDesc();
0000e4  4904              LDR      r1,|L58.248|
0000e6  6a48              LDR      r0,[r1,#0x24]  ; _SYSVIEW_Globals
0000e8  4780              BLX      r0
                  |L58.234|
;;;1660       }
;;;1661       SEGGER_SYSVIEW_RecordSystime();
0000ea  f7fffffe          BL       SEGGER_SYSVIEW_RecordSystime
;;;1662       SEGGER_SYSVIEW_SendTaskList();
0000ee  f7fffffe          BL       SEGGER_SYSVIEW_SendTaskList
;;;1663       SEGGER_SYSVIEW_SendNumModules();
0000f2  f7fffffe          BL       SEGGER_SYSVIEW_SendNumModules
                  |L58.246|
;;;1664   #endif
;;;1665     }
;;;1666   }
0000f6  bd70              POP      {r4-r6,pc}
;;;1667   
                          ENDP

                  |L58.248|
                          DCD      _SYSVIEW_Globals
                  |L58.252|
                          DCD      _abSync
                  |L58.256|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_Stop||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Stop PROC
;;;1680   */
;;;1681   void SEGGER_SYSVIEW_Stop(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1682     U8* pPayloadStart;
;;;1683     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
000002  f3ef8011          MRS      r0,BASEPRI
000006  4605              MOV      r5,r0
000008  2020              MOVS     r0,#0x20
00000a  f3808811          MSR      BASEPRI,r0
00000e  bf00              NOP      
000010  bf00              NOP      
000012  480a              LDR      r0,|L59.60|
000014  f7fffffe          BL       _PreparePacket
000018  4604              MOV      r4,r0
;;;1684     //
;;;1685     if (_SYSVIEW_Globals.EnableState) {
00001a  4809              LDR      r0,|L59.64|
00001c  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
00001e  b138              CBZ      r0,|L59.48|
;;;1686       _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
000020  220b              MOVS     r2,#0xb
000022  4621              MOV      r1,r4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _SendPacket
;;;1687       _SYSVIEW_Globals.EnableState = 0;
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L59.64|
00002e  7008              STRB     r0,[r1,#0]
                  |L59.48|
;;;1688     }
;;;1689     RECORD_END();
000030  b2e8              UXTB     r0,r5
000032  f3808811          MSR      BASEPRI,r0
000036  bf00              NOP      
000038  bf00              NOP      
;;;1690   }
00003a  bd70              POP      {r4-r6,pc}
;;;1691   
                          ENDP

                  |L59.60|
                          DCD      _aPacket
                  |L59.64|
                          DCD      _SYSVIEW_Globals

                          AREA ||i.SEGGER_SYSVIEW_Warn||, CODE, READONLY, ALIGN=2

                  SEGGER_SYSVIEW_Warn PROC
;;;2699   */
;;;2700   void SEGGER_SYSVIEW_Warn(const char* s) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;2701     U8* pPayload;
;;;2702     U8* pPayloadStart;
;;;2703     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
000006  f3ef8011          MRS      r0,BASEPRI
00000a  4606              MOV      r6,r0
00000c  2020              MOVS     r0,#0x20
00000e  f3808811          MSR      BASEPRI,r0
000012  bf00              NOP      
000014  bf00              NOP      
000016  4819              LDR      r0,|L60.124|
000018  f7fffffe          BL       _PreparePacket
00001c  4607              MOV      r7,r0
;;;2704     //
;;;2705     pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
00001e  2280              MOVS     r2,#0x80
000020  4629              MOV      r1,r5
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       _EncodeStr
000028  4604              MOV      r4,r0
;;;2706     ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
00002a  4620              MOV      r0,r4
00002c  2101              MOVS     r1,#1
00002e  e005              B        |L60.60|
                  |L60.48|
000030  b2ca              UXTB     r2,r1
000032  f0420280          ORR      r2,r2,#0x80
000036  f8002b01          STRB     r2,[r0],#1
00003a  09c9              LSRS     r1,r1,#7
                  |L60.60|
00003c  297f              CMP      r1,#0x7f
00003e  d8f7              BHI      |L60.48|
000040  f8001b01          STRB     r1,[r0],#1
000044  4604              MOV      r4,r0
;;;2707     ENCODE_U32(pPayload, 0);
000046  4620              MOV      r0,r4
000048  2100              MOVS     r1,#0
00004a  e005              B        |L60.88|
                  |L60.76|
00004c  b2ca              UXTB     r2,r1
00004e  f0420280          ORR      r2,r2,#0x80
000052  f8002b01          STRB     r2,[r0],#1
000056  09c9              LSRS     r1,r1,#7
                  |L60.88|
000058  297f              CMP      r1,#0x7f
00005a  d8f7              BHI      |L60.76|
00005c  f8001b01          STRB     r1,[r0],#1
000060  4604              MOV      r4,r0
;;;2708     _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000062  221a              MOVS     r2,#0x1a
000064  4621              MOV      r1,r4
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       _SendPacket
;;;2709     RECORD_END();
00006c  b2f0              UXTB     r0,r6
00006e  f3808811          MSR      BASEPRI,r0
000072  bf00              NOP      
000074  bf00              NOP      
;;;2710   }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;2711   
                          ENDP

00007a  0000              DCW      0x0000
                  |L60.124|
                          DCD      _aPacket

                          AREA ||i.SEGGER_SYSVIEW_WarnfHost||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_WarnfHost PROC
;;;2559   */
;;;2560   void SEGGER_SYSVIEW_WarnfHost(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2561     va_list ParamList;
;;;2562   
;;;2563     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2564     _VPrintHost(s, SEGGER_SYSVIEW_WARNING, &ParamList);
000008  466a              MOV      r2,sp
00000a  2101              MOVS     r1,#1
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintHost
;;;2565     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2566   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2567   
                          ENDP


                          AREA ||i.SEGGER_SYSVIEW_WarnfTarget||, CODE, READONLY, ALIGN=1

                  SEGGER_SYSVIEW_WarnfTarget PROC
;;;2639   */
;;;2640   void SEGGER_SYSVIEW_WarnfTarget(const char* s, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;2641     va_list ParamList;
;;;2642   
;;;2643     va_start(ParamList, s);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;2644     _VPrintTarget(s, SEGGER_SYSVIEW_WARNING, &ParamList);
000008  466a              MOV      r2,sp
00000a  2101              MOVS     r1,#1
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       _VPrintTarget
;;;2645     va_end(ParamList);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;2646   }
000016  b001              ADD      sp,sp,#4
000018  f85dfb14          LDR      pc,[sp],#0x14
;;;2647   
                          ENDP


                          AREA ||i._APrintHost||, CODE, READONLY, ALIGN=2

                  _APrintHost PROC
;;;763    */
;;;764    static void _APrintHost(const char* s, U32 Options, U32* pArguments, U32 NumArguments) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;765      U8* pPayload;
;;;766      U8* pPayloadStart;
;;;767    
;;;768      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
00000c  f3ef8011          MRS      r0,BASEPRI
000010  4681              MOV      r9,r0
000012  2020              MOVS     r0,#0x20
000014  f3808811          MSR      BASEPRI,r0
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  4823              LDR      r0,|L63.172|
00001e  f7fffffe          BL       _PreparePacket
000022  4682              MOV      r10,r0
;;;769      pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
000024  2280              MOVS     r2,#0x80
000026  4639              MOV      r1,r7
000028  4650              MOV      r0,r10
00002a  f7fffffe          BL       _EncodeStr
00002e  4604              MOV      r4,r0
;;;770      ENCODE_U32(pPayload, Options);
000030  4620              MOV      r0,r4
000032  4641              MOV      r1,r8
000034  e005              B        |L63.66|
                  |L63.54|
000036  b2ca              UXTB     r2,r1
000038  f0420280          ORR      r2,r2,#0x80
00003c  f8002b01          STRB     r2,[r0],#1
000040  09c9              LSRS     r1,r1,#7
                  |L63.66|
000042  297f              CMP      r1,#0x7f
000044  d8f7              BHI      |L63.54|
000046  f8001b01          STRB     r1,[r0],#1
00004a  4604              MOV      r4,r0
;;;771      ENCODE_U32(pPayload, NumArguments);
00004c  4620              MOV      r0,r4
00004e  4631              MOV      r1,r6
000050  e005              B        |L63.94|
                  |L63.82|
000052  b2ca              UXTB     r2,r1
000054  f0420280          ORR      r2,r2,#0x80
000058  f8002b01          STRB     r2,[r0],#1
00005c  09c9              LSRS     r1,r1,#7
                  |L63.94|
00005e  297f              CMP      r1,#0x7f
000060  d8f7              BHI      |L63.82|
000062  f8001b01          STRB     r1,[r0],#1
000066  4604              MOV      r4,r0
;;;772      while (NumArguments--) {
000068  e00e              B        |L63.136|
                  |L63.106|
;;;773        ENCODE_U32(pPayload, (*pArguments++));
00006a  4620              MOV      r0,r4
00006c  cd02              LDM      r5!,{r1}
00006e  e005              B        |L63.124|
                  |L63.112|
000070  b2ca              UXTB     r2,r1
000072  f0420280          ORR      r2,r2,#0x80
000076  f8002b01          STRB     r2,[r0],#1
00007a  09c9              LSRS     r1,r1,#7
                  |L63.124|
00007c  297f              CMP      r1,#0x7f
00007e  d8f7              BHI      |L63.112|
000080  f8001b01          STRB     r1,[r0],#1
000084  4604              MOV      r4,r0
000086  bf00              NOP      
                  |L63.136|
000088  1e30              SUBS     r0,r6,#0              ;772
00008a  f1a60601          SUB      r6,r6,#1              ;772
00008e  d1ec              BNE      |L63.106|
;;;774      }
;;;775      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000090  221a              MOVS     r2,#0x1a
000092  4621              MOV      r1,r4
000094  4650              MOV      r0,r10
000096  f7fffffe          BL       _SendPacket
;;;776      RECORD_END();
00009a  f00900ff          AND      r0,r9,#0xff
00009e  f3808811          MSR      BASEPRI,r0
0000a2  bf00              NOP      
0000a4  bf00              NOP      
;;;777    }
0000a6  e8bd87f0          POP      {r4-r10,pc}
;;;778    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L63.172|
                          DCD      _aPacket

                          AREA ||i._EncodeData||, CODE, READONLY, ALIGN=1

                  _EncodeData PROC
;;;353    */
;;;354    static U8* _EncodeData(U8* pPayload, const char* pSrc, unsigned NumBytes) {
000000  b510              PUSH     {r4,lr}
;;;355      unsigned n;
;;;356      //
;;;357      n = 0;
000002  2300              MOVS     r3,#0
;;;358      *pPayload++ = NumBytes;
000004  f8002b01          STRB     r2,[r0],#1
;;;359      while (n < NumBytes) {
000008  e004              B        |L64.20|
                  |L64.10|
;;;360        *pPayload++ = *pSrc++;
00000a  f8114b01          LDRB     r4,[r1],#1
00000e  f8004b01          STRB     r4,[r0],#1
;;;361        n++;
000012  1c5b              ADDS     r3,r3,#1
                  |L64.20|
000014  4293              CMP      r3,r2                 ;359
000016  d3f8              BCC      |L64.10|
;;;362      }
;;;363      return pPayload;
;;;364    }
000018  bd10              POP      {r4,pc}
;;;365    
                          ENDP


                          AREA ||i._EncodeStr||, CODE, READONLY, ALIGN=1

                  _EncodeStr PROC
;;;387    */
;;;388    static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned Limit) {
000000  b530              PUSH     {r4,r5,lr}
000002  460b              MOV      r3,r1
;;;389      unsigned n;
;;;390      unsigned Len;
;;;391      //
;;;392      // Compute string len
;;;393      //
;;;394      Len = 0;
000004  2100              MOVS     r1,#0
;;;395      while(*(pText + Len) != 0) {
000006  e000              B        |L65.10|
                  |L65.8|
;;;396        Len++;
000008  1c49              ADDS     r1,r1,#1
                  |L65.10|
00000a  5c5d              LDRB     r5,[r3,r1]            ;395
00000c  2d00              CMP      r5,#0                 ;395
00000e  d1fb              BNE      |L65.8|
;;;397      }
;;;398      if (Len > Limit) {
000010  4291              CMP      r1,r2
000012  d900              BLS      |L65.22|
;;;399        Len = Limit;
000014  4611              MOV      r1,r2
                  |L65.22|
;;;400      }
;;;401      //
;;;402      // Write Len
;;;403      //
;;;404      if (Len < 255)  {
000016  29ff              CMP      r1,#0xff
000018  d202              BCS      |L65.32|
;;;405        *pPayload++ = Len; 
00001a  f8001b01          STRB     r1,[r0],#1
00001e  e007              B        |L65.48|
                  |L65.32|
;;;406      } else {
;;;407        *pPayload++ = 255;
000020  25ff              MOVS     r5,#0xff
000022  f8005b01          STRB     r5,[r0],#1
;;;408        *pPayload++ = (Len & 255);
000026  f8001b01          STRB     r1,[r0],#1
;;;409        *pPayload++ = ((Len >> 8) & 255);
00002a  0a0d              LSRS     r5,r1,#8
00002c  f8005b01          STRB     r5,[r0],#1
                  |L65.48|
;;;410      }
;;;411      //
;;;412      // copy string
;;;413      //
;;;414      n = 0;
000030  2400              MOVS     r4,#0
;;;415      while (n < Len) {
000032  e004              B        |L65.62|
                  |L65.52|
;;;416        *pPayload++ = *pText++;
000034  f8135b01          LDRB     r5,[r3],#1
000038  f8005b01          STRB     r5,[r0],#1
;;;417        n++;
00003c  1c64              ADDS     r4,r4,#1
                  |L65.62|
00003e  428c              CMP      r4,r1                 ;415
000040  d3f8              BCC      |L65.52|
;;;418      }
;;;419      return pPayload;
;;;420    }
000042  bd30              POP      {r4,r5,pc}
;;;421    
                          ENDP


                          AREA ||i._HandleIncomingPacket||, CODE, READONLY, ALIGN=1

                  _HandleIncomingPacket PROC
;;;456    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
;;;457    static void _HandleIncomingPacket(void) {
000000  b538              PUSH     {r3-r5,lr}
;;;458      U8  Cmd;
;;;459      int Status;
;;;460      //
;;;461      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
000002  2201              MOVS     r2,#1
000004  4669              MOV      r1,sp
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       SEGGER_RTT_ReadNoLock
00000c  4604              MOV      r4,r0
;;;462      if (Status > 0) {
00000e  2c00              CMP      r4,#0
000010  dd41              BLE      |L66.150|
;;;463        switch (Cmd) {
000012  f89d0000          LDRB     r0,[sp,#0]
000016  2805              CMP      r0,#5
000018  d01c              BEQ      |L66.84|
00001a  dc08              BGT      |L66.46|
00001c  2801              CMP      r0,#1
00001e  d00d              BEQ      |L66.60|
000020  2802              CMP      r0,#2
000022  d00e              BEQ      |L66.66|
000024  2803              CMP      r0,#3
000026  d00f              BEQ      |L66.72|
000028  2804              CMP      r0,#4
00002a  d129              BNE      |L66.128|
00002c  e00f              B        |L66.78|
                  |L66.46|
00002e  2806              CMP      r0,#6
000030  d013              BEQ      |L66.90|
000032  2807              CMP      r0,#7
000034  d014              BEQ      |L66.96|
000036  2880              CMP      r0,#0x80
000038  d122              BNE      |L66.128|
00003a  e014              B        |L66.102|
                  |L66.60|
;;;464        case SEGGER_SYSVIEW_COMMAND_ID_START:
;;;465          SEGGER_SYSVIEW_Start();
00003c  f7fffffe          BL       SEGGER_SYSVIEW_Start
;;;466          break;
000040  e028              B        |L66.148|
                  |L66.66|
;;;467        case SEGGER_SYSVIEW_COMMAND_ID_STOP:
;;;468          SEGGER_SYSVIEW_Stop();
000042  f7fffffe          BL       SEGGER_SYSVIEW_Stop
;;;469          break;
000046  e025              B        |L66.148|
                  |L66.72|
;;;470        case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
;;;471          SEGGER_SYSVIEW_RecordSystime();
000048  f7fffffe          BL       SEGGER_SYSVIEW_RecordSystime
;;;472          break;
00004c  e022              B        |L66.148|
                  |L66.78|
;;;473        case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
;;;474          SEGGER_SYSVIEW_SendTaskList();
00004e  f7fffffe          BL       SEGGER_SYSVIEW_SendTaskList
;;;475          break;
000052  e01f              B        |L66.148|
                  |L66.84|
;;;476        case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
;;;477          SEGGER_SYSVIEW_GetSysDesc();
000054  f7fffffe          BL       SEGGER_SYSVIEW_GetSysDesc
;;;478          break;
000058  e01c              B        |L66.148|
                  |L66.90|
;;;479        case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
;;;480          SEGGER_SYSVIEW_SendNumModules();
00005a  f7fffffe          BL       SEGGER_SYSVIEW_SendNumModules
;;;481          break;
00005e  e019              B        |L66.148|
                  |L66.96|
;;;482        case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
;;;483          SEGGER_SYSVIEW_SendModuleDescription();
000060  f7fffffe          BL       SEGGER_SYSVIEW_SendModuleDescription
;;;484          break;
000064  e016              B        |L66.148|
                  |L66.102|
;;;485        case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
;;;486          Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
000066  2201              MOVS     r2,#1
000068  4669              MOV      r1,sp
00006a  4610              MOV      r0,r2
00006c  f7fffffe          BL       SEGGER_RTT_ReadNoLock
000070  4604              MOV      r4,r0
;;;487          if (Status > 0) {
000072  2c00              CMP      r4,#0
000074  dd03              BLE      |L66.126|
;;;488            SEGGER_SYSVIEW_SendModule(Cmd);
000076  f89d0000          LDRB     r0,[sp,#0]
00007a  f7fffffe          BL       SEGGER_SYSVIEW_SendModule
                  |L66.126|
;;;489          }
;;;490          break;
00007e  e009              B        |L66.148|
                  |L66.128|
;;;491        default:
;;;492          if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
000080  f89d0000          LDRB     r0,[sp,#0]
000084  2880              CMP      r0,#0x80
000086  db04              BLT      |L66.146|
;;;493            SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
000088  2201              MOVS     r2,#1
00008a  4669              MOV      r1,sp
00008c  4610              MOV      r0,r2
00008e  f7fffffe          BL       SEGGER_RTT_ReadNoLock
                  |L66.146|
;;;494          }
;;;495          break;
000092  bf00              NOP      
                  |L66.148|
000094  bf00              NOP                            ;466
                  |L66.150|
;;;496        }
;;;497      }
;;;498    }
000096  bd38              POP      {r3-r5,pc}
;;;499    #endif // (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
                          ENDP


                          AREA ||i._PreparePacket||, CODE, READONLY, ALIGN=1

                  _PreparePacket PROC
;;;439    */
;;;440    static U8* _PreparePacket(U8* pPacket) {
000000  4601              MOV      r1,r0
;;;441      return pPacket + 4;
000002  1d08              ADDS     r0,r1,#4
;;;442    }
000004  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||i._PrintInt||, CODE, READONLY, ALIGN=1

                  _PrintInt PROC
;;;954    */
;;;955    static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  e9dd450c          LDRD     r4,r5,[sp,#0x30]
;;;956      unsigned Width;
;;;957      int Number;
;;;958    
;;;959      Number = (v < 0) ? -v : v;
000010  2e00              CMP      r6,#0
000012  da01              BGE      |L68.24|
000014  4270              RSBS     r0,r6,#0
000016  e000              B        |L68.26|
                  |L68.24|
000018  4630              MOV      r0,r6
                  |L68.26|
00001a  4682              MOV      r10,r0
;;;960    
;;;961      //
;;;962      // Get actual field width
;;;963      //
;;;964      Width = 1u;
00001c  f04f0801          MOV      r8,#1
;;;965      while (Number >= (int)Base) {
000020  e003              B        |L68.42|
                  |L68.34|
;;;966        Number = (Number / (int)Base);
000022  fb9afaf9          SDIV     r10,r10,r9
;;;967        Width++;
000026  f1080801          ADD      r8,r8,#1
                  |L68.42|
00002a  45ca              CMP      r10,r9                ;965
00002c  daf9              BGE      |L68.34|
;;;968      }
;;;969      if (NumDigits > Width) {
00002e  4547              CMP      r7,r8
000030  d900              BLS      |L68.52|
;;;970        Width = NumDigits;
000032  46b8              MOV      r8,r7
                  |L68.52|
;;;971      }
;;;972      if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
000034  b134              CBZ      r4,|L68.68|
000036  2e00              CMP      r6,#0
000038  db03              BLT      |L68.66|
00003a  f0050004          AND      r0,r5,#4
00003e  2804              CMP      r0,#4
000040  d100              BNE      |L68.68|
                  |L68.66|
;;;973        FieldWidth--;
000042  1e64              SUBS     r4,r4,#1
                  |L68.68|
;;;974      }
;;;975    
;;;976      //
;;;977      // Print leading spaces if necessary
;;;978      //
;;;979      if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
000044  f0050002          AND      r0,r5,#2
000048  b100              CBZ      r0,|L68.76|
00004a  b167              CBZ      r7,|L68.102|
                  |L68.76|
00004c  f0050001          AND      r0,r5,#1
000050  b948              CBNZ     r0,|L68.102|
;;;980        if (FieldWidth != 0u) {
000052  b144              CBZ      r4,|L68.102|
;;;981          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
000054  e004              B        |L68.96|
                  |L68.86|
;;;982            FieldWidth--;
000056  1e64              SUBS     r4,r4,#1
;;;983            _StoreChar(pBufferDesc, ' ');
000058  2120              MOVS     r1,#0x20
00005a  4658              MOV      r0,r11
00005c  f7fffffe          BL       _StoreChar
                  |L68.96|
000060  b10c              CBZ      r4,|L68.102|
000062  45a0              CMP      r8,r4                 ;981
000064  d3f7              BCC      |L68.86|
                  |L68.102|
;;;984          }
;;;985        }
;;;986      }
;;;987      //
;;;988      // Print sign if necessary
;;;989      //
;;;990      if (v < 0) {
000066  2e00              CMP      r6,#0
000068  da05              BGE      |L68.118|
;;;991        v = -v;
00006a  4276              RSBS     r6,r6,#0
;;;992        _StoreChar(pBufferDesc, '-');
00006c  212d              MOVS     r1,#0x2d
00006e  4658              MOV      r0,r11
000070  f7fffffe          BL       _StoreChar
000074  e007              B        |L68.134|
                  |L68.118|
;;;993      } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
000076  f0050004          AND      r0,r5,#4
00007a  2804              CMP      r0,#4
00007c  d103              BNE      |L68.134|
;;;994        _StoreChar(pBufferDesc, '+');
00007e  212b              MOVS     r1,#0x2b
000080  4658              MOV      r0,r11
000082  f7fffffe          BL       _StoreChar
                  |L68.134|
;;;995      } else {
;;;996    
;;;997      }
;;;998      //
;;;999      // Print leading zeros if necessary
;;;1000     //
;;;1001     if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
000086  f0050002          AND      r0,r5,#2
00008a  2802              CMP      r0,#2
00008c  d10d              BNE      |L68.170|
00008e  f0050001          AND      r0,r5,#1
000092  b950              CBNZ     r0,|L68.170|
000094  b94f              CBNZ     r7,|L68.170|
;;;1002       if (FieldWidth != 0u) {
000096  b144              CBZ      r4,|L68.170|
;;;1003         while ((FieldWidth != 0u) && (Width < FieldWidth)) {
000098  e004              B        |L68.164|
                  |L68.154|
;;;1004           FieldWidth--;
00009a  1e64              SUBS     r4,r4,#1
;;;1005           _StoreChar(pBufferDesc, '0');
00009c  2130              MOVS     r1,#0x30
00009e  4658              MOV      r0,r11
0000a0  f7fffffe          BL       _StoreChar
                  |L68.164|
0000a4  b10c              CBZ      r4,|L68.170|
0000a6  45a0              CMP      r8,r4                 ;1003
0000a8  d3f7              BCC      |L68.154|
                  |L68.170|
;;;1006         }
;;;1007       }
;;;1008     }
;;;1009     //
;;;1010     // Print number without sign
;;;1011     //
;;;1012     _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
0000aa  463b              MOV      r3,r7
0000ac  464a              MOV      r2,r9
0000ae  4631              MOV      r1,r6
0000b0  4658              MOV      r0,r11
0000b2  e9cd4500          STRD     r4,r5,[sp,#0]
0000b6  f7fffffe          BL       _PrintUnsigned
;;;1013   }
0000ba  e8bd9ffc          POP      {r2-r12,pc}
;;;1014   
                          ENDP


                          AREA ||i._PrintUnsigned||, CODE, READONLY, ALIGN=2

                  _PrintUnsigned PROC
;;;863    */
;;;864    static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  e9dd4b10          LDRD     r4,r11,[sp,#0x40]
;;;865      static const char _aV2C[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
;;;866      unsigned Div;
;;;867      unsigned Digit;
;;;868      unsigned Number;
;;;869      unsigned Width;
;;;870      char c;
;;;871    
;;;872      Number = v;
000010  f8cd8008          STR      r8,[sp,#8]
;;;873      Digit = 1u;
000014  2701              MOVS     r7,#1
;;;874      //
;;;875      // Get actual field width
;;;876      //
;;;877      Width = 1u;
000016  46ba              MOV      r10,r7
;;;878      while (Number >= Base) {
000018  e005              B        |L69.38|
                  |L69.26|
;;;879        Number = (Number / Base);
00001a  9802              LDR      r0,[sp,#8]
00001c  fbb0f0f5          UDIV     r0,r0,r5
000020  9002              STR      r0,[sp,#8]
;;;880        Width++;
000022  f10a0a01          ADD      r10,r10,#1
                  |L69.38|
000026  9802              LDR      r0,[sp,#8]            ;878
000028  42a8              CMP      r0,r5                 ;878
00002a  d2f6              BCS      |L69.26|
;;;881      }
;;;882      if (NumDigits > Width) {
00002c  4556              CMP      r6,r10
00002e  d900              BLS      |L69.50|
;;;883        Width = NumDigits;
000030  46b2              MOV      r10,r6
                  |L69.50|
;;;884      }
;;;885      //
;;;886      // Print leading chars if necessary
;;;887      //
;;;888      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
000032  f00b0001          AND      r0,r11,#1
000036  b998              CBNZ     r0,|L69.96|
;;;889        if (FieldWidth != 0u) {
000038  b194              CBZ      r4,|L69.96|
;;;890          if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
00003a  f00b0002          AND      r0,r11,#2
00003e  2802              CMP      r0,#2
000040  d103              BNE      |L69.74|
000042  b916              CBNZ     r6,|L69.74|
;;;891            c = '0';
000044  2030              MOVS     r0,#0x30
000046  9001              STR      r0,[sp,#4]
000048  e001              B        |L69.78|
                  |L69.74|
;;;892          } else {
;;;893            c = ' ';
00004a  2020              MOVS     r0,#0x20
00004c  9001              STR      r0,[sp,#4]
                  |L69.78|
;;;894          }
;;;895          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
00004e  e004              B        |L69.90|
                  |L69.80|
;;;896            FieldWidth--;
000050  1e64              SUBS     r4,r4,#1
;;;897            _StoreChar(pBufferDesc, c);
000052  9901              LDR      r1,[sp,#4]
000054  9803              LDR      r0,[sp,#0xc]
000056  f7fffffe          BL       _StoreChar
                  |L69.90|
00005a  b10c              CBZ      r4,|L69.96|
00005c  45a2              CMP      r10,r4                ;895
00005e  d3f7              BCC      |L69.80|
                  |L69.96|
;;;898          }
;;;899        }
;;;900      }
;;;901      //
;;;902      // Compute Digit.
;;;903      // Loop until Digit has the value of the highest digit required.
;;;904      // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
;;;905      //
;;;906      while (1) {
000060  e009              B        |L69.118|
                  |L69.98|
;;;907        if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
000062  2e01              CMP      r6,#1
000064  d901              BLS      |L69.106|
;;;908          NumDigits--;
000066  1e76              SUBS     r6,r6,#1
000068  e004              B        |L69.116|
                  |L69.106|
;;;909        } else {
;;;910          Div = v / Digit;
00006a  fbb8f9f7          UDIV     r9,r8,r7
;;;911          if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
00006e  45a9              CMP      r9,r5
000070  d200              BCS      |L69.116|
;;;912            break;
000072  e001              B        |L69.120|
                  |L69.116|
;;;913          }
;;;914        }
;;;915        Digit *= Base;
000074  436f              MULS     r7,r5,r7
                  |L69.118|
000076  e7f4              B        |L69.98|
                  |L69.120|
000078  bf00              NOP                            ;912
;;;916      }
;;;917      //
;;;918      // Output digits
;;;919      //
;;;920      do {
00007a  bf00              NOP      
                  |L69.124|
;;;921        Div = v / Digit;
00007c  fbb8f9f7          UDIV     r9,r8,r7
;;;922        v -= Div * Digit;
000080  fb098817          MLS      r8,r9,r7,r8
;;;923        _StoreChar(pBufferDesc, _aV2C[Div]);
000084  480c              LDR      r0,|L69.184|
000086  f8101009          LDRB     r1,[r0,r9]
00008a  9803              LDR      r0,[sp,#0xc]
00008c  f7fffffe          BL       _StoreChar
;;;924        Digit /= Base;
000090  fbb7f7f5          UDIV     r7,r7,r5
;;;925      } while (Digit);
000094  2f00              CMP      r7,#0
000096  d1f1              BNE      |L69.124|
;;;926      //
;;;927      // Print trailing spaces if necessary
;;;928      //
;;;929      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
000098  f00b0001          AND      r0,r11,#1
00009c  b148              CBZ      r0,|L69.178|
;;;930        if (FieldWidth != 0u) {
00009e  b144              CBZ      r4,|L69.178|
;;;931          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
0000a0  e004              B        |L69.172|
                  |L69.162|
;;;932            FieldWidth--;
0000a2  1e64              SUBS     r4,r4,#1
;;;933            _StoreChar(pBufferDesc, ' ');
0000a4  2120              MOVS     r1,#0x20
0000a6  9803              LDR      r0,[sp,#0xc]
0000a8  f7fffffe          BL       _StoreChar
                  |L69.172|
0000ac  b10c              CBZ      r4,|L69.178|
0000ae  45a2              CMP      r10,r4                ;931
0000b0  d3f7              BCC      |L69.162|
                  |L69.178|
;;;934          }
;;;935        }
;;;936      }
;;;937    }
0000b2  b007              ADD      sp,sp,#0x1c
0000b4  e8bd8ff0          POP      {r4-r11,pc}
;;;938    
                          ENDP

                  |L69.184|
                          DCD      _aV2C

                          AREA ||i._SendPacket||, CODE, READONLY, ALIGN=2

                  _SendPacket PROC
;;;623    */
;;;624    static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned EventId) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;625      unsigned  NumBytes;
;;;626      U32 TimeStamp;
;;;627      U32 Delta;
;;;628    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
;;;629      int Status;
;;;630    #endif
;;;631    
;;;632    #if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
;;;633      SEGGER_SYSVIEW_LOCK();
;;;634    #endif
;;;635    
;;;636    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;637      if (_SYSVIEW_Globals.EnableState == 0) {
;;;638        goto SendDone;
;;;639      }
;;;640    #else
;;;641      if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
00000a  4841              LDR      r0,|L70.272|
00000c  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
00000e  2801              CMP      r0,#1
000010  d100              BNE      |L70.20|
;;;642        goto Send;
000012  e00f              B        |L70.52|
                  |L70.20|
;;;643      }
;;;644      if (_SYSVIEW_Globals.EnableState == 0) {
000014  483e              LDR      r0,|L70.272|
000016  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
000018  b900              CBNZ     r0,|L70.28|
;;;645        goto SendDone;
00001a  e065              B        |L70.232|
                  |L70.28|
;;;646      }
;;;647      //
;;;648      // Handle buffer full situations:
;;;649      // Have packets been dropped before because buffer was full?
;;;650      // In this case try to send and overflow packet.
;;;651      //
;;;652      if (_SYSVIEW_Globals.EnableState == 2) {
00001c  483c              LDR      r0,|L70.272|
00001e  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
000020  2802              CMP      r0,#2
000022  d106              BNE      |L70.50|
;;;653        _TrySendOverflowPacket();
000024  f7fffffe          BL       _TrySendOverflowPacket
;;;654        if (_SYSVIEW_Globals.EnableState != 1) {
000028  4839              LDR      r0,|L70.272|
00002a  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
00002c  2801              CMP      r0,#1
00002e  d000              BEQ      |L70.50|
;;;655          goto SendDone;
000030  e05a              B        |L70.232|
                  |L70.50|
;;;656        }
;;;657      }
;;;658    Send:
000032  bf00              NOP      
                  |L70.52|
;;;659    #endif
;;;660      //
;;;661      // Check if event is disabled from being recorded.
;;;662      //
;;;663      if (EventId < 32) {
000034  2d20              CMP      r5,#0x20
000036  d206              BCS      |L70.70|
;;;664        if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
000038  4835              LDR      r0,|L70.272|
00003a  69c0              LDR      r0,[r0,#0x1c]  ; _SYSVIEW_Globals
00003c  2101              MOVS     r1,#1
00003e  40a9              LSLS     r1,r1,r5
000040  4008              ANDS     r0,r0,r1
000042  b100              CBZ      r0,|L70.70|
;;;665          goto SendDone;
000044  e050              B        |L70.232|
                  |L70.70|
;;;666        }
;;;667      }
;;;668      //
;;;669      // Prepare actual packet.
;;;670      // If it is a known packet, prepend eventId only,
;;;671      // otherwise prepend packet length and eventId.
;;;672      //
;;;673      if (EventId < 24) {
000046  2d18              CMP      r5,#0x18
000048  d203              BCS      |L70.82|
;;;674        *--pStartPacket = EventId;
00004a  1e60              SUBS     r0,r4,#1
00004c  4604              MOV      r4,r0
00004e  7005              STRB     r5,[r0,#0]
000050  e022              B        |L70.152|
                  |L70.82|
;;;675      } else {
;;;676        NumBytes = pEndPacket - pStartPacket;
000052  1b3e              SUBS     r6,r7,r4
;;;677        if (NumBytes > 127) {
000054  2e7f              CMP      r6,#0x7f
000056  d90b              BLS      |L70.112|
;;;678          *--pStartPacket = (NumBytes >> 7);
000058  f3c611c7          UBFX     r1,r6,#7,#8
00005c  1e60              SUBS     r0,r4,#1
00005e  4604              MOV      r4,r0
000060  7001              STRB     r1,[r0,#0]
;;;679          *--pStartPacket = NumBytes | 0x80;
000062  b2f0              UXTB     r0,r6
000064  f0400180          ORR      r1,r0,#0x80
000068  1e60              SUBS     r0,r4,#1
00006a  4604              MOV      r4,r0
00006c  7001              STRB     r1,[r0,#0]
00006e  e002              B        |L70.118|
                  |L70.112|
;;;680        } else {
;;;681          *--pStartPacket = NumBytes;
000070  1e60              SUBS     r0,r4,#1
000072  4604              MOV      r4,r0
000074  7006              STRB     r6,[r0,#0]
                  |L70.118|
;;;682        }
;;;683        if (EventId > 127) {
000076  2d7f              CMP      r5,#0x7f
000078  d90b              BLS      |L70.146|
;;;684          *--pStartPacket = (EventId >> 7);
00007a  f3c511c7          UBFX     r1,r5,#7,#8
00007e  1e60              SUBS     r0,r4,#1
000080  4604              MOV      r4,r0
000082  7001              STRB     r1,[r0,#0]
;;;685          *--pStartPacket = EventId | 0x80;
000084  b2e8              UXTB     r0,r5
000086  f0400180          ORR      r1,r0,#0x80
00008a  1e60              SUBS     r0,r4,#1
00008c  4604              MOV      r4,r0
00008e  7001              STRB     r1,[r0,#0]
000090  e002              B        |L70.152|
                  |L70.146|
;;;686        } else {
;;;687          *--pStartPacket = EventId;
000092  1e60              SUBS     r0,r4,#1
000094  4604              MOV      r4,r0
000096  7005              STRB     r5,[r0,#0]
                  |L70.152|
;;;688        }
;;;689      }
;;;690      //
;;;691      // Compute time stamp delta and append it to packet.
;;;692      //
;;;693      TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
000098  481e              LDR      r0,|L70.276|
00009a  f8d08004          LDR      r8,[r0,#4]
;;;694      Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
00009e  481c              LDR      r0,|L70.272|
0000a0  68c0              LDR      r0,[r0,#0xc]  ; _SYSVIEW_Globals
0000a2  eba80a00          SUB      r10,r8,r0
;;;695      MAKE_DELTA_32BIT(Delta);
;;;696      ENCODE_U32(pEndPacket, Delta);
0000a6  4638              MOV      r0,r7
0000a8  4651              MOV      r1,r10
0000aa  e005              B        |L70.184|
                  |L70.172|
0000ac  b2ca              UXTB     r2,r1
0000ae  f0420280          ORR      r2,r2,#0x80
0000b2  f8002b01          STRB     r2,[r0],#1
0000b6  09c9              LSRS     r1,r1,#7
                  |L70.184|
0000b8  297f              CMP      r1,#0x7f
0000ba  d8f7              BHI      |L70.172|
0000bc  f8001b01          STRB     r1,[r0],#1
0000c0  4607              MOV      r7,r0
;;;697    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;698      //
;;;699      // Store packet in RTT buffer by overwriting old data and update time stamp
;;;700      //
;;;701      SEGGER_RTT_WriteWithOverwriteNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
;;;702      _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
;;;703    #else
;;;704      //
;;;705      // Try to store packet in RTT buffer and update time stamp when this was successful
;;;706      //
;;;707      Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
0000c2  1b3a              SUBS     r2,r7,r4
0000c4  4621              MOV      r1,r4
0000c6  2001              MOVS     r0,#1
0000c8  f7fffffe          BL       SEGGER_RTT_WriteSkipNoLock
0000cc  4681              MOV      r9,r0
;;;708      if (Status) {
0000ce  f1b90f00          CMP      r9,#0
0000d2  d003              BEQ      |L70.220|
;;;709        _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
0000d4  480e              LDR      r0,|L70.272|
0000d6  f8c0800c          STR      r8,[r0,#0xc]  ; _SYSVIEW_Globals
0000da  e004              B        |L70.230|
                  |L70.220|
;;;710      } else {
;;;711        _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
0000dc  480c              LDR      r0,|L70.272|
0000de  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
0000e0  1c40              ADDS     r0,r0,#1
0000e2  490b              LDR      r1,|L70.272|
0000e4  7008              STRB     r0,[r1,#0]
                  |L70.230|
;;;712      }
;;;713    #endif
;;;714    
;;;715    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
;;;716      //
;;;717      // Add sync and system information periodically if we are in post mortem mode
;;;718      //
;;;719      if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
;;;720        _SYSVIEW_Globals.RecursionCnt = 1;
;;;721        if (_SYSVIEW_Globals.PacketCount++ & (1 << SEGGER_SYSVIEW_SYNC_PERIOD_SHIFT)) {
;;;722          _SendSyncInfo();
;;;723          _SYSVIEW_Globals.PacketCount = 0;
;;;724        }
;;;725        _SYSVIEW_Globals.RecursionCnt = 0;
;;;726      }
;;;727    SendDone:
;;;728      ; // Avoid "label at end of compound statement" error when using static buffer
;;;729    #else
;;;730    SendDone:
0000e6  bf00              NOP      
                  |L70.232|
;;;731      //
;;;732      // Check if host is sending data which needs to be processed.
;;;733      // Note that since this code is called for every packet, it is very time critical, so we do
;;;734      // only what is really needed here, which is checking if there is any data
;;;735      //
;;;736      if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
0000e8  480b              LDR      r0,|L70.280|
0000ea  f8d01084          LDR      r1,[r0,#0x84]
0000ee  f8d00088          LDR      r0,[r0,#0x88]
0000f2  1a08              SUBS     r0,r1,r0
0000f4  d00a              BEQ      |L70.268|
;;;737        if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
0000f6  4806              LDR      r0,|L70.272|
0000f8  7880              LDRB     r0,[r0,#2]  ; _SYSVIEW_Globals
0000fa  b938              CBNZ     r0,|L70.268|
;;;738          _SYSVIEW_Globals.RecursionCnt = 1;
0000fc  2001              MOVS     r0,#1
0000fe  4904              LDR      r1,|L70.272|
000100  7088              STRB     r0,[r1,#2]
;;;739          _HandleIncomingPacket();
000102  f7fffffe          BL       _HandleIncomingPacket
;;;740          _SYSVIEW_Globals.RecursionCnt = 0;
000106  2000              MOVS     r0,#0
000108  4901              LDR      r1,|L70.272|
00010a  7088              STRB     r0,[r1,#2]
                  |L70.268|
;;;741        }
;;;742      }
;;;743    #endif
;;;744      //
;;;745    #if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
;;;746      SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
;;;747    #endif
;;;748    }
00010c  e8bd87f0          POP      {r4-r10,pc}
;;;749    
                          ENDP

                  |L70.272|
                          DCD      _SYSVIEW_Globals
                  |L70.276|
                          DCD      0xe0001000
                  |L70.280|
                          DCD      _SEGGER_RTT

                          AREA ||i._StoreChar||, CODE, READONLY, ALIGN=1

                  _StoreChar PROC
;;;821    */
;;;822    static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;823      unsigned Cnt;
;;;824      U8* pPayload;
;;;825      U32 Options;
;;;826    
;;;827      Cnt = p->Cnt;
000008  6927              LDR      r7,[r4,#0x10]
;;;828      if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
00000a  1c78              ADDS     r0,r7,#1
00000c  2880              CMP      r0,#0x80
00000e  d805              BHI      |L71.28|
;;;829        *(p->pPayload++) = c;
000010  6861              LDR      r1,[r4,#4]
000012  1c48              ADDS     r0,r1,#1
000014  6060              STR      r0,[r4,#4]
000016  700e              STRB     r6,[r1,#0]
;;;830        p->Cnt = Cnt + 1u;
000018  1c78              ADDS     r0,r7,#1
00001a  6120              STR      r0,[r4,#0x10]
                  |L71.28|
;;;831      }
;;;832      //
;;;833      // Write part of string, when the buffer is full
;;;834      //
;;;835      if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
00001c  6920              LDR      r0,[r4,#0x10]
00001e  2880              CMP      r0,#0x80
000020  d12f              BNE      |L71.130|
;;;836        *(p->pPayloadStart) = p->Cnt;
000022  7c20              LDRB     r0,[r4,#0x10]
000024  68a1              LDR      r1,[r4,#8]
000026  7008              STRB     r0,[r1,#0]
;;;837        pPayload = p->pPayload;
000028  6865              LDR      r5,[r4,#4]
;;;838        Options = p->Options;
00002a  f8d4800c          LDR      r8,[r4,#0xc]
;;;839        ENCODE_U32(pPayload, Options);
00002e  4628              MOV      r0,r5
000030  4641              MOV      r1,r8
000032  e005              B        |L71.64|
                  |L71.52|
000034  b2ca              UXTB     r2,r1
000036  f0420280          ORR      r2,r2,#0x80
00003a  f8002b01          STRB     r2,[r0],#1
00003e  09c9              LSRS     r1,r1,#7
                  |L71.64|
000040  297f              CMP      r1,#0x7f
000042  d8f7              BHI      |L71.52|
000044  f8001b01          STRB     r1,[r0],#1
000048  4605              MOV      r5,r0
;;;840        ENCODE_U32(pPayload, 0);
00004a  4628              MOV      r0,r5
00004c  2100              MOVS     r1,#0
00004e  e005              B        |L71.92|
                  |L71.80|
000050  b2ca              UXTB     r2,r1
000052  f0420280          ORR      r2,r2,#0x80
000056  f8002b01          STRB     r2,[r0],#1
00005a  09c9              LSRS     r1,r1,#7
                  |L71.92|
00005c  297f              CMP      r1,#0x7f
00005e  d8f7              BHI      |L71.80|
000060  f8001b01          STRB     r1,[r0],#1
000064  4605              MOV      r5,r0
;;;841        _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000066  221a              MOVS     r2,#0x1a
000068  4629              MOV      r1,r5
00006a  68a0              LDR      r0,[r4,#8]
00006c  f7fffffe          BL       _SendPacket
;;;842        p->pPayloadStart = _PreparePacket(p->pBuffer);
000070  6820              LDR      r0,[r4,#0]
000072  f7fffffe          BL       _PreparePacket
000076  60a0              STR      r0,[r4,#8]
;;;843        p->pPayload = p->pPayloadStart + 1u;
000078  68a0              LDR      r0,[r4,#8]
00007a  1c40              ADDS     r0,r0,#1
00007c  6060              STR      r0,[r4,#4]
;;;844        p->Cnt = 0u;
00007e  2000              MOVS     r0,#0
000080  6120              STR      r0,[r4,#0x10]
                  |L71.130|
;;;845      }
;;;846    }
000082  e8bd81f0          POP      {r4-r8,pc}
;;;847    
                          ENDP


                          AREA ||i._TrySendOverflowPacket||, CODE, READONLY, ALIGN=2

                  _TrySendOverflowPacket PROC
;;;521    #if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
;;;522    static int _TrySendOverflowPacket(void) {
000000  b5fe              PUSH     {r1-r7,lr}
;;;523      U32 TimeStamp;
;;;524      I32 Delta;
;;;525      int Status;
;;;526      U8  aPacket[11];
;;;527      U8* pPayload;
;;;528    
;;;529      aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
000002  2001              MOVS     r0,#1
000004  f88d0000          STRB     r0,[sp,#0]
;;;530      pPayload   = &aPacket[1];
000008  f10d0601          ADD      r6,sp,#1
;;;531      ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
00000c  4630              MOV      r0,r6
00000e  4a1b              LDR      r2,|L72.124|
000010  6951              LDR      r1,[r2,#0x14]  ; _SYSVIEW_Globals
000012  e005              B        |L72.32|
                  |L72.20|
000014  b2ca              UXTB     r2,r1
000016  f0420280          ORR      r2,r2,#0x80
00001a  f8002b01          STRB     r2,[r0],#1
00001e  09c9              LSRS     r1,r1,#7
                  |L72.32|
000020  297f              CMP      r1,#0x7f
000022  d8f7              BHI      |L72.20|
000024  f8001b01          STRB     r1,[r0],#1
000028  4606              MOV      r6,r0
;;;532      //
;;;533      // Compute time stamp delta and append it to packet.
;;;534      //
;;;535      TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
00002a  4815              LDR      r0,|L72.128|
00002c  6844              LDR      r4,[r0,#4]
;;;536      Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
00002e  4813              LDR      r0,|L72.124|
000030  68c0              LDR      r0,[r0,#0xc]  ; _SYSVIEW_Globals
000032  1a27              SUBS     r7,r4,r0
;;;537      MAKE_DELTA_32BIT(Delta);
;;;538      ENCODE_U32(pPayload, Delta);
000034  4630              MOV      r0,r6
000036  4639              MOV      r1,r7
000038  e005              B        |L72.70|
                  |L72.58|
00003a  b2ca              UXTB     r2,r1
00003c  f0420280          ORR      r2,r2,#0x80
000040  f8002b01          STRB     r2,[r0],#1
000044  09c9              LSRS     r1,r1,#7
                  |L72.70|
000046  297f              CMP      r1,#0x7f
000048  d8f7              BHI      |L72.58|
00004a  f8001b01          STRB     r1,[r0],#1
00004e  4606              MOV      r6,r0
;;;539      //
;;;540      // Try to store packet in RTT buffer and update time stamp when this was successful
;;;541      //
;;;542      Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
000050  4668              MOV      r0,sp
000052  1a32              SUBS     r2,r6,r0
000054  4669              MOV      r1,sp
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       SEGGER_RTT_WriteSkipNoLock
00005c  4605              MOV      r5,r0
;;;543      if (Status) {
00005e  b135              CBZ      r5,|L72.110|
;;;544        _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
000060  4806              LDR      r0,|L72.124|
000062  60c4              STR      r4,[r0,#0xc]  ; _SYSVIEW_Globals
;;;545        _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
000064  7800              LDRB     r0,[r0,#0]  ; _SYSVIEW_Globals
000066  1e40              SUBS     r0,r0,#1
000068  4904              LDR      r1,|L72.124|
00006a  7008              STRB     r0,[r1,#0]
00006c  e004              B        |L72.120|
                  |L72.110|
;;;546      } else {
;;;547        _SYSVIEW_Globals.DropCount++;
00006e  4803              LDR      r0,|L72.124|
000070  6940              LDR      r0,[r0,#0x14]  ; _SYSVIEW_Globals
000072  1c40              ADDS     r0,r0,#1
000074  4901              LDR      r1,|L72.124|
000076  6148              STR      r0,[r1,#0x14]  ; _SYSVIEW_Globals
                  |L72.120|
;;;548      }
;;;549      //
;;;550      return Status;
000078  4628              MOV      r0,r5
;;;551    }
00007a  bdfe              POP      {r1-r7,pc}
;;;552    #endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
                          ENDP

                  |L72.124|
                          DCD      _SYSVIEW_Globals
                  |L72.128|
                          DCD      0xe0001000

                          AREA ||i._VPrintHost||, CODE, READONLY, ALIGN=1

                  _VPrintHost PROC
;;;790    */
;;;791    static void _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b090              SUB      sp,sp,#0x40
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4614              MOV      r4,r2
;;;792      U32 aParas[SEGGER_SYSVIEW_MAX_ARGUMENTS];
;;;793      U32 NumArguments;
;;;794      const char* p;
;;;795      
;;;796      p = s;
00000c  463e              MOV      r6,r7
;;;797      NumArguments = 0;
00000e  2500              MOVS     r5,#0
;;;798      while (*p) {
000010  e00e              B        |L73.48|
                  |L73.18|
;;;799        if (*p == '%') {
000012  7830              LDRB     r0,[r6,#0]
000014  2825              CMP      r0,#0x25
000016  d10a              BNE      |L73.46|
;;;800          aParas[NumArguments++] = va_arg(*pParamList, int);
000018  6821              LDR      r1,[r4,#0]
00001a  1d08              ADDS     r0,r1,#4
00001c  6020              STR      r0,[r4,#0]
00001e  4628              MOV      r0,r5
000020  1c6d              ADDS     r5,r5,#1
000022  680a              LDR      r2,[r1,#0]
000024  f84d2020          STR      r2,[sp,r0,LSL #2]
;;;801          if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
000028  2d10              CMP      r5,#0x10
00002a  d100              BNE      |L73.46|
;;;802            break;
00002c  e003              B        |L73.54|
                  |L73.46|
;;;803          }
;;;804        }
;;;805        p++;
00002e  1c76              ADDS     r6,r6,#1
                  |L73.48|
000030  7830              LDRB     r0,[r6,#0]            ;798
000032  2800              CMP      r0,#0                 ;798
000034  d1ed              BNE      |L73.18|
                  |L73.54|
000036  bf00              NOP                            ;802
;;;806      }
;;;807      _APrintHost(s, Options, aParas, NumArguments);
000038  462b              MOV      r3,r5
00003a  466a              MOV      r2,sp
00003c  4641              MOV      r1,r8
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       _APrintHost
;;;808    }
000044  b010              ADD      sp,sp,#0x40
000046  e8bd81f0          POP      {r4-r8,pc}
;;;809    
                          ENDP


                          AREA ||i._VPrintTarget||, CODE, READONLY, ALIGN=2

                  _VPrintTarget PROC
;;;1027   */
;;;1028   static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  468a              MOV      r10,r1
00000a  4615              MOV      r5,r2
;;;1029     SEGGER_SYSVIEW_PRINTF_DESC BufferDesc;
;;;1030     char      c;
;;;1031     int       v;
;;;1032     unsigned  NumDigits;
;;;1033     unsigned  FormatFlags;
;;;1034     unsigned  FieldWidth;
;;;1035     U8*       pPayloadStart;
;;;1036   #if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
;;;1037     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
;;;1038     SEGGER_SYSVIEW_LOCK();
;;;1039   #else
;;;1040     RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
00000c  f3ef8011          MRS      r0,BASEPRI
000010  9002              STR      r0,[sp,#8]
000012  2020              MOVS     r0,#0x20
000014  f3808811          MSR      BASEPRI,r0
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  4884              LDR      r0,|L74.560|
00001e  f7fffffe          BL       _PreparePacket
000022  9003              STR      r0,[sp,#0xc]
;;;1041   #endif
;;;1042   
;;;1043   #if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
;;;1044     BufferDesc.pBuffer        = aPacket;
;;;1045   #else
;;;1046     BufferDesc.pBuffer        = _aPacket;
000024  4882              LDR      r0,|L74.560|
000026  9004              STR      r0,[sp,#0x10]
;;;1047   #endif
;;;1048     BufferDesc.Cnt            = 0u;
000028  2000              MOVS     r0,#0
00002a  9008              STR      r0,[sp,#0x20]
;;;1049     BufferDesc.pPayloadStart  = pPayloadStart;
00002c  9803              LDR      r0,[sp,#0xc]
00002e  9006              STR      r0,[sp,#0x18]
;;;1050     BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
000030  9806              LDR      r0,[sp,#0x18]
000032  1c40              ADDS     r0,r0,#1
000034  9005              STR      r0,[sp,#0x14]
;;;1051     BufferDesc.Options        =  Options;
000036  f8cda01c          STR      r10,[sp,#0x1c]
;;;1052   
;;;1053     do {
00003a  bf00              NOP      
                  |L74.60|
;;;1054       c = *sFormat;
00003c  7826              LDRB     r6,[r4,#0]
;;;1055       sFormat++;
00003e  1c64              ADDS     r4,r4,#1
;;;1056       if (c == 0u) {
000040  b906              CBNZ     r6,|L74.68|
;;;1057         break;
000042  e0c5              B        |L74.464|
                  |L74.68|
;;;1058       }
;;;1059       if (c == '%') {
000044  2e25              CMP      r6,#0x25
000046  d176              BNE      |L74.310|
;;;1060         //
;;;1061         // Filter out flags
;;;1062         //
;;;1063         FormatFlags = 0u;
000048  2700              MOVS     r7,#0
;;;1064         v = 1;
00004a  f04f0901          MOV      r9,#1
;;;1065         do {
00004e  bf00              NOP      
                  |L74.80|
;;;1066           c = *sFormat;
000050  7826              LDRB     r6,[r4,#0]
;;;1067           switch (c) {
000052  2e23              CMP      r6,#0x23
000054  d012              BEQ      |L74.124|
000056  2e2b              CMP      r6,#0x2b
000058  d00c              BEQ      |L74.116|
00005a  2e2d              CMP      r6,#0x2d
00005c  d002              BEQ      |L74.100|
00005e  2e30              CMP      r6,#0x30
000060  d110              BNE      |L74.132|
000062  e003              B        |L74.108|
                  |L74.100|
;;;1068           case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
000064  f0470701          ORR      r7,r7,#1
000068  1c64              ADDS     r4,r4,#1
00006a  e00e              B        |L74.138|
                  |L74.108|
;;;1069           case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
00006c  f0470702          ORR      r7,r7,#2
000070  1c64              ADDS     r4,r4,#1
000072  e00a              B        |L74.138|
                  |L74.116|
;;;1070           case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
000074  f0470704          ORR      r7,r7,#4
000078  1c64              ADDS     r4,r4,#1
00007a  e006              B        |L74.138|
                  |L74.124|
;;;1071           case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
00007c  f0470708          ORR      r7,r7,#8
000080  1c64              ADDS     r4,r4,#1
000082  e002              B        |L74.138|
                  |L74.132|
;;;1072           default:  v = 0; break;
000084  f04f0900          MOV      r9,#0
000088  bf00              NOP      
                  |L74.138|
00008a  bf00              NOP                            ;1068
;;;1073           }
;;;1074         } while (v);
00008c  f1b90f00          CMP      r9,#0
000090  d1de              BNE      |L74.80|
;;;1075         //
;;;1076         // filter out field with
;;;1077         //
;;;1078         FieldWidth = 0u;
000092  f04f0800          MOV      r8,#0
;;;1079         do {
000096  bf00              NOP      
                  |L74.152|
;;;1080           c = *sFormat;
000098  7826              LDRB     r6,[r4,#0]
;;;1081           if ((c < '0') || (c > '9')) {
00009a  2e30              CMP      r6,#0x30
00009c  db01              BLT      |L74.162|
00009e  2e39              CMP      r6,#0x39
0000a0  dd00              BLE      |L74.164|
                  |L74.162|
;;;1082             break;
0000a2  e007              B        |L74.180|
                  |L74.164|
;;;1083           }
;;;1084           sFormat++;
0000a4  1c64              ADDS     r4,r4,#1
;;;1085           FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
0000a6  f1a60030          SUB      r0,r6,#0x30
0000aa  eb080188          ADD      r1,r8,r8,LSL #2
0000ae  eb000841          ADD      r8,r0,r1,LSL #1
;;;1086         } while (1);
0000b2  e7f1              B        |L74.152|
                  |L74.180|
0000b4  bf00              NOP                            ;1082
;;;1087   
;;;1088         //
;;;1089         // Filter out precision (number of digits to display)
;;;1090         //
;;;1091         NumDigits = 0u;
0000b6  f04f0b00          MOV      r11,#0
;;;1092         c = *sFormat;
0000ba  7826              LDRB     r6,[r4,#0]
;;;1093         if (c == '.') {
0000bc  2e2e              CMP      r6,#0x2e
0000be  d110              BNE      |L74.226|
;;;1094           sFormat++;
0000c0  1c64              ADDS     r4,r4,#1
;;;1095           do {
0000c2  bf00              NOP      
                  |L74.196|
;;;1096             c = *sFormat;
0000c4  7826              LDRB     r6,[r4,#0]
;;;1097             if ((c < '0') || (c > '9')) {
0000c6  2e30              CMP      r6,#0x30
0000c8  db01              BLT      |L74.206|
0000ca  2e39              CMP      r6,#0x39
0000cc  dd00              BLE      |L74.208|
                  |L74.206|
;;;1098               break;
0000ce  e007              B        |L74.224|
                  |L74.208|
;;;1099             }
;;;1100             sFormat++;
0000d0  1c64              ADDS     r4,r4,#1
;;;1101             NumDigits = NumDigits * 10u + ((unsigned)c - '0');
0000d2  f1a60030          SUB      r0,r6,#0x30
0000d6  eb0b018b          ADD      r1,r11,r11,LSL #2
0000da  eb000b41          ADD      r11,r0,r1,LSL #1
;;;1102           } while (1);
0000de  e7f1              B        |L74.196|
                  |L74.224|
0000e0  bf00              NOP                            ;1098
                  |L74.226|
;;;1103         }
;;;1104         //
;;;1105         // Filter out length modifier
;;;1106         //
;;;1107         c = *sFormat;
0000e2  7826              LDRB     r6,[r4,#0]
;;;1108         do {
0000e4  bf00              NOP      
                  |L74.230|
;;;1109           if ((c == 'l') || (c == 'h')) {
0000e6  2e6c              CMP      r6,#0x6c
0000e8  d001              BEQ      |L74.238|
0000ea  2e68              CMP      r6,#0x68
0000ec  d102              BNE      |L74.244|
                  |L74.238|
;;;1110             c = *sFormat;
0000ee  7826              LDRB     r6,[r4,#0]
;;;1111             sFormat++;
0000f0  1c64              ADDS     r4,r4,#1
0000f2  e000              B        |L74.246|
                  |L74.244|
;;;1112           } else {
;;;1113             break;
0000f4  e000              B        |L74.248|
                  |L74.246|
;;;1114           }
;;;1115         } while (1);
0000f6  e7f6              B        |L74.230|
                  |L74.248|
0000f8  bf00              NOP                            ;1113
;;;1116         //
;;;1117         // Handle specifiers
;;;1118         //
;;;1119         switch (c) {
0000fa  2e64              CMP      r6,#0x64
0000fc  d01c              BEQ      |L74.312|
0000fe  dc06              BGT      |L74.270|
000100  2e25              CMP      r6,#0x25
000102  d054              BEQ      |L74.430|
000104  2e58              CMP      r6,#0x58
000106  d034              BEQ      |L74.370|
000108  2e63              CMP      r6,#0x63
00010a  d155              BNE      |L74.440|
00010c  e006              B        |L74.284|
                  |L74.270|
00010e  2e70              CMP      r6,#0x70
000110  d03d              BEQ      |L74.398|
000112  2e75              CMP      r6,#0x75
000114  d01e              BEQ      |L74.340|
000116  2e78              CMP      r6,#0x78
000118  d14e              BNE      |L74.440|
00011a  e029              B        |L74.368|
                  |L74.284|
;;;1120         case 'c': {
;;;1121           char c0;
;;;1122           v = va_arg(*pParamList, int);
00011c  6829              LDR      r1,[r5,#0]
00011e  1d08              ADDS     r0,r1,#4
000120  6028              STR      r0,[r5,#0]
000122  f8d19000          LDR      r9,[r1,#0]
;;;1123           c0 = (char)v;
000126  f00900ff          AND      r0,r9,#0xff
00012a  9001              STR      r0,[sp,#4]
;;;1124           _StoreChar(&BufferDesc, c0);
00012c  a804              ADD      r0,sp,#0x10
00012e  9901              LDR      r1,[sp,#4]
000130  f7fffffe          BL       _StoreChar
;;;1125           break;
000134  e041              B        |L74.442|
                  |L74.310|
000136  e043              B        |L74.448|
                  |L74.312|
;;;1126         }
;;;1127         case 'd':
;;;1128           v = va_arg(*pParamList, int);
000138  6829              LDR      r1,[r5,#0]
00013a  1d08              ADDS     r0,r1,#4
00013c  6028              STR      r0,[r5,#0]
00013e  f8d19000          LDR      r9,[r1,#0]
;;;1129           _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
000142  465b              MOV      r3,r11
000144  220a              MOVS     r2,#0xa
000146  4649              MOV      r1,r9
000148  a804              ADD      r0,sp,#0x10
00014a  e9cd8700          STRD     r8,r7,[sp,#0]
00014e  f7fffffe          BL       _PrintInt
;;;1130           break;
000152  e032              B        |L74.442|
                  |L74.340|
;;;1131         case 'u':
;;;1132           v = va_arg(*pParamList, int);
000154  6829              LDR      r1,[r5,#0]
000156  1d08              ADDS     r0,r1,#4
000158  6028              STR      r0,[r5,#0]
00015a  f8d19000          LDR      r9,[r1,#0]
;;;1133           _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
00015e  465b              MOV      r3,r11
000160  220a              MOVS     r2,#0xa
000162  4649              MOV      r1,r9
000164  a804              ADD      r0,sp,#0x10
000166  e9cd8700          STRD     r8,r7,[sp,#0]
00016a  f7fffffe          BL       _PrintUnsigned
;;;1134           break;
00016e  e024              B        |L74.442|
                  |L74.368|
;;;1135         case 'x':
;;;1136         case 'X':
000170  bf00              NOP      
                  |L74.370|
;;;1137           v = va_arg(*pParamList, int);
000172  6829              LDR      r1,[r5,#0]
000174  1d08              ADDS     r0,r1,#4
000176  6028              STR      r0,[r5,#0]
000178  f8d19000          LDR      r9,[r1,#0]
;;;1138           _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
00017c  465b              MOV      r3,r11
00017e  2210              MOVS     r2,#0x10
000180  4649              MOV      r1,r9
000182  a804              ADD      r0,sp,#0x10
000184  e9cd8700          STRD     r8,r7,[sp,#0]
000188  f7fffffe          BL       _PrintUnsigned
;;;1139           break;
00018c  e015              B        |L74.442|
                  |L74.398|
;;;1140         case 'p':
;;;1141           v = va_arg(*pParamList, int);
00018e  6829              LDR      r1,[r5,#0]
000190  1d08              ADDS     r0,r1,#4
000192  6028              STR      r0,[r5,#0]
000194  f8d19000          LDR      r9,[r1,#0]
;;;1142           _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
000198  2000              MOVS     r0,#0
00019a  2108              MOVS     r1,#8
00019c  460b              MOV      r3,r1
00019e  2210              MOVS     r2,#0x10
0001a0  e9cd1000          STRD     r1,r0,[sp,#0]
0001a4  4649              MOV      r1,r9
0001a6  a804              ADD      r0,sp,#0x10
0001a8  f7fffffe          BL       _PrintUnsigned
;;;1143           break;
0001ac  e005              B        |L74.442|
                  |L74.430|
;;;1144         case '%':
;;;1145           _StoreChar(&BufferDesc, '%');
0001ae  2125              MOVS     r1,#0x25
0001b0  a804              ADD      r0,sp,#0x10
0001b2  f7fffffe          BL       _StoreChar
;;;1146           break;
0001b6  e000              B        |L74.442|
                  |L74.440|
;;;1147         default:
;;;1148           break;
0001b8  bf00              NOP      
                  |L74.442|
0001ba  bf00              NOP                            ;1125
;;;1149         }
;;;1150         sFormat++;
0001bc  1c64              ADDS     r4,r4,#1
0001be  e003              B        |L74.456|
                  |L74.448|
;;;1151       } else {
;;;1152         _StoreChar(&BufferDesc, c);
0001c0  4631              MOV      r1,r6
0001c2  a804              ADD      r0,sp,#0x10
0001c4  f7fffffe          BL       _StoreChar
                  |L74.456|
;;;1153       }
;;;1154     } while (*sFormat);
0001c8  7820              LDRB     r0,[r4,#0]
0001ca  2800              CMP      r0,#0
0001cc  f47faf36          BNE      |L74.60|
                  |L74.464|
0001d0  bf00              NOP                            ;1057
;;;1155   
;;;1156     //
;;;1157     // Write remaining data, if any
;;;1158     //
;;;1159     if (BufferDesc.Cnt != 0u) {
0001d2  9808              LDR      r0,[sp,#0x20]
0001d4  b318              CBZ      r0,|L74.542|
;;;1160       *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
0001d6  9906              LDR      r1,[sp,#0x18]
0001d8  9808              LDR      r0,[sp,#0x20]
0001da  7008              STRB     r0,[r1,#0]
;;;1161       ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
0001dc  9805              LDR      r0,[sp,#0x14]
0001de  9907              LDR      r1,[sp,#0x1c]
0001e0  e005              B        |L74.494|
                  |L74.482|
0001e2  b2ca              UXTB     r2,r1
0001e4  f0420280          ORR      r2,r2,#0x80
0001e8  f8002b01          STRB     r2,[r0],#1
0001ec  09c9              LSRS     r1,r1,#7
                  |L74.494|
0001ee  297f              CMP      r1,#0x7f
0001f0  d8f7              BHI      |L74.482|
0001f2  f8001b01          STRB     r1,[r0],#1
0001f6  9005              STR      r0,[sp,#0x14]
;;;1162       ENCODE_U32(BufferDesc.pPayload, 0);
0001f8  9805              LDR      r0,[sp,#0x14]
0001fa  2100              MOVS     r1,#0
0001fc  e005              B        |L74.522|
                  |L74.510|
0001fe  b2ca              UXTB     r2,r1
000200  f0420280          ORR      r2,r2,#0x80
000204  f8002b01          STRB     r2,[r0],#1
000208  09c9              LSRS     r1,r1,#7
                  |L74.522|
00020a  297f              CMP      r1,#0x7f
00020c  d8f7              BHI      |L74.510|
00020e  f8001b01          STRB     r1,[r0],#1
000212  9005              STR      r0,[sp,#0x14]
;;;1163       _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
000214  221a              MOVS     r2,#0x1a
000216  e9dd1005          LDRD     r1,r0,[sp,#0x14]
00021a  f7fffffe          BL       _SendPacket
                  |L74.542|
;;;1164     }
;;;1165   #if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
;;;1166     SEGGER_SYSVIEW_UNLOCK();
;;;1167     RECORD_END();
;;;1168   #else
;;;1169     RECORD_END();
00021e  9802              LDR      r0,[sp,#8]
000220  b2c0              UXTB     r0,r0
000222  f3808811          MSR      BASEPRI,r0
000226  bf00              NOP      
000228  bf00              NOP      
;;;1170   #endif
;;;1171   }
00022a  b009              ADD      sp,sp,#0x24
00022c  e8bd8ff0          POP      {r4-r11,pc}
;;;1172   #endif // SEGGER_SYSVIEW_EXCLUDE_PRINTF
                          ENDP

                  |L74.560|
                          DCD      _aPacket

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _UpBuffer
                          %        1024
                  _SYSVIEW_Globals
                          %        40
                  _aPacket
                          %        227

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _abSync
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  0000              DCB      0x00,0x00
                  _aV2C
00000a  3031              DCB      0x30,0x31
00000c  32333435          DCB      0x32,0x33,0x34,0x35
000010  36373839          DCB      0x36,0x37,0x38,0x39
000014  41424344          DCB      0x41,0x42,0x43,0x44
000018  4546              DCB      0x45,0x46

                          AREA ||.data||, DATA, ALIGN=2

                  _DownBuffer
                          %        8
                  _pFirstModule
                          DCD      0x00000000
                  _NumModules
00000c  00                DCB      0x00
