; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\dma_timeradc_md.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\dma_timeradc_md.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -I..\..\User\RTT -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\dma_timeradc_md.crf ..\..\User\MiddleWareDrv\DMA_TimerADC_MD.c]
                          THUMB

                          AREA ||i.ADC_Config||, CODE, READONLY, ALIGN=2

                  ADC_Config PROC
;;;111    	// Â¶ÇÊûúÈááÂèñÂÖ∂ÂÆÉÈÖçÁΩÆÔºåÈúÄÊ≥®ÊÑèADC CLK‰∏çËÉΩË∂ÖÂá∫36Mhz„Ä
;;;112    void ADC_Config(uint32_t u32BufferSize)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  b09c              SUB      sp,sp,#0x70
000004  4604              MOV      r4,r0
;;;114      ADC_InitTypeDef       ADC_InitStructure;
;;;115      ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;116      DMA_InitTypeDef       DMA_InitStructure;
;;;117      GPIO_InitTypeDef      GPIO_InitStructure;
;;;118    	NVIC_InitTypeDef NVIC_InitStructure;
;;;119    
;;;120      /* Enable ADCx, DMA and GPIO clocks ****************************************/ 
;;;121      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
000006  2101              MOVS     r1,#1
000008  0588              LSLS     r0,r1,#22
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;122      RCC_AHB1PeriphClockCmd(ADCx_CHANNEL_GPIO_CLK, ENABLE);  
00000e  2101              MOVS     r1,#1
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;123      RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
000016  2101              MOVS     r1,#1
000018  0208              LSLS     r0,r1,#8
00001a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;124      
;;;125    	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;					// ADC DMA stream0 ch0
00001e  2038              MOVS     r0,#0x38
000020  f88d0000          STRB     r0,[sp,#0]
;;;126      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000024  2000              MOVS     r0,#0
000026  f88d0001          STRB     r0,[sp,#1]
;;;127      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00002a  2001              MOVS     r0,#1
00002c  f88d0002          STRB     r0,[sp,#2]
;;;128      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000030  f88d0003          STRB     r0,[sp,#3]
;;;129      NVIC_Init(&NVIC_InitStructure);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       NVIC_Init
;;;130    	
;;;131      /* DMA2 Stream0 channel2 configuration **************************************/
;;;132      DMA_InitStructure.DMA_Channel = DMA_CHANNELx;  
00003a  2000              MOVS     r0,#0
00003c  9003              STR      r0,[sp,#0xc]
;;;133      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADCx_DR_ADDRESS;
00003e  4836              LDR      r0,|L1.280|
000040  9004              STR      r0,[sp,#0x10]
;;;134      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&uhADCxConvertedValue;
000042  4836              LDR      r0,|L1.284|
000044  9005              STR      r0,[sp,#0x14]
;;;135      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
000046  2000              MOVS     r0,#0
000048  9006              STR      r0,[sp,#0x18]
;;;136      DMA_InitStructure.DMA_BufferSize = u32BufferSize;
00004a  9407              STR      r4,[sp,#0x1c]
;;;137      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00004c  9008              STR      r0,[sp,#0x20]
;;;138      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00004e  f44f6080          MOV      r0,#0x400
000052  9009              STR      r0,[sp,#0x24]
;;;139      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
000054  0040              LSLS     r0,r0,#1
000056  900a              STR      r0,[sp,#0x28]
;;;140      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
000058  0080              LSLS     r0,r0,#2
00005a  900b              STR      r0,[sp,#0x2c]
;;;141      DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
00005c  1140              ASRS     r0,r0,#5
00005e  900c              STR      r0,[sp,#0x30]
;;;142      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000060  0240              LSLS     r0,r0,#9
000062  900d              STR      r0,[sp,#0x34]
;;;143      DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
000064  2000              MOVS     r0,#0
000066  900e              STR      r0,[sp,#0x38]
;;;144      DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
000068  2001              MOVS     r0,#1
00006a  900f              STR      r0,[sp,#0x3c]
;;;145      DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
00006c  2000              MOVS     r0,#0
00006e  9010              STR      r0,[sp,#0x40]
;;;146      DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
000070  9011              STR      r0,[sp,#0x44]
;;;147      DMA_Init(DMA_STREAMx, &DMA_InitStructure);
000072  a903              ADD      r1,sp,#0xc
000074  482a              LDR      r0,|L1.288|
000076  f7fffffe          BL       DMA_Init
;;;148      DMA_Cmd(DMA_STREAMx, ENABLE);
00007a  2101              MOVS     r1,#1
00007c  4828              LDR      r0,|L1.288|
00007e  f7fffffe          BL       DMA_Cmd
;;;149    	
;;;150    	DMA_ITConfig(DMA_STREAMx, DMA_IT_TC | DMA_IT_HT,ENABLE);  //ÈÖçÁΩÆDMAÊé•Êî∂ÂÆåÊàêÂíåÂçäÊª°Âêé‰∫ßÁîü‰∏≠Êñ≠
000082  2201              MOVS     r2,#1
000084  2118              MOVS     r1,#0x18
000086  4826              LDR      r0,|L1.288|
000088  f7fffffe          BL       DMA_ITConfig
;;;151    	
;;;152    
;;;153      /* Configure ADC3 Channel7 pin as analog input ******************************/
;;;154      GPIO_InitStructure.GPIO_Pin = GPIO_PIN;
00008c  2002              MOVS     r0,#2
00008e  9001              STR      r0,[sp,#4]
;;;155      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
000090  2003              MOVS     r0,#3
000092  f88d0008          STRB     r0,[sp,#8]
;;;156      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
000096  2000              MOVS     r0,#0
000098  f88d000b          STRB     r0,[sp,#0xb]
;;;157      GPIO_Init(GPIO_PORT, &GPIO_InitStructure);
00009c  a901              ADD      r1,sp,#4
00009e  4821              LDR      r0,|L1.292|
0000a0  f7fffffe          BL       GPIO_Init
;;;158    
;;;159      /* ADC Common Init **********************************************************/
;;;160      ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
0000a4  2000              MOVS     r0,#0
0000a6  9012              STR      r0,[sp,#0x48]
;;;161      ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
0000a8  f44f3080          MOV      r0,#0x10000
0000ac  9013              STR      r0,[sp,#0x4c]
;;;162      ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
0000ae  2000              MOVS     r0,#0
0000b0  9014              STR      r0,[sp,#0x50]
;;;163      ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
0000b2  9015              STR      r0,[sp,#0x54]
;;;164      ADC_CommonInit(&ADC_CommonInitStructure);
0000b4  a812              ADD      r0,sp,#0x48
0000b6  f7fffffe          BL       ADC_CommonInit
;;;165    
;;;166      /* ADC3 Init ****************************************************************/
;;;167      ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
0000ba  2000              MOVS     r0,#0
0000bc  9016              STR      r0,[sp,#0x58]
;;;168      ADC_InitStructure.ADC_ScanConvMode = DISABLE;
0000be  f88d005c          STRB     r0,[sp,#0x5c]
;;;169      ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
0000c2  f88d005d          STRB     r0,[sp,#0x5d]
;;;170      ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
0000c6  f04f5080          MOV      r0,#0x10000000
0000ca  9018              STR      r0,[sp,#0x60]
;;;171      ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
0000cc  f04f7040          MOV      r0,#0x3000000
0000d0  9019              STR      r0,[sp,#0x64]
;;;172      ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
0000d2  2000              MOVS     r0,#0
0000d4  901a              STR      r0,[sp,#0x68]
;;;173      ADC_InitStructure.ADC_NbrOfConversion = 1;
0000d6  2001              MOVS     r0,#1
0000d8  f88d006c          STRB     r0,[sp,#0x6c]
;;;174      ADC_Init(ADCx, &ADC_InitStructure);
0000dc  a916              ADD      r1,sp,#0x58
0000de  480e              LDR      r0,|L1.280|
0000e0  384c              SUBS     r0,r0,#0x4c
0000e2  f7fffffe          BL       ADC_Init
;;;175    
;;;176      /* ADC3 regular channel7 configuration **************************************/
;;;177      ADC_RegularChannelConfig(ADCx, ADC_CHANNEL, 1, ADC_SampleTime_15Cycles);
0000e6  2301              MOVS     r3,#1
0000e8  461a              MOV      r2,r3
0000ea  210b              MOVS     r1,#0xb
0000ec  480a              LDR      r0,|L1.280|
0000ee  384c              SUBS     r0,r0,#0x4c
0000f0  f7fffffe          BL       ADC_RegularChannelConfig
;;;178    
;;;179     /* Enable DMA request after last transfer (Single-ADC mode) */
;;;180      ADC_DMARequestAfterLastTransferCmd(ADCx, ENABLE);
0000f4  2101              MOVS     r1,#1
0000f6  4808              LDR      r0,|L1.280|
0000f8  384c              SUBS     r0,r0,#0x4c
0000fa  f7fffffe          BL       ADC_DMARequestAfterLastTransferCmd
;;;181    
;;;182      /* Enable ADC3 DMA */
;;;183      ADC_DMACmd(ADCx, ENABLE);
0000fe  2101              MOVS     r1,#1
000100  4805              LDR      r0,|L1.280|
000102  384c              SUBS     r0,r0,#0x4c
000104  f7fffffe          BL       ADC_DMACmd
;;;184    
;;;185      /* Enable ADC3 */
;;;186      ADC_Cmd(ADCx, ENABLE);
000108  2101              MOVS     r1,#1
00010a  4803              LDR      r0,|L1.280|
00010c  384c              SUBS     r0,r0,#0x4c
00010e  f7fffffe          BL       ADC_Cmd
;;;187    }
000112  b01c              ADD      sp,sp,#0x70
000114  bd10              POP      {r4,pc}
;;;188    
                          ENDP

000116  0000              DCW      0x0000
                  |L1.280|
                          DCD      0x4001204c
                  |L1.284|
                          DCD      uhADCxConvertedValue
                  |L1.288|
                          DCD      0x40026410
                  |L1.292|
                          DCD      0x40020800

                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;60     
;;;61     void DMA2_Stream0_IRQHandler(void)
000000  480c              LDR      r0,|L2.52|
;;;62     {
;;;63      		int i;
;;;64     	
;;;65     		if (DMA2->LISR & DMA_IT_HTIF0)										// Stream0Âçä‰º†Ëæì‰∫ã‰ª∂ÂÆåÊà
000002  6800              LDR      r0,[r0,#0]
000004  490c              LDR      r1,|L2.56|
000006  4008              ANDS     r0,r0,r1
000008  b138              CBZ      r0,|L2.26|
;;;66      		{ 
;;;67     
;;;68     // 			 DMA1->LIFCR |= DMA_FLAG_HTIF1;									// Ê∏ÖÈô§ÈÄöÈÅì3Âçä‰º†ËæìÂÆåÊàêÊ†áÂø
;;;69     			 DMA2->LIFCR = (DMA_FLAG_HTIF0 & 0x0fff0fff);									// Ê∏ÖÈô§ÈÄöÈÅì3Âçä‰º†ËæìÂÆåÊàêÊ†áÂø
00000a  2010              MOVS     r0,#0x10
00000c  4909              LDR      r1,|L2.52|
00000e  3108              ADDS     r1,r1,#8
000010  6008              STR      r0,[r1,#0]
;;;70     
;;;71     			 u8ADC_Halffull = 1;												// ÂâçÂçä‰∏™ÁºìÂÜ≤Âå∫Êª
000012  2001              MOVS     r0,#1
000014  4909              LDR      r1,|L2.60|
000016  7008              STRB     r0,[r1,#0]
000018  e00b              B        |L2.50|
                  |L2.26|
;;;72     			 
;;;73     //			 for (i = 0; i < (4000); i++)
;;;74     			 {
;;;75     					 // ‰∏ÄÊó¶ÂçäÊª°‰∏≠Êñ≠‰∫ßÁîüÔºåÂàôÊääÂÖÖÊª°ÁºìÂÜ≤Âå∫‰∏ÄÂçäÁöÑÊï∞ÊçÆÁ´ãÂç≥ËØªÂá∫Êù
;;;76     //					 RingBufU16WriteOne(&sADC_RingBuf, uhADCxConvertedValue[i]);
;;;77     				 
;;;78     			 }
;;;79     
;;;80     		}// End if (DMA2->LISR & DMA_IT_HTIF0)
;;;81     		else 
;;;82     		if (DMA2->LISR & DMA_IT_TCIF0)															// ÈÄöÈÅì3‰º†Ëæì‰∫ã‰ª∂ÂÆåÊàê
00001a  4806              LDR      r0,|L2.52|
00001c  6800              LDR      r0,[r0,#0]
00001e  4908              LDR      r1,|L2.64|
000020  4008              ANDS     r0,r0,r1
000022  b130              CBZ      r0,|L2.50|
;;;83      		{ 
;;;84     						u8ADC_Halffull = 2;																			// ÂêéÂçä‰∏™ÁºìÂÜ≤Âå∫Êª
000024  2002              MOVS     r0,#2
000026  4905              LDR      r1,|L2.60|
000028  7008              STRB     r0,[r1,#0]
;;;85      						DMA2->LIFCR = (DMA_FLAG_TCIF0 & 0x0fff0fff);						// Ê∏ÖÈô§Stream0‰º†ËæìÂÆåÊàêÊ†áÂøó
00002a  2020              MOVS     r0,#0x20
00002c  4901              LDR      r1,|L2.52|
00002e  3108              ADDS     r1,r1,#8
000030  6008              STR      r0,[r1,#0]
                  |L2.50|
;;;86     							
;;;87     //						for (i = 0; i < (4000); i++)
;;;88     						{
;;;89     //								RingBufU16WriteOne(&sADC_RingBuf, uhADCxConvertedValue[4000 + i]);
;;;90     								
;;;91     						}
;;;92     						
;;;93     		}// End else if (DMA1->ISR & DMA1_IT_TC3)		
;;;94     	
;;;95     }
000032  4770              BX       lr
;;;96     
                          ENDP

                  |L2.52|
                          DCD      0x40026400
                  |L2.56|
                          DCD      0x10004010
                  |L2.60|
                          DCD      u8ADC_Halffull
                  |L2.64|
                          DCD      0x10008020

                          AREA ||.ARM.__AT_0x4001204C||, DATA, NOINIT, ALIGN=2

                  u32ADC
                          %        4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uhADCxConvertedValue
                          %        16384

                          AREA ||.data||, DATA, ALIGN=0

                  u8ADC_Halffull
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\MiddleWareDrv\\DMA_TimerADC_MD.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_DMA_TimerADC_MD_c_88fae122____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_DMA_TimerADC_MD_c_88fae122____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_DMA_TimerADC_MD_c_88fae122____REVSH|
#line 144
|__asm___17_DMA_TimerADC_MD_c_88fae122____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_DMA_TimerADC_MD_c_88fae122____RRX|
#line 300
|__asm___17_DMA_TimerADC_MD_c_88fae122____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
