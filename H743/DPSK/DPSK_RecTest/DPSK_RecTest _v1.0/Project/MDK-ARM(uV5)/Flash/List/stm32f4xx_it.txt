; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f4xx_it.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -I..\..\User\RTT -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\stm32f4xx_it.crf ..\..\User\bsp_stm32f4xx\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;106    */
;;;107    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;108    {
;;;109      /* 当总线异常时进入死循环 */
;;;110      while (1)
000002  e7fe              B        |L1.2|
;;;111      {
;;;112      }
;;;113    }
;;;114    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;150    */
;;;151    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;152    {
;;;153    }
;;;154    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=2

                  HardFault_Handler PROC
;;;62     */
;;;63     void HardFault_Handler(void)
000000  a109              ADR      r1,|L3.40|
;;;64     {
;;;65     #if 1
;;;66       const char *pError = ERR_INFO;
;;;67       uint8_t i;
;;;68     
;;;69       for (i = 0; i < sizeof(ERR_INFO); i++)
000002  2000              MOVS     r0,#0
000004  e00b              B        |L3.30|
                  |L3.6|
;;;70       {
;;;71          USART1->DR = pError[i];
000006  5c0a              LDRB     r2,[r1,r0]
000008  4b12              LDR      r3,|L3.84|
00000a  809a              STRH     r2,[r3,#4]
;;;72          /* 等待发送结束 */
;;;73          while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET);
00000c  bf00              NOP      
                  |L3.14|
00000e  4a11              LDR      r2,|L3.84|
000010  8812              LDRH     r2,[r2,#0]
000012  f0020240          AND      r2,r2,#0x40
000016  2a00              CMP      r2,#0
000018  d0f9              BEQ      |L3.14|
00001a  1c42              ADDS     r2,r0,#1              ;69
00001c  b2d0              UXTB     r0,r2                 ;69
                  |L3.30|
00001e  282a              CMP      r0,#0x2a              ;69
000020  d3f1              BCC      |L3.6|
;;;74       }
;;;75     #endif
;;;76     
;;;77       /* 当硬件失效异常发生时进入死循环 */
;;;78       while (1)
000022  bf00              NOP      
                  |L3.36|
000024  e7fe              B        |L3.36|
;;;79       {
;;;80       }
;;;81     }
;;;82     
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
000028  0d0a456e          DCB      "\r\nEnter HardFault_Handler, System Halt.\r\n",0
00002c  74657220
000030  48617264
000034  4661756c
000038  745f4861
00003c  6e646c65
000040  722c2053
000044  79737465
000048  6d204861
00004c  6c742e0d
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0
                  |L3.84|
                          DCD      0x40011000

                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;90     */
;;;91     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;92     {
;;;93       /* 当内存管理异常发生时进入死循环 */
;;;94       while (1)
000002  e7fe              B        |L4.2|
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;49     */
;;;50     void NMI_Handler(void)
000000  4770              BX       lr
;;;51     {
;;;52     }
;;;53     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;162    */
;;;163    void PendSV_Handler(void)
000000  4770              BX       lr
;;;164    {
;;;165    }
;;;166    /***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;138    */
;;;139    void SVC_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;122    */
;;;123    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L8.2|
;;;124    {
;;;125      /* 当用法异常时进入死循环 */
;;;126      while (1)
000002  e7fe              B        |L8.2|
;;;127      {
;;;128      }
;;;129    }
;;;130    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwRTCAlarmCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_ee621d14____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_ee621d14____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_ee621d14____REVSH|
#line 144
|__asm___14_stm32f4xx_it_c_ee621d14____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_ee621d14____RRX|
#line 300
|__asm___14_stm32f4xx_it_c_ee621d14____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
