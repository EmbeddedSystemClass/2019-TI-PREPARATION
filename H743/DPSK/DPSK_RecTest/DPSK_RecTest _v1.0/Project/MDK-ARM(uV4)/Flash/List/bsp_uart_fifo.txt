; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\bsp_uart_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\MiddleWareDrv -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\Flash\Obj\bsp_uart_fifo.crf ..\..\User\bsp_stm32f4xx\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;95     */
;;;96     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;97     {
;;;98     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;99     	{
;;;100    		#if UART1_FIFO_EN == 1
;;;101    			return &g_tUart1;
000004  480b              LDR      r0,|L1.52|
                  |L1.6|
;;;102    		#else
;;;103    			return 0;
;;;104    		#endif
;;;105    	}
;;;106    	else if (_ucPort == COM2)
;;;107    	{
;;;108    		#if UART2_FIFO_EN == 1
;;;109    			return &g_tUart2;
;;;110    		#else
;;;111    			return;
;;;112    		#endif
;;;113    	}
;;;114    	else if (_ucPort == COM3)
;;;115    	{
;;;116    		#if UART3_FIFO_EN == 1
;;;117    			return &g_tUart3;
;;;118    		#else
;;;119    			return 0;
;;;120    		#endif
;;;121    	}
;;;122    	else if (_ucPort == COM4)
;;;123    	{
;;;124    		#if UART4_FIFO_EN == 1
;;;125    			return &g_tUart4;
;;;126    		#else
;;;127    			return 0;
;;;128    		#endif
;;;129    	}
;;;130    	else if (_ucPort == COM5)
;;;131    	{
;;;132    		#if UART5_FIFO_EN == 1
;;;133    			return &g_tUart5;
;;;134    		#else
;;;135    			return 0;
;;;136    		#endif
;;;137    	}
;;;138    	else if (_ucPort == COM6)
;;;139    	{
;;;140    		#if UART6_FIFO_EN == 1
;;;141    			return &g_tUart6;
;;;142    		#else
;;;143    			return 0;
;;;144    		#endif
;;;145    	}
;;;146    	else
;;;147    	{
;;;148    		/* 不做任何处理 */
;;;149    		return 0;
;;;150    	}
;;;151    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;106
00000a  d101              BNE      |L1.16|
00000c  480a              LDR      r0,|L1.56|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;114
000012  d101              BNE      |L1.24|
000014  4809              LDR      r0,|L1.60|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;122
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;127
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;130
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;135
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2905              CMP      r1,#5                 ;138
00002a  d101              BNE      |L1.48|
00002c  4804              LDR      r0,|L1.64|
00002e  e7ea              B        |L1.6|
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;149
000032  e7e8              B        |L1.6|
;;;152    
                          ENDP

                  |L1.52|
                          DCD      g_tUart1
                  |L1.56|
                          DCD      g_tUart2
                  |L1.60|
                          DCD      g_tUart3
                  |L1.64|
                          DCD      g_tUart6

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;906    */
;;;907    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;908    {
;;;909    	NVIC_InitTypeDef NVIC_InitStructure;
;;;910    
;;;911    	/* Configure the NVIC Preemption Priority Bits */
;;;912    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;913    
;;;914    #if UART1_FIFO_EN == 1
;;;915    	/* 使能串口1中断 */
;;;916    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;917    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0002          STRB     r0,[sp,#2]
;;;918    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00000e  2001              MOVS     r0,#1
000010  f88d0003          STRB     r0,[sp,#3]
;;;919    	NVIC_Init(&NVIC_InitStructure);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       NVIC_Init
;;;920    #endif
;;;921    
;;;922    #if UART2_FIFO_EN == 1
;;;923    	/* 使能串口2中断 */
;;;924    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00001a  2026              MOVS     r0,#0x26
00001c  f88d0000          STRB     r0,[sp,#0]
;;;925    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000020  2001              MOVS     r0,#1
000022  f88d0002          STRB     r0,[sp,#2]
;;;926    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000026  f88d0003          STRB     r0,[sp,#3]
;;;927    	NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;928    #endif
;;;929    
;;;930    #if UART3_FIFO_EN == 1
;;;931    	/* 使能串口3中断t */
;;;932    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000030  2027              MOVS     r0,#0x27
000032  f88d0000          STRB     r0,[sp,#0]
;;;933    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
000036  2002              MOVS     r0,#2
000038  f88d0002          STRB     r0,[sp,#2]
;;;934    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d0003          STRB     r0,[sp,#3]
;;;935    	NVIC_Init(&NVIC_InitStructure);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       NVIC_Init
;;;936    #endif
;;;937    
;;;938    #if UART4_FIFO_EN == 1
;;;939    	/* 使能串口4中断t */
;;;940    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;941    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;942    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;943    	NVIC_Init(&NVIC_InitStructure);
;;;944    #endif
;;;945    
;;;946    #if UART5_FIFO_EN == 1
;;;947    	/* 使能串口5中断t */
;;;948    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;949    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;950    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;951    	NVIC_Init(&NVIC_InitStructure);
;;;952    #endif
;;;953    
;;;954    #if UART6_FIFO_EN == 1
;;;955    	/* 使能串口6中断t */
;;;956    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
000048  2047              MOVS     r0,#0x47
00004a  f88d0000          STRB     r0,[sp,#0]
;;;957    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
00004e  2005              MOVS     r0,#5
000050  f88d0002          STRB     r0,[sp,#2]
;;;958    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000054  2001              MOVS     r0,#1
000056  f88d0003          STRB     r0,[sp,#3]
;;;959    	NVIC_Init(&NVIC_InitStructure);
00005a  4668              MOV      r0,sp
00005c  f7fffffe          BL       NVIC_Init
;;;960    #endif
;;;961    }
000060  bd08              POP      {r3,pc}
;;;962    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;501    */
;;;502    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;503    {
000002  b087              SUB      sp,sp,#0x1c
;;;504    	GPIO_InitTypeDef GPIO_InitStructure;
;;;505    	USART_InitTypeDef USART_InitStructure;
;;;506    
;;;507    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;508    
;;;509    	/* 第1步： 配置GPIO */
;;;510    	#if 1	/* TX = PA9   RX = PA10 */
;;;511    		/* 打开 GPIO 时钟 */
;;;512    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;513    
;;;514    		/* 打开 UART 时钟 */
;;;515    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;516    
;;;517    		/* 将 PA9 映射为 USART1_TX */
;;;518    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
000014  2207              MOVS     r2,#7
000016  2109              MOVS     r1,#9
000018  48ab              LDR      r0,|L3.712|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;519    
;;;520    		/* 将 PA10 映射为 USART1_RX */
;;;521    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
00001e  2207              MOVS     r2,#7
000020  210a              MOVS     r1,#0xa
000022  48a9              LDR      r0,|L3.712|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;522    
;;;523    		/* 配置 USART Tx 为复用功能 */
;;;524    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000028  2000              MOVS     r0,#0
00002a  f88d001a          STRB     r0,[sp,#0x1a]
;;;525    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
00002e  2001              MOVS     r0,#1
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;526    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
000034  2002              MOVS     r0,#2
000036  f88d0018          STRB     r0,[sp,#0x18]
;;;527    
;;;528    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00003a  0200              LSLS     r0,r0,#8
00003c  9005              STR      r0,[sp,#0x14]
;;;529    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0019          STRB     r0,[sp,#0x19]
;;;530    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  a905              ADD      r1,sp,#0x14
000046  48a0              LDR      r0,|L3.712|
000048  f7fffffe          BL       GPIO_Init
;;;531    
;;;532    		/* 配置 USART Rx 为复用功能 */
;;;533    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004c  2002              MOVS     r0,#2
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;534    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000052  0240              LSLS     r0,r0,#9
000054  9005              STR      r0,[sp,#0x14]
;;;535    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a905              ADD      r1,sp,#0x14
000058  489b              LDR      r0,|L3.712|
00005a  f7fffffe          BL       GPIO_Init
;;;536    	#else	/* TX = PB6   RX = PB7  */
;;;537    		/* 打开 GPIO 时钟 */
;;;538    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;539    
;;;540    		/* 打开 UART 时钟 */
;;;541    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
;;;542    
;;;543    		/* 将 PB6 映射为 USART1_TX */
;;;544    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
;;;545    
;;;546    		/* 将 PB7 映射为 USART1_RX */
;;;547    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
;;;548    
;;;549    		/* 配置 USART Tx 为复用功能 */
;;;550    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;551    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;552    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;553    
;;;554    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;555    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;556    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;557    
;;;558    		/* 配置 USART Rx 为复用功能 */
;;;559    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;560    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
;;;561    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;562    	#endif
;;;563    
;;;564    	/* 第2步： 配置串口硬件参数 */
;;;565    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
00005e  f44f30e1          MOV      r0,#0x1c200
000062  9001              STR      r0,[sp,#4]
;;;566    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000064  2000              MOVS     r0,#0
000066  f8ad0008          STRH     r0,[sp,#8]
;;;567    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;568    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;569    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000072  f8ad0010          STRH     r0,[sp,#0x10]
;;;570    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000076  200c              MOVS     r0,#0xc
000078  f8ad000e          STRH     r0,[sp,#0xe]
;;;571    	USART_Init(USART1, &USART_InitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  4893              LDR      r0,|L3.716|
000080  f7fffffe          BL       USART_Init
;;;572    
;;;573    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000084  2201              MOVS     r2,#1
000086  f2405125          MOV      r1,#0x525
00008a  4890              LDR      r0,|L3.716|
00008c  f7fffffe          BL       USART_ITConfig
;;;574    	/*
;;;575    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;576    		注意: 不要在此处打开发送中断
;;;577    		发送中断使能在SendUart()函数打开
;;;578    	*/
;;;579    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000090  2101              MOVS     r1,#1
000092  488e              LDR      r0,|L3.716|
000094  f7fffffe          BL       USART_Cmd
;;;580    
;;;581    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;582    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;583    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000098  2140              MOVS     r1,#0x40
00009a  488c              LDR      r0,|L3.716|
00009c  f7fffffe          BL       USART_ClearFlag
;;;584    #endif
;;;585    
;;;586    #if UART2_FIFO_EN == 1		/* 串口2 TX = PD5   RX = PD6 或  TX = PA2， RX = PA3  */
;;;587    	/* 第1步： 配置GPIO */
;;;588    	#if 0	/* 串口2 TX = PD5   RX = PD6 */
;;;589    		/* 打开 GPIO 时钟 */
;;;590    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
;;;591    
;;;592    		/* 打开 UART 时钟 */
;;;593    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
;;;594    
;;;595    		/* 将 PD5 映射为 USART2_TX */
;;;596    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
;;;597    
;;;598    		/* 将 PD6 映射为 USART2_RX */
;;;599    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
;;;600    
;;;601    		/* 配置 USART Tx 为复用功能 */
;;;602    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;603    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;604    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;605    
;;;606    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
;;;607    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;608    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;609    
;;;610    		/* 配置 USART Rx 为复用功能 */
;;;611    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;612    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;613    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;614    
;;;615    	#else	/* 串口2   TX = PA2， RX = PA3 */
;;;616    		/* 打开 GPIO 时钟 */
;;;617    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
0000a0  2101              MOVS     r1,#1
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;618    
;;;619    		/* 打开 UART 时钟 */
;;;620    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  0448              LSLS     r0,r1,#17
0000ac  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;621    
;;;622    		/* 将 PA2 映射为 USART2_TX. 在STM32-V5板中，PA2 管脚用于以太网 */
;;;623    		//GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
;;;624    
;;;625    		/* 将 PA3 映射为 USART2_RX */
;;;626    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
0000b0  2207              MOVS     r2,#7
0000b2  2103              MOVS     r1,#3
0000b4  4884              LDR      r0,|L3.712|
0000b6  f7fffffe          BL       GPIO_PinAFConfig
;;;627    
;;;628    		/* 配置 USART Tx 为复用功能 */
;;;629    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
0000ba  2000              MOVS     r0,#0
0000bc  f88d001a          STRB     r0,[sp,#0x1a]
;;;630    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
0000c0  2001              MOVS     r0,#1
0000c2  f88d001b          STRB     r0,[sp,#0x1b]
;;;631    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
0000c6  2002              MOVS     r0,#2
0000c8  f88d0018          STRB     r0,[sp,#0x18]
;;;632    
;;;633    		//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;634    		//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;635    		//GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;636    
;;;637    		/* 配置 USART Rx 为复用功能 */
;;;638    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000cc  f88d0018          STRB     r0,[sp,#0x18]
;;;639    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000d0  2008              MOVS     r0,#8
0000d2  9005              STR      r0,[sp,#0x14]
;;;640    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000d4  2002              MOVS     r0,#2
0000d6  f88d0019          STRB     r0,[sp,#0x19]
;;;641    		GPIO_Init(GPIOA, &GPIO_InitStructure);
0000da  a905              ADD      r1,sp,#0x14
0000dc  487a              LDR      r0,|L3.712|
0000de  f7fffffe          BL       GPIO_Init
;;;642    	#endif
;;;643    
;;;644    	/* 第2步： 配置串口硬件参数 */
;;;645    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000e2  f44f5016          MOV      r0,#0x2580
0000e6  9001              STR      r0,[sp,#4]
;;;646    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000e8  2000              MOVS     r0,#0
0000ea  f8ad0008          STRH     r0,[sp,#8]
;;;647    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000ee  f8ad000a          STRH     r0,[sp,#0xa]
;;;648    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000f2  f8ad000c          STRH     r0,[sp,#0xc]
;;;649    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000f6  f8ad0010          STRH     r0,[sp,#0x10]
;;;650    	USART_InitStructure.USART_Mode = USART_Mode_Rx;		/* 仅选择接收模式 */
0000fa  2004              MOVS     r0,#4
0000fc  f8ad000e          STRH     r0,[sp,#0xe]
;;;651    	USART_Init(USART2, &USART_InitStructure);
000100  a901              ADD      r1,sp,#4
000102  4873              LDR      r0,|L3.720|
000104  f7fffffe          BL       USART_Init
;;;652    
;;;653    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000108  2201              MOVS     r2,#1
00010a  f2405125          MOV      r1,#0x525
00010e  4870              LDR      r0,|L3.720|
000110  f7fffffe          BL       USART_ITConfig
;;;654    	/*
;;;655    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;656    		注意: 不要在此处打开发送中断
;;;657    		发送中断使能在SendUart()函数打开
;;;658    	*/
;;;659    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000114  2101              MOVS     r1,#1
000116  486e              LDR      r0,|L3.720|
000118  f7fffffe          BL       USART_Cmd
;;;660    
;;;661    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;662    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;663    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
00011c  2140              MOVS     r1,#0x40
00011e  486c              LDR      r0,|L3.720|
000120  f7fffffe          BL       USART_ClearFlag
;;;664    #endif
;;;665    
;;;666    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;667    
;;;668    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;669    	{
;;;670    		RCC_AHB1PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000124  2101              MOVS     r1,#1
000126  2002              MOVS     r0,#2
000128  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;671    
;;;672    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00012c  2001              MOVS     r0,#1
00012e  f88d0018          STRB     r0,[sp,#0x18]
;;;673    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000132  2000              MOVS     r0,#0
000134  f88d001a          STRB     r0,[sp,#0x1a]
;;;674    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000138  f88d001b          STRB     r0,[sp,#0x1b]
;;;675    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00013c  2003              MOVS     r0,#3
00013e  f88d0019          STRB     r0,[sp,#0x19]
;;;676    
;;;677    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000142  2004              MOVS     r0,#4
000144  9005              STR      r0,[sp,#0x14]
;;;678    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000146  a905              ADD      r1,sp,#0x14
000148  4862              LDR      r0,|L3.724|
00014a  f7fffffe          BL       GPIO_Init
;;;679    	}
;;;680    
;;;681    	/* 打开 GPIO 时钟 */
;;;682    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00014e  2101              MOVS     r1,#1
000150  2002              MOVS     r0,#2
000152  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;683    
;;;684    	/* 打开 UART 时钟 */
;;;685    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000156  2101              MOVS     r1,#1
000158  0488              LSLS     r0,r1,#18
00015a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;686    
;;;687    	/* 将 PB10 映射为 USART3_TX */
;;;688    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
00015e  2207              MOVS     r2,#7
000160  210a              MOVS     r1,#0xa
000162  485c              LDR      r0,|L3.724|
000164  f7fffffe          BL       GPIO_PinAFConfig
;;;689    
;;;690    	/* 将 PB11 映射为 USART3_RX */
;;;691    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
000168  2207              MOVS     r2,#7
00016a  210b              MOVS     r1,#0xb
00016c  4859              LDR      r0,|L3.724|
00016e  f7fffffe          BL       GPIO_PinAFConfig
;;;692    
;;;693    	/* 配置 USART Tx 为复用功能 */
;;;694    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000172  2000              MOVS     r0,#0
000174  f88d001a          STRB     r0,[sp,#0x1a]
;;;695    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000178  2001              MOVS     r0,#1
00017a  f88d001b          STRB     r0,[sp,#0x1b]
;;;696    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00017e  2002              MOVS     r0,#2
000180  f88d0018          STRB     r0,[sp,#0x18]
;;;697    
;;;698    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000184  0240              LSLS     r0,r0,#9
000186  9005              STR      r0,[sp,#0x14]
;;;699    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000188  2002              MOVS     r0,#2
00018a  f88d0019          STRB     r0,[sp,#0x19]
;;;700    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00018e  a905              ADD      r1,sp,#0x14
000190  4850              LDR      r0,|L3.724|
000192  f7fffffe          BL       GPIO_Init
;;;701    
;;;702    	/* 配置 USART Rx 为复用功能 */
;;;703    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000196  2002              MOVS     r0,#2
000198  f88d0018          STRB     r0,[sp,#0x18]
;;;704    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00019c  0280              LSLS     r0,r0,#10
00019e  9005              STR      r0,[sp,#0x14]
;;;705    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0001a0  a905              ADD      r1,sp,#0x14
0001a2  484c              LDR      r0,|L3.724|
0001a4  f7fffffe          BL       GPIO_Init
;;;706    
;;;707    	/* 第2步： 配置串口硬件参数 */
;;;708    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
0001a8  f44f5016          MOV      r0,#0x2580
0001ac  9001              STR      r0,[sp,#4]
;;;709    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0001ae  2000              MOVS     r0,#0
0001b0  f8ad0008          STRH     r0,[sp,#8]
;;;710    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0001b4  f8ad000a          STRH     r0,[sp,#0xa]
;;;711    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0001b8  f8ad000c          STRH     r0,[sp,#0xc]
;;;712    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0001bc  f8ad0010          STRH     r0,[sp,#0x10]
;;;713    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0001c0  200c              MOVS     r0,#0xc
0001c2  f8ad000e          STRH     r0,[sp,#0xe]
;;;714    	USART_Init(USART3, &USART_InitStructure);
0001c6  a901              ADD      r1,sp,#4
0001c8  4843              LDR      r0,|L3.728|
0001ca  f7fffffe          BL       USART_Init
;;;715    
;;;716    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001ce  2201              MOVS     r2,#1
0001d0  f2405125          MOV      r1,#0x525
0001d4  4840              LDR      r0,|L3.728|
0001d6  f7fffffe          BL       USART_ITConfig
;;;717    	/*
;;;718    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;719    		注意: 不要在此处打开发送中断
;;;720    		发送中断使能在SendUart()函数打开
;;;721    	*/
;;;722    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001da  2101              MOVS     r1,#1
0001dc  483e              LDR      r0,|L3.728|
0001de  f7fffffe          BL       USART_Cmd
;;;723    
;;;724    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;725    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;726    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001e2  2140              MOVS     r1,#0x40
0001e4  483c              LDR      r0,|L3.728|
0001e6  f7fffffe          BL       USART_ClearFlag
;;;727    #endif
;;;728    
;;;729    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;730    	/* 第1步： 配置GPIO */
;;;731    
;;;732    	/* 打开 GPIO 时钟 */
;;;733    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;734    
;;;735    	/* 打开 UART 时钟 */
;;;736    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;737    
;;;738    	/* 将 PC10 映射为 UART4_TX */
;;;739    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART1);
;;;740    
;;;741    	/* 将 PC11 映射为 UART4_RX */
;;;742    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART1);
;;;743    
;;;744    	/* 配置 USART Tx 为复用功能 */
;;;745    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;746    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;747    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;748    
;;;749    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;750    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;751    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;752    
;;;753    	/* 配置 USART Rx 为复用功能 */
;;;754    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;755    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;756    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;757    
;;;758    	/* 第2步： 配置串口硬件参数 */
;;;759    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
;;;760    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;761    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;762    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;763    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;764    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;765    	USART_Init(UART4, &USART_InitStructure);
;;;766    
;;;767    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;768    	/*
;;;769    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;770    		注意: 不要在此处打开发送中断
;;;771    		发送中断使能在SendUart()函数打开
;;;772    	*/
;;;773    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;774    
;;;775    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;776    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;777    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;778    #endif
;;;779    
;;;780    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;781    	/* 第1步： 配置GPIO */
;;;782    
;;;783    	/* 打开 GPIO 时钟 */
;;;784    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOD, ENABLE);
;;;785    
;;;786    	/* 打开 UART 时钟 */
;;;787    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;788    
;;;789    	/* 将 PC12 映射为 UART5_TX */
;;;790    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
;;;791    
;;;792    	/* 将 PD2 映射为 UART5_RX */
;;;793    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
;;;794    
;;;795    	/* 配置 UART Tx 为复用功能 */
;;;796    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;797    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;798    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;799    
;;;800    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;801    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;802    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;803    
;;;804    	/* 配置 UART Rx 为复用功能 */
;;;805    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;806    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;807    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;808    
;;;809    	/* 第2步： 配置串口硬件参数 */
;;;810    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;811    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;812    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;813    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;814    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;815    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;816    	USART_Init(UART5, &USART_InitStructure);
;;;817    
;;;818    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;819    	/*
;;;820    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;821    		注意: 不要在此处打开发送中断
;;;822    		发送中断使能在SendUart()函数打开
;;;823    	*/
;;;824    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;825    
;;;826    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;827    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;828    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;829    #endif
;;;830    
;;;831    #if UART6_FIFO_EN == 1			/* PG14/USART6_TX , PC7/USART6_RX,PG8/USART6_RTS, PG15/USART6_CTS */
;;;832    	/* 第1步： 配置GPIO */
;;;833    
;;;834    	/* 打开 GPIO 时钟 */
;;;835    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOG, ENABLE);
0001ea  2101              MOVS     r1,#1
0001ec  2044              MOVS     r0,#0x44
0001ee  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;836    
;;;837    	/* 打开 UART 时钟 */
;;;838    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
0001f2  2101              MOVS     r1,#1
0001f4  2020              MOVS     r0,#0x20
0001f6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;839    
;;;840    	/* 将 PG14 映射为 USART6_TX */
;;;841    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource14, GPIO_AF_USART6);
0001fa  2208              MOVS     r2,#8
0001fc  210e              MOVS     r1,#0xe
0001fe  4837              LDR      r0,|L3.732|
000200  f7fffffe          BL       GPIO_PinAFConfig
;;;842    
;;;843    	/* 将 PC7 映射为 USART6_RX */
;;;844    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
000204  2208              MOVS     r2,#8
000206  2107              MOVS     r1,#7
000208  4835              LDR      r0,|L3.736|
00020a  f7fffffe          BL       GPIO_PinAFConfig
;;;845    
;;;846    	/* 将 PG8 映射为 USART6_RTS */
;;;847    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource8, GPIO_AF_USART6);
00020e  2208              MOVS     r2,#8
000210  4611              MOV      r1,r2
000212  4832              LDR      r0,|L3.732|
000214  f7fffffe          BL       GPIO_PinAFConfig
;;;848    
;;;849    	/* 将 PG15 映射为 USART6_CTS */
;;;850    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource15, GPIO_AF_USART6);
000218  2208              MOVS     r2,#8
00021a  210f              MOVS     r1,#0xf
00021c  482f              LDR      r0,|L3.732|
00021e  f7fffffe          BL       GPIO_PinAFConfig
;;;851    
;;;852    	/* 配置 PG14/USART6_TX 为复用功能 */
;;;853    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000222  2000              MOVS     r0,#0
000224  f88d001a          STRB     r0,[sp,#0x1a]
;;;854    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000228  2001              MOVS     r0,#1
00022a  f88d001b          STRB     r0,[sp,#0x1b]
;;;855    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00022e  2002              MOVS     r0,#2
000230  f88d0018          STRB     r0,[sp,#0x18]
;;;856    
;;;857    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
000234  0340              LSLS     r0,r0,#13
000236  9005              STR      r0,[sp,#0x14]
;;;858    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000238  2002              MOVS     r0,#2
00023a  f88d0019          STRB     r0,[sp,#0x19]
;;;859    	GPIO_Init(GPIOG, &GPIO_InitStructure);
00023e  a905              ADD      r1,sp,#0x14
000240  4826              LDR      r0,|L3.732|
000242  f7fffffe          BL       GPIO_Init
;;;860    
;;;861    	/* 配置 PC7/USART6_RX 为复用功能 */
;;;862    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000246  2002              MOVS     r0,#2
000248  f88d0018          STRB     r0,[sp,#0x18]
;;;863    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00024c  2080              MOVS     r0,#0x80
00024e  9005              STR      r0,[sp,#0x14]
;;;864    	GPIO_Init(GPIOC, &GPIO_InitStructure);
000250  a905              ADD      r1,sp,#0x14
000252  4823              LDR      r0,|L3.736|
000254  f7fffffe          BL       GPIO_Init
;;;865    
;;;866    	/* 配置 PG8/USART6_RTS 为复用功能 */
;;;867    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000258  2002              MOVS     r0,#2
00025a  f88d0018          STRB     r0,[sp,#0x18]
;;;868    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00025e  01c0              LSLS     r0,r0,#7
000260  9005              STR      r0,[sp,#0x14]
;;;869    	GPIO_Init(GPIOG, &GPIO_InitStructure);
000262  a905              ADD      r1,sp,#0x14
000264  481d              LDR      r0,|L3.732|
000266  f7fffffe          BL       GPIO_Init
;;;870    
;;;871    	/* 配置 PG15/USART6_CTS 为复用功能 */
;;;872    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00026a  2002              MOVS     r0,#2
00026c  f88d0018          STRB     r0,[sp,#0x18]
;;;873    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
000270  0380              LSLS     r0,r0,#14
000272  9005              STR      r0,[sp,#0x14]
;;;874    	GPIO_Init(GPIOG, &GPIO_InitStructure);
000274  a905              ADD      r1,sp,#0x14
000276  4819              LDR      r0,|L3.732|
000278  f7fffffe          BL       GPIO_Init
;;;875    
;;;876    	/* 第2步： 配置串口硬件参数 */
;;;877    	USART_InitStructure.USART_BaudRate = UART6_BAUD;	/* 波特率 */
00027c  f44f30e1          MOV      r0,#0x1c200
000280  9001              STR      r0,[sp,#4]
;;;878    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000282  2000              MOVS     r0,#0
000284  f8ad0008          STRH     r0,[sp,#8]
;;;879    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000288  f8ad000a          STRH     r0,[sp,#0xa]
;;;880    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00028c  f8ad000c          STRH     r0,[sp,#0xc]
;;;881    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;	/* 选择硬件流控 */
000290  f44f7040          MOV      r0,#0x300
000294  f8ad0010          STRH     r0,[sp,#0x10]
;;;882    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000298  200c              MOVS     r0,#0xc
00029a  f8ad000e          STRH     r0,[sp,#0xe]
;;;883    	USART_Init(USART6, &USART_InitStructure);
00029e  a901              ADD      r1,sp,#4
0002a0  4810              LDR      r0,|L3.740|
0002a2  f7fffffe          BL       USART_Init
;;;884    
;;;885    	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0002a6  2201              MOVS     r2,#1
0002a8  f2405125          MOV      r1,#0x525
0002ac  480d              LDR      r0,|L3.740|
0002ae  f7fffffe          BL       USART_ITConfig
;;;886    	/*
;;;887    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;888    		注意: 不要在此处打开发送中断
;;;889    		发送中断使能在SendUart()函数打开
;;;890    	*/
;;;891    	USART_Cmd(USART6, ENABLE);		/* 使能串口 */
0002b2  2101              MOVS     r1,#1
0002b4  480b              LDR      r0,|L3.740|
0002b6  f7fffffe          BL       USART_Cmd
;;;892    
;;;893    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;894    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;895    	USART_ClearFlag(USART6, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0002ba  2140              MOVS     r1,#0x40
0002bc  4809              LDR      r0,|L3.740|
0002be  f7fffffe          BL       USART_ClearFlag
;;;896    #endif
;;;897    }
0002c2  b007              ADD      sp,sp,#0x1c
0002c4  bd00              POP      {pc}
;;;898    
                          ENDP

0002c6  0000              DCW      0x0000
                  |L3.712|
                          DCD      0x40020000
                  |L3.716|
                          DCD      0x40011000
                  |L3.720|
                          DCD      0x40004400
                  |L3.724|
                          DCD      0x40020400
                  |L3.728|
                          DCD      0x40004800
                  |L3.732|
                          DCD      0x40021800
                  |L3.736|
                          DCD      0x40020800
                  |L3.740|
                          DCD      0x40011400

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;272    */
;;;273    void RS485_InitTXE(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;274    {
;;;275    	GPIO_InitTypeDef GPIO_InitStructure;
;;;276    
;;;277    	RCC_AHB1PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;278    
;;;279    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00000a  2001              MOVS     r0,#1
00000c  f88d0004          STRB     r0,[sp,#4]
;;;280    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽 */
000010  2000              MOVS     r0,#0
000012  f88d0006          STRB     r0,[sp,#6]
;;;281    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 无上拉电阻 */
000016  f88d0007          STRB     r0,[sp,#7]
;;;282    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00001a  2003              MOVS     r0,#3
00001c  f88d0005          STRB     r0,[sp,#5]
;;;283    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000020  2004              MOVS     r0,#4
000022  9000              STR      r0,[sp,#0]
;;;284    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4802              LDR      r0,|L4.48|
000028  f7fffffe          BL       GPIO_Init
;;;285    }
00002c  bd1c              POP      {r2-r4,pc}
;;;286    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x40020400

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;374    extern void MODBUS_ReciveNew(uint8_t _byte);
;;;375    void RS485_ReciveNew(uint8_t _byte)
000000  b510              PUSH     {r4,lr}
;;;376    {
000002  4604              MOV      r4,r0
;;;377    	MODBUS_ReciveNew(_byte);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       MODBUS_ReciveNew
;;;378    }
00000a  bd10              POP      {r4,pc}
;;;379    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;317    */
;;;318    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;319    {
;;;320    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  8008              STRH     r0,[r1,#0]
;;;321    }
000006  4770              BX       lr
;;;322    
                          ENDP

                  |L6.8|
                          DCD      0x40020418

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;345    */
;;;346    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;347    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;348    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;349    }
000010  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;331    */
;;;332    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;333    {
;;;334    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  8008              STRH     r0,[r1,#0]
;;;335    }
000006  4770              BX       lr
;;;336    
                          ENDP

                  |L8.8|
                          DCD      0x4002041a

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;360    */
;;;361    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;362    {
000002  4604              MOV      r4,r0
;;;363    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;364    }
000014  bd70              POP      {r4-r6,pc}
;;;365    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1174   #if UART1_FIFO_EN == 1
;;;1175   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1176   {
;;;1177   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1178   }
000008  bd10              POP      {r4,pc}
;;;1179   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1181   #if UART2_FIFO_EN == 1
;;;1182   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1183   {
;;;1184   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1185   }
000008  bd10              POP      {r4,pc}
;;;1186   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1188   #if UART3_FIFO_EN == 1
;;;1189   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1190   {
;;;1191   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1192   }
000008  bd10              POP      {r4,pc}
;;;1193   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart3

                          AREA ||i.USART6_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART6_IRQHandler PROC
;;;1209   #if UART6_FIFO_EN == 1
;;;1210   void USART6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1211   {
;;;1212   	UartIRQ(&g_tUart6);
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       UartIRQ
;;;1213   }
000008  bd10              POP      {r4,pc}
;;;1214   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      g_tUart6

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;1042   */
;;;1043   static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;1044   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1045   	uint16_t usCount;
;;;1046   
;;;1047   	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;1048   	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;1049   	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;1050   	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;1051   
;;;1052   	/* 如果读和写索引相同，则返回0 */
;;;1053   	//if (_pUart->usRxRead == usRxWrite)
;;;1054   	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L14.26|
;;;1055   	{
;;;1056   		return 0;
000016  2000              MOVS     r0,#0
                  |L14.24|
;;;1057   	}
;;;1058   	else
;;;1059   	{
;;;1060   		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;1061   
;;;1062   		/* 改写FIFO读索引 */
;;;1063   		DISABLE_INT();
;;;1064   		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;1065   		{
;;;1066   			_pUart->usRxRead = 0;
;;;1067   		}
;;;1068   		_pUart->usRxCount--;
;;;1069   		ENABLE_INT();
;;;1070   		return 1;
;;;1071   	}
;;;1072   }
000018  bd70              POP      {r4-r6,pc}
                  |L14.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;1060
00001c  68a0              LDR      r0,[r4,#8]            ;1060
00001e  5c40              LDRB     r0,[r0,r1]            ;1060
000020  7028              STRB     r0,[r5,#0]            ;1060
000022  2001              MOVS     r0,#1                 ;1063
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;1064
00002a  1c40              ADDS     r0,r0,#1              ;1064
00002c  b280              UXTH     r0,r0                 ;1064
00002e  8320              STRH     r0,[r4,#0x18]         ;1064
000030  89e1              LDRH     r1,[r4,#0xe]          ;1064
000032  4288              CMP      r0,r1                 ;1064
000034  db01              BLT      |L14.58|
000036  2000              MOVS     r0,#0                 ;1066
000038  8320              STRH     r0,[r4,#0x18]         ;1066
                  |L14.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;1068
00003c  1e40              SUBS     r0,r0,#1              ;1068
00003e  8360              STRH     r0,[r4,#0x1a]         ;1068
000040  2000              MOVS     r0,#0                 ;1069
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;1070
000048  e7e6              B        |L14.24|
;;;1073   
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;1081   */
;;;1082   static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;1083   {
000002  4604              MOV      r4,r0
;;;1084   	/* 处理接收中断  */
;;;1085   	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L15.74|
;;;1086   	{
;;;1087   		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;1088   		uint8_t ch;
;;;1089   
;;;1090   		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;1091   		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;1092   		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L15.48|
;;;1093   		{
;;;1094   			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L15.48|
;;;1095   		}
;;;1096   		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L15.62|
;;;1097   		{
;;;1098   			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L15.62|
;;;1099   		}
;;;1100   
;;;1101   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1102   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1103   		//if (_pUart->usRxCount == 1)
;;;1104   		{
;;;1105   			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L15.72|
;;;1106   			{
;;;1107   				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L15.72|
;;;1108   			}
;;;1109   		}
;;;1110   	}
000048  bf00              NOP      
                  |L15.74|
;;;1111   
;;;1112   	/* 处理发送缓冲区空中断 */
;;;1113   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L15.154|
;;;1114   	{
;;;1115   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1116   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L15.116|
;;;1117   		{
;;;1118   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1119   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1120   
;;;1121   			/* 使能数据发送完毕中断 */
;;;1122   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L15.228|
                  |L15.116|
;;;1123   		}
;;;1124   		else
;;;1125   		{
;;;1126   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1127   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1128   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L15.146|
;;;1129   			{
;;;1130   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L15.146|
;;;1131   			}
;;;1132   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L15.228|
                  |L15.154|
;;;1133   		}
;;;1134   
;;;1135   	}
;;;1136   	/* 数据bit位全部发送完毕的中断 */
;;;1137   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L15.228|
;;;1138   	{
;;;1139   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1140   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L15.192|
;;;1141   		{
;;;1142   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1143   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1144   
;;;1145   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1146   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L15.228|
;;;1147   			{
;;;1148   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L15.228|
                  |L15.192|
;;;1149   			}
;;;1150   		}
;;;1151   		else
;;;1152   		{
;;;1153   			/* 正常情况下，不会进入此分支 */
;;;1154   
;;;1155   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1156   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1157   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L15.222|
;;;1158   			{
;;;1159   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L15.222|
;;;1160   			}
;;;1161   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L15.228|
;;;1162   		}
;;;1163   	}
;;;1164   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1165   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;970    */
;;;971    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;972    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;973    	uint16_t i;
;;;974    
;;;975    	for (i = 0; i < _usLen; i++)
00000a  2500              MOVS     r5,#0
00000c  e027              B        |L16.94|
                  |L16.14|
;;;976    	{
;;;977    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;978    	#if 0
;;;979    		/*
;;;980    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;981    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;982    			将导致while(1) 无法退出
;;;983    		*/
;;;984    		while (1)
;;;985    		{
;;;986    			uint16_t usRead;
;;;987    
;;;988    			DISABLE_INT();
;;;989    			usRead = _pUart->usTxRead;
;;;990    			ENABLE_INT();
;;;991    
;;;992    			if (++usRead >= _pUart->usTxBufSize)
;;;993    			{
;;;994    				usRead = 0;
;;;995    			}
;;;996    
;;;997    			if (usRead != _pUart->usTxWrite)
;;;998    			{
;;;999    				break;
;;;1000   			}
;;;1001   		}
;;;1002   	#else
;;;1003   		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;1004   		while (1)
00000e  e00c              B        |L16.42|
                  |L16.16|
;;;1005   		{
;;;1006   			uint16_t usCount;
;;;1007   
;;;1008   			DISABLE_INT();
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       __set_PRIMASK
;;;1009   			usCount = _pUart->usTxCount;
000016  f8b48014          LDRH     r8,[r4,#0x14]
;;;1010   			ENABLE_INT();
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       __set_PRIMASK
;;;1011   
;;;1012   			if (usCount < _pUart->usTxBufSize)
000020  89a0              LDRH     r0,[r4,#0xc]
000022  4540              CMP      r0,r8
000024  dd00              BLE      |L16.40|
;;;1013   			{
;;;1014   				break;
000026  e001              B        |L16.44|
                  |L16.40|
;;;1015   			}
;;;1016   		}
000028  bf00              NOP      
                  |L16.42|
00002a  e7f1              B        |L16.16|
                  |L16.44|
00002c  bf00              NOP                            ;1014
;;;1017   	#endif
;;;1018   
;;;1019   		/* 将新数据填入发送缓冲区 */
;;;1020   		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002e  5d70              LDRB     r0,[r6,r5]
000030  8a22              LDRH     r2,[r4,#0x10]
000032  6861              LDR      r1,[r4,#4]
000034  5488              STRB     r0,[r1,r2]
;;;1021   
;;;1022   		DISABLE_INT();
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       __set_PRIMASK
;;;1023   		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003c  8a20              LDRH     r0,[r4,#0x10]
00003e  1c40              ADDS     r0,r0,#1
000040  b280              UXTH     r0,r0
000042  8220              STRH     r0,[r4,#0x10]
000044  89a1              LDRH     r1,[r4,#0xc]
000046  4288              CMP      r0,r1
000048  db01              BLT      |L16.78|
;;;1024   		{
;;;1025   			_pUart->usTxWrite = 0;
00004a  2000              MOVS     r0,#0
00004c  8220              STRH     r0,[r4,#0x10]
                  |L16.78|
;;;1026   		}
;;;1027   		_pUart->usTxCount++;
00004e  8aa0              LDRH     r0,[r4,#0x14]
000050  1c40              ADDS     r0,r0,#1
000052  82a0              STRH     r0,[r4,#0x14]
;;;1028   		ENABLE_INT();
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       __set_PRIMASK
00005a  1c68              ADDS     r0,r5,#1              ;975
00005c  b285              UXTH     r5,r0                 ;975
                  |L16.94|
00005e  42bd              CMP      r5,r7                 ;975
000060  dbd5              BLT      |L16.14|
;;;1029   	}
;;;1030   
;;;1031   	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000062  2201              MOVS     r2,#1
000064  f2407127          MOV      r1,#0x727
000068  6820              LDR      r0,[r4,#0]
00006a  f7fffffe          BL       USART_ITConfig
;;;1032   }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;1033   
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;387    */
;;;388    static void UartVarInit(void)
000000  482b              LDR      r0,|L17.176|
;;;389    {
;;;390    #if UART1_FIFO_EN == 1
;;;391    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  492c              LDR      r1,|L17.180|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;392    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  482c              LDR      r0,|L17.184|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;393    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  482c              LDR      r0,|L17.188|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;394    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;395    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;396    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;397    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;398    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;399    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;400    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;401    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;402    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;403    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;404    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;405    #endif
;;;406    
;;;407    #if UART2_FIFO_EN == 1
;;;408    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  4825              LDR      r0,|L17.192|
00002c  4925              LDR      r1,|L17.196|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;409    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  4825              LDR      r0,|L17.200|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;410    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  4825              LDR      r0,|L17.204|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;411    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  2001              MOVS     r0,#1
00003a  8188              STRH     r0,[r1,#0xc]
;;;412    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003c  02c0              LSLS     r0,r0,#11
00003e  81c8              STRH     r0,[r1,#0xe]
;;;413    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;414    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;415    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;416    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;417    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;418    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;419    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;420    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;421    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;422    #endif
;;;423    
;;;424    #if UART3_FIFO_EN == 1
;;;425    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  481e              LDR      r0,|L17.208|
000056  491f              LDR      r1,|L17.212|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;426    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  481f              LDR      r0,|L17.216|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;427    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  481f              LDR      r0,|L17.220|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;428    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f6080          MOV      r0,#0x400
000066  8188              STRH     r0,[r1,#0xc]
;;;429    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;430    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;431    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;432    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;433    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;434    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;435    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000076  8288              STRH     r0,[r1,#0x14]
;;;436    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
000078  4819              LDR      r0,|L17.224|
00007a  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;437    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
00007c  4819              LDR      r0,|L17.228|
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;438    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000080  4819              LDR      r0,|L17.232|
000082  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;439    #endif
;;;440    
;;;441    #if UART4_FIFO_EN == 1
;;;442    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;443    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;444    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;445    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;446    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;447    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;448    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;449    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;450    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;451    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;452    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;453    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;454    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;455    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;456    #endif
;;;457    
;;;458    #if UART5_FIFO_EN == 1
;;;459    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;460    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;461    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;462    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;463    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;464    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;465    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;466    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;467    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;468    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;469    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;470    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;471    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;472    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;473    #endif
;;;474    
;;;475    
;;;476    #if UART6_FIFO_EN == 1
;;;477    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
000084  4819              LDR      r0,|L17.236|
000086  491a              LDR      r1,|L17.240|
000088  6008              STR      r0,[r1,#0]  ; g_tUart6
;;;478    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
00008a  481a              LDR      r0,|L17.244|
00008c  6048              STR      r0,[r1,#4]  ; g_tUart6
;;;479    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
00008e  481a              LDR      r0,|L17.248|
000090  6088              STR      r0,[r1,#8]  ; g_tUart6
;;;480    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000092  f44f6080          MOV      r0,#0x400
000096  8188              STRH     r0,[r1,#0xc]
;;;481    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000098  81c8              STRH     r0,[r1,#0xe]
;;;482    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
00009a  2000              MOVS     r0,#0
00009c  8208              STRH     r0,[r1,#0x10]
;;;483    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
00009e  8248              STRH     r0,[r1,#0x12]
;;;484    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
0000a0  82c8              STRH     r0,[r1,#0x16]
;;;485    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
0000a2  8308              STRH     r0,[r1,#0x18]
;;;486    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
0000a4  8348              STRH     r0,[r1,#0x1a]
;;;487    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
0000a6  8288              STRH     r0,[r1,#0x14]
;;;488    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
0000a8  61c8              STR      r0,[r1,#0x1c]  ; g_tUart6
;;;489    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
0000aa  6208              STR      r0,[r1,#0x20]  ; g_tUart6
;;;490    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
0000ac  6248              STR      r0,[r1,#0x24]  ; g_tUart6
;;;491    #endif
;;;492    }
0000ae  4770              BX       lr
;;;493    
                          ENDP

                  |L17.176|
                          DCD      0x40011000
                  |L17.180|
                          DCD      g_tUart1
                  |L17.184|
                          DCD      g_TxBuf1
                  |L17.188|
                          DCD      g_RxBuf1
                  |L17.192|
                          DCD      0x40004400
                  |L17.196|
                          DCD      g_tUart2
                  |L17.200|
                          DCD      g_TxBuf2
                  |L17.204|
                          DCD      g_RxBuf2
                  |L17.208|
                          DCD      0x40004800
                  |L17.212|
                          DCD      g_tUart3
                  |L17.216|
                          DCD      g_TxBuf3
                  |L17.220|
                          DCD      g_RxBuf3
                  |L17.224|
                          DCD      RS485_SendBefor
                  |L17.228|
                          DCD      RS485_SendOver
                  |L17.232|
                          DCD      RS485_ReciveNew
                  |L17.236|
                          DCD      0x40011400
                  |L17.240|
                          DCD      g_tUart6
                  |L17.244|
                          DCD      g_TxBuf6
                  |L17.248|
                          DCD      g_RxBuf6

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;193     */
;;;194    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;195    {
;;;196      register uint32_t __regPriMask         __ASM("primask");
;;;197      __regPriMask = (priMask);
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;76     */
;;;77     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;80     
;;;81     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;82     
;;;83     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;84     
;;;85     	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;86     }
000012  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;294    */
;;;295    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;296    {
000002  4604              MOV      r4,r0
;;;297    	USART_InitTypeDef USART_InitStructure;
;;;298    
;;;299    	/* 第2步： 配置串口硬件参数 */
;;;300    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;301    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;302    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;303    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;304    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;305    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;306    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L20.40|
000022  f7fffffe          BL       USART_Init
;;;307    }
000026  bd1f              POP      {r0-r4,pc}
;;;308    
                          ENDP

                  |L20.40|
                          DCD      0x40004800

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;247    */
;;;248    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;249    {
000002  4603              MOV      r3,r0
;;;250    	UART_T *pUart;
;;;251    
;;;252    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;253    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L21.16|
                  |L21.14|
;;;254    	{
;;;255    		return;
;;;256    	}
;;;257    
;;;258    	pUart->usRxWrite = 0;
;;;259    	pUart->usRxRead = 0;
;;;260    	pUart->usRxCount = 0;
;;;261    }
00000e  bd00              POP      {pc}
                  |L21.16|
000010  2000              MOVS     r0,#0                 ;258
000012  82d0              STRH     r0,[r2,#0x16]         ;258
000014  8310              STRH     r0,[r2,#0x18]         ;259
000016  8350              STRH     r0,[r2,#0x1a]         ;260
000018  bf00              NOP      
00001a  e7f8              B        |L21.14|
;;;262    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;224    */
;;;225    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;226    {
000002  4603              MOV      r3,r0
;;;227    	UART_T *pUart;
;;;228    
;;;229    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;230    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L22.16|
                  |L22.14|
;;;231    	{
;;;232    		return;
;;;233    	}
;;;234    
;;;235    	pUart->usTxWrite = 0;
;;;236    	pUart->usTxRead = 0;
;;;237    	pUart->usTxCount = 0;
;;;238    }
00000e  bd00              POP      {pc}
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;235
000012  8210              STRH     r0,[r2,#0x10]         ;235
000014  8250              STRH     r0,[r2,#0x12]         ;236
000016  8290              STRH     r0,[r2,#0x14]         ;237
000018  bf00              NOP      
00001a  e7f8              B        |L22.14|
;;;239    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;203    */
;;;204    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;205    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;206    	UART_T *pUart;
;;;207    
;;;208    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;209    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L23.20|
;;;210    	{
;;;211    		return 0;
000010  2000              MOVS     r0,#0
                  |L23.18|
;;;212    	}
;;;213    
;;;214    	return UartGetChar(pUart, _pByte);
;;;215    }
000012  bd70              POP      {r4-r6,pc}
                  |L23.20|
000014  4631              MOV      r1,r6                 ;214
000016  4620              MOV      r0,r4                 ;214
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L23.18|
;;;216    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;162    */
;;;163    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;164    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;165    	UART_T *pUart;
;;;166    
;;;167    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;168    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L24.24|
                  |L24.20|
;;;169    	{
;;;170    		return;
;;;171    	}
;;;172    
;;;173    	if (pUart->SendBefor != 0)
;;;174    	{
;;;175    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;176    	}
;;;177    
;;;178    	UartSend(pUart, _ucaBuf, _usLen);
;;;179    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L24.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;173
00001a  b108              CBZ      r0,|L24.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;175
00001e  4780              BLX      r0                    ;175
                  |L24.32|
000020  463a              MOV      r2,r7                 ;178
000022  4631              MOV      r1,r6                 ;178
000024  4620              MOV      r0,r4                 ;178
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L24.20|
;;;180    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;189    */
;;;190    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;191    {
000002  4604              MOV      r4,r0
;;;192    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;193    }
00000e  bd1c              POP      {r2-r4,pc}
;;;194    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1249   */
;;;1250   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1251   {
000002  4604              MOV      r4,r0
;;;1252   
;;;1253   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1254   	uint8_t ucData;
;;;1255   
;;;1256   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L26.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L26.6|
;;;1257   
;;;1258   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1259   #else
;;;1260   	/* 等待串口1输入数据 */
;;;1261   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1262   
;;;1263   	return (int)USART_ReceiveData(USART1);
;;;1264   #endif
;;;1265   }
000016  bd38              POP      {r3-r5,pc}
;;;1266   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1223   */
;;;1224   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1225   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1226   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1227   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1228   
;;;1229   	return ch;
00000e  4620              MOV      r0,r4
;;;1230   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1231   	/* 写一个字节到USART1 */
;;;1232   	USART_SendData(USART1, (uint8_t) ch);
;;;1233   
;;;1234   	/* 等待发送结束 */
;;;1235   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1236   	{}
;;;1237   
;;;1238   	return ch;
;;;1239   #endif
;;;1240   }
000010  bd70              POP      {r4-r6,pc}
;;;1241   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_RxBuf2
                          %        2048
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024
                  g_tUart6
                          %        40
                  g_TxBuf6
                          %        1024
                  g_RxBuf6
                          %        1024

                          AREA ||.data||, DATA, ALIGN=0

                  g_TxBuf2
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 144
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____RRX|
#line 300
|__asm___15_bsp_uart_fifo_c_b28b0d00____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
